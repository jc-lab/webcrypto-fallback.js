/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 2604:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.shim = void 0;

var webcryptoLiner = __webpack_require__(4348);

function WrapFunction(subtle, name) {
  var fn = subtle[name]; // tslint:disable-next-line:only-arrow-functions

  subtle[name] = function () {
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    return new Promise(function (resolve, reject) {
      var op = fn.apply(subtle, args);

      if (op.then) {
        op.then(function (result) {
          return resolve(result);
        }).catch(function (err) {
          return reject(err);
        });
      } else {
        op.oncomplete = function (e) {
          resolve(e.target.result);
        };

        op.onerror = function (e) {
          reject("Error on running '".concat(name, "' function"));
        };
      }
    });
  };
}

function shim(window) {
  var nativeCrypto = webcryptoLiner.nativeCrypto;
  var nativeSubtle = webcryptoLiner.nativeSubtle;

  if (nativeCrypto) {
    Object.freeze(nativeCrypto.getRandomValues);
  }

  if (typeof self !== 'undefined' && self['msCrypto']) {
    WrapFunction(nativeSubtle, 'generateKey');
    WrapFunction(nativeSubtle, 'digest');
    WrapFunction(nativeSubtle, 'sign');
    WrapFunction(nativeSubtle, 'verify');
    WrapFunction(nativeSubtle, 'encrypt');
    WrapFunction(nativeSubtle, 'decrypt');
    WrapFunction(nativeSubtle, 'importKey');
    WrapFunction(nativeSubtle, 'exportKey');
    WrapFunction(nativeSubtle, 'wrapKey');
    WrapFunction(nativeSubtle, 'unwrapKey');
    WrapFunction(nativeSubtle, 'deriveKey');
    WrapFunction(nativeSubtle, 'deriveBits');
  } // fix: Math.imul for IE


  if (!Math.imul) {
    // tslint:disable-next-line:only-arrow-functions
    Math.imul = function imul(a, b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }

  try {
    delete window.crypto;
    window.crypto = new webcryptoLiner.Crypto();
    Object.freeze(window.crypto);
  } catch (e) {
    console.error(e);
  }

  try {
    window.CryptoKey = webcryptoLiner.CryptoKey;
    Object.freeze(window.CryptoKey);
  } catch (e) {
    console.error(e);
  }
}

exports.shim = shim;

/***/ }),

/***/ 6541:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "AsnAnyConverter": function() { return /* reexport */ AsnAnyConverter; },
  "AsnArray": function() { return /* reexport */ AsnArray; },
  "AsnBitStringConverter": function() { return /* reexport */ AsnBitStringConverter; },
  "AsnBmpStringConverter": function() { return /* reexport */ AsnBmpStringConverter; },
  "AsnBooleanConverter": function() { return /* reexport */ AsnBooleanConverter; },
  "AsnCharacterStringConverter": function() { return /* reexport */ AsnCharacterStringConverter; },
  "AsnChoiceType": function() { return /* reexport */ AsnChoiceType; },
  "AsnConstructedOctetStringConverter": function() { return /* reexport */ AsnConstructedOctetStringConverter; },
  "AsnConvert": function() { return /* reexport */ AsnConvert; },
  "AsnEnumeratedConverter": function() { return /* reexport */ AsnEnumeratedConverter; },
  "AsnGeneralStringConverter": function() { return /* reexport */ AsnGeneralStringConverter; },
  "AsnGeneralizedTimeConverter": function() { return /* reexport */ AsnGeneralizedTimeConverter; },
  "AsnGraphicStringConverter": function() { return /* reexport */ AsnGraphicStringConverter; },
  "AsnIA5StringConverter": function() { return /* reexport */ AsnIA5StringConverter; },
  "AsnIntegerArrayBufferConverter": function() { return /* reexport */ AsnIntegerArrayBufferConverter; },
  "AsnIntegerBigIntConverter": function() { return /* reexport */ AsnIntegerBigIntConverter; },
  "AsnIntegerConverter": function() { return /* reexport */ AsnIntegerConverter; },
  "AsnNullConverter": function() { return /* reexport */ AsnNullConverter; },
  "AsnNumericStringConverter": function() { return /* reexport */ AsnNumericStringConverter; },
  "AsnObjectIdentifierConverter": function() { return /* reexport */ AsnObjectIdentifierConverter; },
  "AsnOctetStringConverter": function() { return /* reexport */ AsnOctetStringConverter; },
  "AsnParser": function() { return /* reexport */ AsnParser; },
  "AsnPrintableStringConverter": function() { return /* reexport */ AsnPrintableStringConverter; },
  "AsnProp": function() { return /* reexport */ AsnProp; },
  "AsnPropTypes": function() { return /* reexport */ AsnPropTypes; },
  "AsnSchemaValidationError": function() { return /* reexport */ AsnSchemaValidationError; },
  "AsnSequenceType": function() { return /* reexport */ AsnSequenceType; },
  "AsnSerializer": function() { return /* reexport */ AsnSerializer; },
  "AsnSetType": function() { return /* reexport */ AsnSetType; },
  "AsnTeletexStringConverter": function() { return /* reexport */ AsnTeletexStringConverter; },
  "AsnType": function() { return /* reexport */ AsnType; },
  "AsnTypeTypes": function() { return /* reexport */ AsnTypeTypes; },
  "AsnUTCTimeConverter": function() { return /* reexport */ AsnUTCTimeConverter; },
  "AsnUniversalStringConverter": function() { return /* reexport */ AsnUniversalStringConverter; },
  "AsnUtf8StringConverter": function() { return /* reexport */ AsnUtf8StringConverter; },
  "AsnVideotexStringConverter": function() { return /* reexport */ AsnVideotexStringConverter; },
  "AsnVisibleStringConverter": function() { return /* reexport */ AsnVisibleStringConverter; },
  "BitString": function() { return /* reexport */ BitString; },
  "OctetString": function() { return /* reexport */ OctetString; },
  "defaultConverter": function() { return /* reexport */ converters_defaultConverter; }
});

// EXTERNAL MODULE: ../library/node_modules/asn1js/build/index.es.js + 1 modules
var index_es = __webpack_require__(1331);
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/enums.js
var AsnTypeTypes;

(function (AsnTypeTypes) {
  AsnTypeTypes[AsnTypeTypes["Sequence"] = 0] = "Sequence";
  AsnTypeTypes[AsnTypeTypes["Set"] = 1] = "Set";
  AsnTypeTypes[AsnTypeTypes["Choice"] = 2] = "Choice";
})(AsnTypeTypes || (AsnTypeTypes = {}));

var AsnPropTypes;

(function (AsnPropTypes) {
  AsnPropTypes[AsnPropTypes["Any"] = 1] = "Any";
  AsnPropTypes[AsnPropTypes["Boolean"] = 2] = "Boolean";
  AsnPropTypes[AsnPropTypes["OctetString"] = 3] = "OctetString";
  AsnPropTypes[AsnPropTypes["BitString"] = 4] = "BitString";
  AsnPropTypes[AsnPropTypes["Integer"] = 5] = "Integer";
  AsnPropTypes[AsnPropTypes["Enumerated"] = 6] = "Enumerated";
  AsnPropTypes[AsnPropTypes["ObjectIdentifier"] = 7] = "ObjectIdentifier";
  AsnPropTypes[AsnPropTypes["Utf8String"] = 8] = "Utf8String";
  AsnPropTypes[AsnPropTypes["BmpString"] = 9] = "BmpString";
  AsnPropTypes[AsnPropTypes["UniversalString"] = 10] = "UniversalString";
  AsnPropTypes[AsnPropTypes["NumericString"] = 11] = "NumericString";
  AsnPropTypes[AsnPropTypes["PrintableString"] = 12] = "PrintableString";
  AsnPropTypes[AsnPropTypes["TeletexString"] = 13] = "TeletexString";
  AsnPropTypes[AsnPropTypes["VideotexString"] = 14] = "VideotexString";
  AsnPropTypes[AsnPropTypes["IA5String"] = 15] = "IA5String";
  AsnPropTypes[AsnPropTypes["GraphicString"] = 16] = "GraphicString";
  AsnPropTypes[AsnPropTypes["VisibleString"] = 17] = "VisibleString";
  AsnPropTypes[AsnPropTypes["GeneralString"] = 18] = "GeneralString";
  AsnPropTypes[AsnPropTypes["CharacterString"] = 19] = "CharacterString";
  AsnPropTypes[AsnPropTypes["UTCTime"] = 20] = "UTCTime";
  AsnPropTypes[AsnPropTypes["GeneralizedTime"] = 21] = "GeneralizedTime";
  AsnPropTypes[AsnPropTypes["DATE"] = 22] = "DATE";
  AsnPropTypes[AsnPropTypes["TimeOfDay"] = 23] = "TimeOfDay";
  AsnPropTypes[AsnPropTypes["DateTime"] = 24] = "DateTime";
  AsnPropTypes[AsnPropTypes["Duration"] = 25] = "Duration";
  AsnPropTypes[AsnPropTypes["TIME"] = 26] = "TIME";
  AsnPropTypes[AsnPropTypes["Null"] = 27] = "Null";
})(AsnPropTypes || (AsnPropTypes = {}));
// EXTERNAL MODULE: ../library/node_modules/pvtsutils/build/index.js
var build = __webpack_require__(5774);
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var BitString = /*#__PURE__*/function () {
  function BitString(params) {
    var unusedBits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, BitString);

    this.unusedBits = 0;
    this.value = new ArrayBuffer(0);

    if (params) {
      if (typeof params === "number") {
        this.fromNumber(params);
      } else if (build.BufferSourceConverter.isBufferSource(params)) {
        this.unusedBits = unusedBits;
        this.value = build.BufferSourceConverter.toArrayBuffer(params);
      } else {
        throw TypeError("Unsupported type of 'params' argument for BitString");
      }
    }
  }

  _createClass(BitString, [{
    key: "fromASN",
    value: function fromASN(asn) {
      if (!(asn instanceof index_es.BitString)) {
        throw new TypeError("Argument 'asn' is not instance of ASN.1 BitString");
      }

      this.unusedBits = asn.valueBlock.unusedBits;
      this.value = asn.valueBlock.valueHex;
      return this;
    }
  }, {
    key: "toASN",
    value: function toASN() {
      return new index_es.BitString({
        unusedBits: this.unusedBits,
        valueHex: this.value
      });
    }
  }, {
    key: "toSchema",
    value: function toSchema(name) {
      return new index_es.BitString({
        name: name
      });
    }
  }, {
    key: "toNumber",
    value: function toNumber() {
      var res = "";
      var uintArray = new Uint8Array(this.value);

      var _iterator = _createForOfIteratorHelper(uintArray),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var octet = _step.value;
          res += octet.toString(2).padStart(8, "0");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      res = res.split("").reverse().join("");

      if (this.unusedBits) {
        res = res.slice(this.unusedBits).padStart(this.unusedBits, "0");
      }

      return parseInt(res, 2);
    }
  }, {
    key: "fromNumber",
    value: function fromNumber(value) {
      var bits = value.toString(2);
      var octetSize = bits.length + 7 >> 3;
      this.unusedBits = (octetSize << 3) - bits.length;
      var octets = new Uint8Array(octetSize);
      bits = bits.padStart(octetSize << 3, "0").split("").reverse().join("");
      var index = 0;

      while (index < octetSize) {
        octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);
        index++;
      }

      this.value = octets.buffer;
    }
  }]);

  return BitString;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/types/octet_string.js
function octet_string_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function octet_string_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function octet_string_createClass(Constructor, protoProps, staticProps) { if (protoProps) octet_string_defineProperties(Constructor.prototype, protoProps); if (staticProps) octet_string_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var OctetString = /*#__PURE__*/function () {
  function OctetString(param) {
    octet_string_classCallCheck(this, OctetString);

    if (typeof param === "number") {
      this.buffer = new ArrayBuffer(param);
    } else {
      if (build.BufferSourceConverter.isBufferSource(param)) {
        this.buffer = build.BufferSourceConverter.toArrayBuffer(param);
      } else if (Array.isArray(param)) {
        this.buffer = new Uint8Array(param);
      } else {
        this.buffer = new ArrayBuffer(0);
      }
    }
  }

  octet_string_createClass(OctetString, [{
    key: "byteLength",
    get: function get() {
      return this.buffer.byteLength;
    }
  }, {
    key: "byteOffset",
    get: function get() {
      return 0;
    }
  }, {
    key: "fromASN",
    value: function fromASN(asn) {
      if (!(asn instanceof index_es.OctetString)) {
        throw new TypeError("Argument 'asn' is not instance of ASN.1 OctetString");
      }

      this.buffer = asn.valueBlock.valueHex;
      return this;
    }
  }, {
    key: "toASN",
    value: function toASN() {
      return new index_es.OctetString({
        valueHex: this.buffer
      });
    }
  }, {
    key: "toSchema",
    value: function toSchema(name) {
      return new index_es.OctetString({
        name: name
      });
    }
  }]);

  return OctetString;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/types/index.js


;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/converters.js



var AsnAnyConverter = {
  fromASN: function fromASN(value) {
    return value instanceof index_es.Null ? null : value.valueBeforeDecodeView;
  },
  toASN: function toASN(value) {
    if (value === null) {
      return new index_es.Null();
    }

    var schema = index_es.fromBER(value);

    if (schema.result.error) {
      throw new Error(schema.result.error);
    }

    return schema.result;
  }
};
var AsnIntegerConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.valueHexView.byteLength >= 4 ? value.valueBlock.toString() : value.valueBlock.valueDec;
  },
  toASN: function toASN(value) {
    return new index_es.Integer({
      value: +value
    });
  }
};
var AsnEnumeratedConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.valueDec;
  },
  toASN: function toASN(value) {
    return new index_es.Enumerated({
      value: value
    });
  }
};
var AsnIntegerArrayBufferConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.valueHexView;
  },
  toASN: function toASN(value) {
    return new index_es.Integer({
      valueHex: value
    });
  }
};
var AsnIntegerBigIntConverter = {
  fromASN: function fromASN(value) {
    return value.toBigInt();
  },
  toASN: function toASN(value) {
    return index_es.Integer.fromBigInt(value);
  }
};
var AsnBitStringConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.valueHexView;
  },
  toASN: function toASN(value) {
    return new index_es.BitString({
      valueHex: value
    });
  }
};
var AsnObjectIdentifierConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.toString();
  },
  toASN: function toASN(value) {
    return new index_es.ObjectIdentifier({
      value: value
    });
  }
};
var AsnBooleanConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.value;
  },
  toASN: function toASN(value) {
    return new index_es.Boolean({
      value: value
    });
  }
};
var AsnOctetStringConverter = {
  fromASN: function fromASN(value) {
    return value.valueBlock.valueHexView;
  },
  toASN: function toASN(value) {
    return new index_es.OctetString({
      valueHex: value
    });
  }
};
var AsnConstructedOctetStringConverter = {
  fromASN: function fromASN(value) {
    return new OctetString(value.getValue());
  },
  toASN: function toASN(value) {
    return value.toASN();
  }
};

function createStringConverter(Asn1Type) {
  return {
    fromASN: function fromASN(value) {
      return value.valueBlock.value;
    },
    toASN: function toASN(value) {
      return new Asn1Type({
        value: value
      });
    }
  };
}

var AsnUtf8StringConverter = createStringConverter(index_es.Utf8String);
var AsnBmpStringConverter = createStringConverter(index_es.BmpString);
var AsnUniversalStringConverter = createStringConverter(index_es.UniversalString);
var AsnNumericStringConverter = createStringConverter(index_es.NumericString);
var AsnPrintableStringConverter = createStringConverter(index_es.PrintableString);
var AsnTeletexStringConverter = createStringConverter(index_es.TeletexString);
var AsnVideotexStringConverter = createStringConverter(index_es.VideotexString);
var AsnIA5StringConverter = createStringConverter(index_es.IA5String);
var AsnGraphicStringConverter = createStringConverter(index_es.GraphicString);
var AsnVisibleStringConverter = createStringConverter(index_es.VisibleString);
var AsnGeneralStringConverter = createStringConverter(index_es.GeneralString);
var AsnCharacterStringConverter = createStringConverter(index_es.CharacterString);
var AsnUTCTimeConverter = {
  fromASN: function fromASN(value) {
    return value.toDate();
  },
  toASN: function toASN(value) {
    return new index_es.UTCTime({
      valueDate: value
    });
  }
};
var AsnGeneralizedTimeConverter = {
  fromASN: function fromASN(value) {
    return value.toDate();
  },
  toASN: function toASN(value) {
    return new index_es.GeneralizedTime({
      valueDate: value
    });
  }
};
var AsnNullConverter = {
  fromASN: function fromASN() {
    return null;
  },
  toASN: function toASN() {
    return new index_es.Null();
  }
};
function converters_defaultConverter(type) {
  switch (type) {
    case AsnPropTypes.Any:
      return AsnAnyConverter;

    case AsnPropTypes.BitString:
      return AsnBitStringConverter;

    case AsnPropTypes.BmpString:
      return AsnBmpStringConverter;

    case AsnPropTypes.Boolean:
      return AsnBooleanConverter;

    case AsnPropTypes.CharacterString:
      return AsnCharacterStringConverter;

    case AsnPropTypes.Enumerated:
      return AsnEnumeratedConverter;

    case AsnPropTypes.GeneralString:
      return AsnGeneralStringConverter;

    case AsnPropTypes.GeneralizedTime:
      return AsnGeneralizedTimeConverter;

    case AsnPropTypes.GraphicString:
      return AsnGraphicStringConverter;

    case AsnPropTypes.IA5String:
      return AsnIA5StringConverter;

    case AsnPropTypes.Integer:
      return AsnIntegerConverter;

    case AsnPropTypes.Null:
      return AsnNullConverter;

    case AsnPropTypes.NumericString:
      return AsnNumericStringConverter;

    case AsnPropTypes.ObjectIdentifier:
      return AsnObjectIdentifierConverter;

    case AsnPropTypes.OctetString:
      return AsnOctetStringConverter;

    case AsnPropTypes.PrintableString:
      return AsnPrintableStringConverter;

    case AsnPropTypes.TeletexString:
      return AsnTeletexStringConverter;

    case AsnPropTypes.UTCTime:
      return AsnUTCTimeConverter;

    case AsnPropTypes.UniversalString:
      return AsnUniversalStringConverter;

    case AsnPropTypes.Utf8String:
      return AsnUtf8StringConverter;

    case AsnPropTypes.VideotexString:
      return AsnVideotexStringConverter;

    case AsnPropTypes.VisibleString:
      return AsnVisibleStringConverter;

    default:
      return null;
  }
}
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/helper.js
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function isConvertible(target) {
  if (typeof target === "function" && target.prototype) {
    if (target.prototype.toASN && target.prototype.fromASN) {
      return true;
    } else {
      return isConvertible(target.prototype);
    }
  } else {
    return !!(target && _typeof(target) === "object" && "toASN" in target && "fromASN" in target);
  }
}
function isTypeOfArray(target) {
  var _a;

  if (target) {
    var proto = Object.getPrototypeOf(target);

    if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {
      return true;
    }

    return isTypeOfArray(proto);
  }

  return false;
}
function isArrayEqual(bytes1, bytes2) {
  if (!(bytes1 && bytes2)) {
    return false;
  }

  if (bytes1.byteLength !== bytes2.byteLength) {
    return false;
  }

  var b1 = new Uint8Array(bytes1);
  var b2 = new Uint8Array(bytes2);

  for (var i = 0; i < bytes1.byteLength; i++) {
    if (b1[i] !== b2[i]) {
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/schema.js
function schema_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function schema_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function schema_createClass(Constructor, protoProps, staticProps) { if (protoProps) schema_defineProperties(Constructor.prototype, protoProps); if (staticProps) schema_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }




var AsnSchemaStorage = /*#__PURE__*/function () {
  function AsnSchemaStorage() {
    schema_classCallCheck(this, AsnSchemaStorage);

    this.items = new WeakMap();
  }

  schema_createClass(AsnSchemaStorage, [{
    key: "has",
    value: function has(target) {
      return this.items.has(target);
    }
  }, {
    key: "get",
    value: function get(target) {
      var checkSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var schema = this.items.get(target);

      if (!schema) {
        throw new Error("Cannot get schema for '".concat(target.prototype.constructor.name, "' target"));
      }

      if (checkSchema && !schema.schema) {
        throw new Error("Schema '".concat(target.prototype.constructor.name, "' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'."));
      }

      return schema;
    }
  }, {
    key: "cache",
    value: function cache(target) {
      var schema = this.get(target);

      if (!schema.schema) {
        schema.schema = this.create(target, true);
      }
    }
  }, {
    key: "createDefault",
    value: function createDefault(target) {
      var schema = {
        type: AsnTypeTypes.Sequence,
        items: {}
      };
      var parentSchema = this.findParentSchema(target);

      if (parentSchema) {
        Object.assign(schema, parentSchema);
        schema.items = Object.assign({}, schema.items, parentSchema.items);
      }

      return schema;
    }
  }, {
    key: "create",
    value: function create(target, useNames) {
      var schema = this.items.get(target) || this.createDefault(target);
      var asn1Value = [];

      for (var key in schema.items) {
        var item = schema.items[key];
        var name = useNames ? key : "";
        var asn1Item = void 0;

        if (typeof item.type === "number") {
          var Asn1TypeName = AsnPropTypes[item.type];
          var Asn1Type = index_es[Asn1TypeName];

          if (!Asn1Type) {
            throw new Error("Cannot get ASN1 class by name '".concat(Asn1TypeName, "'"));
          }

          asn1Item = new Asn1Type({
            name: name
          });
        } else if (isConvertible(item.type)) {
          var instance = new item.type();
          asn1Item = instance.toSchema(name);
        } else if (item.optional) {
          var itemSchema = this.get(item.type);

          if (itemSchema.type === AsnTypeTypes.Choice) {
            asn1Item = new index_es.Any({
              name: name
            });
          } else {
            asn1Item = this.create(item.type, false);
            asn1Item.name = name;
          }
        } else {
          asn1Item = new index_es.Any({
            name: name
          });
        }

        var optional = !!item.optional || item.defaultValue !== undefined;

        if (item.repeated) {
          asn1Item.name = "";
          var Container = item.repeated === "set" ? index_es.Set : index_es.Sequence;
          asn1Item = new Container({
            name: "",
            value: [new index_es.Repeated({
              name: name,
              value: asn1Item
            })]
          });
        }

        if (item.context !== null && item.context !== undefined) {
          if (item.implicit) {
            if (typeof item.type === "number" || isConvertible(item.type)) {
              var _Container = item.repeated ? index_es.Constructed : index_es.Primitive;

              asn1Value.push(new _Container({
                name: name,
                optional: optional,
                idBlock: {
                  tagClass: 3,
                  tagNumber: item.context
                }
              }));
            } else {
              this.cache(item.type);
              var isRepeated = !!item.repeated;
              var value = !isRepeated ? this.get(item.type, true).schema : asn1Item;
              value = "valueBlock" in value ? value.valueBlock.value : value.value;
              asn1Value.push(new index_es.Constructed({
                name: !isRepeated ? name : "",
                optional: optional,
                idBlock: {
                  tagClass: 3,
                  tagNumber: item.context
                },
                value: value
              }));
            }
          } else {
            asn1Value.push(new index_es.Constructed({
              optional: optional,
              idBlock: {
                tagClass: 3,
                tagNumber: item.context
              },
              value: [asn1Item]
            }));
          }
        } else {
          asn1Item.optional = optional;
          asn1Value.push(asn1Item);
        }
      }

      switch (schema.type) {
        case AsnTypeTypes.Sequence:
          return new index_es.Sequence({
            value: asn1Value,
            name: ""
          });

        case AsnTypeTypes.Set:
          return new index_es.Set({
            value: asn1Value,
            name: ""
          });

        case AsnTypeTypes.Choice:
          return new index_es.Choice({
            value: asn1Value,
            name: ""
          });

        default:
          throw new Error("Unsupported ASN1 type in use");
      }
    }
  }, {
    key: "set",
    value: function set(target, schema) {
      this.items.set(target, schema);
      return this;
    }
  }, {
    key: "findParentSchema",
    value: function findParentSchema(target) {
      var parent = Object.getPrototypeOf(target);

      if (parent) {
        var schema = this.items.get(parent);
        return schema || this.findParentSchema(parent);
      }

      return null;
    }
  }]);

  return AsnSchemaStorage;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/storage.js

var schemaStorage = new AsnSchemaStorage();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/decorators.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




var AsnType = function AsnType(options) {
  return function (target) {
    var schema;

    if (!schemaStorage.has(target)) {
      schema = schemaStorage.createDefault(target);
      schemaStorage.set(target, schema);
    } else {
      schema = schemaStorage.get(target);
    }

    Object.assign(schema, options);
  };
};
var AsnChoiceType = function AsnChoiceType() {
  return AsnType({
    type: AsnTypeTypes.Choice
  });
};
var AsnSetType = function AsnSetType(options) {
  return AsnType(_objectSpread({
    type: AsnTypeTypes.Set
  }, options));
};
var AsnSequenceType = function AsnSequenceType(options) {
  return AsnType(_objectSpread({
    type: AsnTypeTypes.Sequence
  }, options));
};
var AsnProp = function AsnProp(options) {
  return function (target, propertyKey) {
    var schema;

    if (!schemaStorage.has(target.constructor)) {
      schema = schemaStorage.createDefault(target.constructor);
      schemaStorage.set(target.constructor, schema);
    } else {
      schema = schemaStorage.get(target.constructor);
    }

    var copyOptions = Object.assign({}, options);

    if (typeof copyOptions.type === "number" && !copyOptions.converter) {
      var defaultConverter = converters_defaultConverter(options.type);

      if (!defaultConverter) {
        throw new Error("Cannot get default converter for property '".concat(propertyKey, "' of ").concat(target.constructor.name));
      }

      copyOptions.converter = defaultConverter;
    }

    schema.items[propertyKey] = copyOptions;
  };
};
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js
function schema_validation_typeof(obj) { "@babel/helpers - typeof"; return schema_validation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, schema_validation_typeof(obj); }

function schema_validation_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function schema_validation_createClass(Constructor, protoProps, staticProps) { if (protoProps) schema_validation_defineProperties(Constructor.prototype, protoProps); if (staticProps) schema_validation_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function schema_validation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (schema_validation_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AsnSchemaValidationError = /*#__PURE__*/function (_Error) {
  _inherits(AsnSchemaValidationError, _Error);

  var _super = _createSuper(AsnSchemaValidationError);

  function AsnSchemaValidationError() {
    var _this;

    schema_validation_classCallCheck(this, AsnSchemaValidationError);

    _this = _super.apply(this, arguments);
    _this.schemas = [];
    return _this;
  }

  return schema_validation_createClass(AsnSchemaValidationError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js

;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/parser.js
function parser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function parser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function parser_createClass(Constructor, protoProps, staticProps) { if (protoProps) parser_defineProperties(Constructor.prototype, protoProps); if (staticProps) parser_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }







var AsnParser = /*#__PURE__*/function () {
  function AsnParser() {
    parser_classCallCheck(this, AsnParser);
  }

  parser_createClass(AsnParser, null, [{
    key: "parse",
    value: function parse(data, target) {
      var asn1Parsed = index_es.fromBER(data);

      if (asn1Parsed.result.error) {
        throw new Error(asn1Parsed.result.error);
      }

      var res = this.fromASN(asn1Parsed.result, target);
      return res;
    }
  }, {
    key: "fromASN",
    value: function fromASN(asn1Schema, target) {
      var _this = this;

      var _a;

      try {
        if (isConvertible(target)) {
          var value = new target();
          return value.fromASN(asn1Schema);
        }

        var schema = schemaStorage.get(target);
        schemaStorage.cache(target);
        var targetSchema = schema.schema;

        if (asn1Schema.constructor === index_es.Constructed && schema.type !== AsnTypeTypes.Choice) {
          targetSchema = new index_es.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: asn1Schema.idBlock.tagNumber
            },
            value: schema.schema.valueBlock.value
          });

          for (var key in schema.items) {
            delete asn1Schema[key];
          }
        }

        var asn1ComparedSchema = index_es.compareSchema({}, asn1Schema, targetSchema);

        if (!asn1ComparedSchema.verified) {
          throw new AsnSchemaValidationError("Data does not match to ".concat(target.name, " ASN1 schema. ").concat(asn1ComparedSchema.result.error));
        }

        var res = new target();

        if (isTypeOfArray(target)) {
          if (!("value" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {
            throw new Error("Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.");
          }

          var itemType = schema.itemType;

          if (typeof itemType === "number") {
            var converter = converters_defaultConverter(itemType);

            if (!converter) {
              throw new Error("Cannot get default converter for array item of ".concat(target.name, " ASN1 schema"));
            }

            return target.from(asn1Schema.valueBlock.value, function (element) {
              return converter.fromASN(element);
            });
          } else {
            return target.from(asn1Schema.valueBlock.value, function (element) {
              return _this.fromASN(element, itemType);
            });
          }
        }

        var _loop = function _loop(_key) {
          var asn1SchemaValue = asn1ComparedSchema.result[_key];

          if (!asn1SchemaValue) {
            return "continue";
          }

          var schemaItem = schema.items[_key];
          var schemaItemType = schemaItem.type;

          if (typeof schemaItemType === "number" || isConvertible(schemaItemType)) {
            var _converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : isConvertible(schemaItemType) ? new schemaItemType() : null;

            if (!_converter) {
              throw new Error("Converter is empty");
            }

            if (schemaItem.repeated) {
              if (schemaItem.implicit) {
                var Container = schemaItem.repeated === "sequence" ? index_es.Sequence : index_es.Set;
                var newItem = new Container();
                newItem.valueBlock = asn1SchemaValue.valueBlock;
                var newItemAsn = index_es.fromBER(newItem.toBER(false));

                if (newItemAsn.offset === -1) {
                  throw new Error("Cannot parse the child item. ".concat(newItemAsn.result.error));
                }

                if (!("value" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {
                  throw new Error("Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.");
                }

                var _value = newItemAsn.result.valueBlock.value;
                res[_key] = Array.from(_value, function (element) {
                  return _converter.fromASN(element);
                });
              } else {
                res[_key] = Array.from(asn1SchemaValue, function (element) {
                  return _converter.fromASN(element);
                });
              }
            } else {
              var _value2 = asn1SchemaValue;

              if (schemaItem.implicit) {
                var _newItem;

                if (isConvertible(schemaItemType)) {
                  _newItem = new schemaItemType().toSchema("");
                } else {
                  var Asn1TypeName = AsnPropTypes[schemaItemType];
                  var Asn1Type = index_es[Asn1TypeName];

                  if (!Asn1Type) {
                    throw new Error("Cannot get '".concat(Asn1TypeName, "' class from asn1js module"));
                  }

                  _newItem = new Asn1Type();
                }

                _newItem.valueBlock = _value2.valueBlock;
                _value2 = index_es.fromBER(_newItem.toBER(false)).result;
              }

              res[_key] = _converter.fromASN(_value2);
            }
          } else {
            if (schemaItem.repeated) {
              if (!Array.isArray(asn1SchemaValue)) {
                throw new Error("Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.");
              }

              res[_key] = Array.from(asn1SchemaValue, function (element) {
                return _this.fromASN(element, schemaItemType);
              });
            } else {
              res[_key] = _this.fromASN(asn1SchemaValue, schemaItemType);
            }
          }
        };

        for (var _key in schema.items) {
          var _ret = _loop(_key);

          if (_ret === "continue") continue;
        }

        return res;
      } catch (error) {
        if (error instanceof AsnSchemaValidationError) {
          error.schemas.push(target.name);
        }

        throw error;
      }
    }
  }]);

  return AsnParser;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/serializer.js
function serializer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function serializer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? serializer_ownKeys(Object(source), !0).forEach(function (key) { serializer_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : serializer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function serializer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function serializer_typeof(obj) { "@babel/helpers - typeof"; return serializer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, serializer_typeof(obj); }

function serializer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function serializer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function serializer_createClass(Constructor, protoProps, staticProps) { if (protoProps) serializer_defineProperties(Constructor.prototype, protoProps); if (staticProps) serializer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






var AsnSerializer = /*#__PURE__*/function () {
  function AsnSerializer() {
    serializer_classCallCheck(this, AsnSerializer);
  }

  serializer_createClass(AsnSerializer, null, [{
    key: "serialize",
    value: function serialize(obj) {
      if (obj instanceof index_es.BaseBlock) {
        return obj.toBER(false);
      }

      return this.toASN(obj).toBER(false);
    }
  }, {
    key: "toASN",
    value: function toASN(obj) {
      var _this = this;

      if (obj && serializer_typeof(obj) === "object" && isConvertible(obj)) {
        return obj.toASN();
      }

      if (!(obj && serializer_typeof(obj) === "object")) {
        throw new TypeError("Parameter 1 should be type of Object.");
      }

      var target = obj.constructor;
      var schema = schemaStorage.get(target);
      schemaStorage.cache(target);
      var asn1Value = [];

      if (schema.itemType) {
        if (!Array.isArray(obj)) {
          throw new TypeError("Parameter 1 should be type of Array.");
        }

        if (typeof schema.itemType === "number") {
          var converter = converters_defaultConverter(schema.itemType);

          if (!converter) {
            throw new Error("Cannot get default converter for array item of ".concat(target.name, " ASN1 schema"));
          }

          asn1Value = obj.map(function (o) {
            return converter.toASN(o);
          });
        } else {
          asn1Value = obj.map(function (o) {
            return _this.toAsnItem({
              type: schema.itemType
            }, "[]", target, o);
          });
        }
      } else {
        for (var key in schema.items) {
          var schemaItem = schema.items[key];
          var objProp = obj[key];

          if (objProp === undefined || schemaItem.defaultValue === objProp || serializer_typeof(schemaItem.defaultValue) === "object" && serializer_typeof(objProp) === "object" && isArrayEqual(this.serialize(schemaItem.defaultValue), this.serialize(objProp))) {
            continue;
          }

          var asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);

          if (typeof schemaItem.context === "number") {
            if (schemaItem.implicit) {
              if (!schemaItem.repeated && (typeof schemaItem.type === "number" || isConvertible(schemaItem.type))) {
                var value = {};
                value.valueHex = asn1Item instanceof index_es.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();
                asn1Value.push(new index_es.Primitive(serializer_objectSpread({
                  optional: schemaItem.optional,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: schemaItem.context
                  }
                }, value)));
              } else {
                asn1Value.push(new index_es.Constructed({
                  optional: schemaItem.optional,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: schemaItem.context
                  },
                  value: asn1Item.valueBlock.value
                }));
              }
            } else {
              asn1Value.push(new index_es.Constructed({
                optional: schemaItem.optional,
                idBlock: {
                  tagClass: 3,
                  tagNumber: schemaItem.context
                },
                value: [asn1Item]
              }));
            }
          } else if (schemaItem.repeated) {
            asn1Value = asn1Value.concat(asn1Item);
          } else {
            asn1Value.push(asn1Item);
          }
        }
      }

      var asnSchema;

      switch (schema.type) {
        case AsnTypeTypes.Sequence:
          asnSchema = new index_es.Sequence({
            value: asn1Value
          });
          break;

        case AsnTypeTypes.Set:
          asnSchema = new index_es.Set({
            value: asn1Value
          });
          break;

        case AsnTypeTypes.Choice:
          if (!asn1Value[0]) {
            throw new Error("Schema '".concat(target.name, "' has wrong data. Choice cannot be empty."));
          }

          asnSchema = asn1Value[0];
          break;
      }

      return asnSchema;
    }
  }, {
    key: "toAsnItem",
    value: function toAsnItem(schemaItem, key, target, objProp) {
      var _this2 = this;

      var asn1Item;

      if (typeof schemaItem.type === "number") {
        var converter = schemaItem.converter;

        if (!converter) {
          throw new Error("Property '".concat(key, "' doesn't have converter for type ").concat(AsnPropTypes[schemaItem.type], " in schema '").concat(target.name, "'"));
        }

        if (schemaItem.repeated) {
          if (!Array.isArray(objProp)) {
            throw new TypeError("Parameter 'objProp' should be type of Array.");
          }

          var items = Array.from(objProp, function (element) {
            return converter.toASN(element);
          });
          var Container = schemaItem.repeated === "sequence" ? index_es.Sequence : index_es.Set;
          asn1Item = new Container({
            value: items
          });
        } else {
          asn1Item = converter.toASN(objProp);
        }
      } else {
        if (schemaItem.repeated) {
          if (!Array.isArray(objProp)) {
            throw new TypeError("Parameter 'objProp' should be type of Array.");
          }

          var _items = Array.from(objProp, function (element) {
            return _this2.toASN(element);
          });

          var _Container = schemaItem.repeated === "sequence" ? index_es.Sequence : index_es.Set;

          asn1Item = new _Container({
            value: _items
          });
        } else {
          asn1Item = this.toASN(objProp);
        }
      }

      return asn1Item;
    }
  }]);

  return AsnSerializer;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/objects.js
function objects_typeof(obj) { "@babel/helpers - typeof"; return objects_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, objects_typeof(obj); }

function objects_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = objects_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function objects_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return objects_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return objects_arrayLikeToArray(o, minLen); }

function objects_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function objects_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function objects_createClass(Constructor, protoProps, staticProps) { if (protoProps) objects_defineProperties(Constructor.prototype, protoProps); if (staticProps) objects_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function objects_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function objects_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) objects_setPrototypeOf(subClass, superClass); }

function objects_createSuper(Derived) { var hasNativeReflectConstruct = objects_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = objects_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = objects_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return objects_possibleConstructorReturn(this, result); }; }

function objects_possibleConstructorReturn(self, call) { if (call && (objects_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return objects_assertThisInitialized(self); }

function objects_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function objects_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; objects_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !objects_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return objects_construct(Class, arguments, objects_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return objects_setPrototypeOf(Wrapper, Class); }; return objects_wrapNativeSuper(Class); }

function objects_construct(Parent, args, Class) { if (objects_isNativeReflectConstruct()) { objects_construct = Reflect.construct.bind(); } else { objects_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) objects_setPrototypeOf(instance, Class.prototype); return instance; }; } return objects_construct.apply(null, arguments); }

function objects_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function objects_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function objects_setPrototypeOf(o, p) { objects_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return objects_setPrototypeOf(o, p); }

function objects_getPrototypeOf(o) { objects_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return objects_getPrototypeOf(o); }

var AsnArray = /*#__PURE__*/function (_Array) {
  objects_inherits(AsnArray, _Array);

  var _super = objects_createSuper(AsnArray);

  function AsnArray() {
    var _this;

    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    objects_classCallCheck(this, AsnArray);

    if (typeof items === "number") {
      _this = _super.call(this, items);
    } else {
      _this = _super.call(this);

      var _iterator = objects_createForOfIteratorHelper(items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;

          _this.push(item);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return objects_possibleConstructorReturn(_this);
  }

  return objects_createClass(AsnArray);
}( /*#__PURE__*/objects_wrapNativeSuper(Array));
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/convert.js
function convert_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function convert_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function convert_createClass(Constructor, protoProps, staticProps) { if (protoProps) convert_defineProperties(Constructor.prototype, protoProps); if (staticProps) convert_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





var AsnConvert = /*#__PURE__*/function () {
  function AsnConvert() {
    convert_classCallCheck(this, AsnConvert);
  }

  convert_createClass(AsnConvert, null, [{
    key: "serialize",
    value: function serialize(obj) {
      return AsnSerializer.serialize(obj);
    }
  }, {
    key: "parse",
    value: function parse(data, target) {
      return AsnParser.parse(data, target);
    }
  }, {
    key: "toString",
    value: function toString(data) {
      var buf = build.BufferSourceConverter.isBufferSource(data) ? build.BufferSourceConverter.toArrayBuffer(data) : AsnConvert.serialize(data);
      var asn = index_es.fromBER(buf);

      if (asn.offset === -1) {
        throw new Error("Cannot decode ASN.1 data. ".concat(asn.result.error));
      }

      return asn.result.toString();
    }
  }]);

  return AsnConvert;
}();
;// CONCATENATED MODULE: ../library/node_modules/@peculiar/asn1-schema/build/es2015/index.js










/***/ }),

/***/ 4458:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JsonError": function() { return /* binding */ JsonError; },
/* harmony export */   "JsonParser": function() { return /* binding */ JsonParser; },
/* harmony export */   "JsonProp": function() { return /* binding */ JsonProp; },
/* harmony export */   "JsonPropTypes": function() { return /* binding */ JsonPropTypes; },
/* harmony export */   "JsonSerializer": function() { return /* binding */ JsonSerializer; },
/* harmony export */   "KeyError": function() { return /* binding */ KeyError; },
/* harmony export */   "ParserError": function() { return /* binding */ ParserError; },
/* harmony export */   "SerializerError": function() { return /* binding */ SerializerError; },
/* harmony export */   "TransformError": function() { return /* binding */ TransformError; },
/* harmony export */   "ValidationError": function() { return /* binding */ ValidationError; }
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Copyright (c) 2020, Peculiar Ventures, All rights reserved.
 */
var JsonError = /*#__PURE__*/function (_Error) {
  _inherits(JsonError, _Error);

  var _super = _createSuper(JsonError);

  function JsonError(message, innerError) {
    var _this;

    _classCallCheck(this, JsonError);

    _this = _super.call(this, innerError ? "".concat(message, ". See the inner exception for more details.") : message);
    _this.message = message;
    _this.innerError = innerError;
    return _this;
  }

  return _createClass(JsonError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var TransformError = /*#__PURE__*/function (_JsonError) {
  _inherits(TransformError, _JsonError);

  var _super2 = _createSuper(TransformError);

  function TransformError(schema, message, innerError) {
    var _this2;

    _classCallCheck(this, TransformError);

    _this2 = _super2.call(this, message, innerError);
    _this2.schema = schema;
    return _this2;
  }

  return _createClass(TransformError);
}(JsonError);

var ParserError = /*#__PURE__*/function (_TransformError) {
  _inherits(ParserError, _TransformError);

  var _super3 = _createSuper(ParserError);

  function ParserError(schema, message, innerError) {
    _classCallCheck(this, ParserError);

    return _super3.call(this, schema, "JSON doesn't match to '".concat(schema.target.name, "' schema. ").concat(message), innerError);
  }

  return _createClass(ParserError);
}(TransformError);

var ValidationError = /*#__PURE__*/function (_JsonError2) {
  _inherits(ValidationError, _JsonError2);

  var _super4 = _createSuper(ValidationError);

  function ValidationError() {
    _classCallCheck(this, ValidationError);

    return _super4.apply(this, arguments);
  }

  return _createClass(ValidationError);
}(JsonError);

var SerializerError = /*#__PURE__*/function (_JsonError3) {
  _inherits(SerializerError, _JsonError3);

  var _super5 = _createSuper(SerializerError);

  function SerializerError(schemaName, message, innerError) {
    var _this3;

    _classCallCheck(this, SerializerError);

    _this3 = _super5.call(this, "Cannot serialize by '".concat(schemaName, "' schema. ").concat(message), innerError);
    _this3.schemaName = schemaName;
    return _this3;
  }

  return _createClass(SerializerError);
}(JsonError);

var KeyError = /*#__PURE__*/function (_ParserError) {
  _inherits(KeyError, _ParserError);

  var _super6 = _createSuper(KeyError);

  function KeyError(schema, keys) {
    var _this4;

    var errors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, KeyError);

    _this4 = _super6.call(this, schema, "Some keys doesn't match to schema");
    _this4.keys = keys;
    _this4.errors = errors;
    return _this4;
  }

  return _createClass(KeyError);
}(ParserError);

var JsonPropTypes;

(function (JsonPropTypes) {
  JsonPropTypes[JsonPropTypes["Any"] = 0] = "Any";
  JsonPropTypes[JsonPropTypes["Boolean"] = 1] = "Boolean";
  JsonPropTypes[JsonPropTypes["Number"] = 2] = "Number";
  JsonPropTypes[JsonPropTypes["String"] = 3] = "String";
})(JsonPropTypes || (JsonPropTypes = {}));

function checkType(value, type) {
  switch (type) {
    case JsonPropTypes.Boolean:
      return typeof value === "boolean";

    case JsonPropTypes.Number:
      return typeof value === "number";

    case JsonPropTypes.String:
      return typeof value === "string";
  }

  return true;
}

function throwIfTypeIsWrong(value, type) {
  if (!checkType(value, type)) {
    throw new TypeError("Value must be ".concat(JsonPropTypes[type]));
  }
}

function isConvertible(target) {
  if (target && target.prototype) {
    if (target.prototype.toJSON && target.prototype.fromJSON) {
      return true;
    } else {
      return isConvertible(target.prototype);
    }
  } else {
    return !!(target && target.toJSON && target.fromJSON);
  }
}

var JsonSchemaStorage = /*#__PURE__*/function () {
  function JsonSchemaStorage() {
    _classCallCheck(this, JsonSchemaStorage);

    this.items = new Map();
  }

  _createClass(JsonSchemaStorage, [{
    key: "has",
    value: function has(target) {
      return this.items.has(target) || !!this.findParentSchema(target);
    }
  }, {
    key: "get",
    value: function get(target) {
      var schema = this.items.get(target) || this.findParentSchema(target);

      if (!schema) {
        throw new Error("Cannot get schema for current target");
      }

      return schema;
    }
  }, {
    key: "create",
    value: function create(target) {
      var schema = {
        names: {}
      };
      var parentSchema = this.findParentSchema(target);

      if (parentSchema) {
        Object.assign(schema, parentSchema);
        schema.names = {};

        for (var name in parentSchema.names) {
          schema.names[name] = Object.assign({}, parentSchema.names[name]);
        }
      }

      schema.target = target;
      return schema;
    }
  }, {
    key: "set",
    value: function set(target, schema) {
      this.items.set(target, schema);
      return this;
    }
  }, {
    key: "findParentSchema",
    value: function findParentSchema(target) {
      var parent = target.__proto__;

      if (parent) {
        var schema = this.items.get(parent);
        return schema || this.findParentSchema(parent);
      }

      return null;
    }
  }]);

  return JsonSchemaStorage;
}();

var DEFAULT_SCHEMA = "default";
var schemaStorage = new JsonSchemaStorage();

var PatternValidation = /*#__PURE__*/function () {
  function PatternValidation(pattern) {
    _classCallCheck(this, PatternValidation);

    this.pattern = new RegExp(pattern);
  }

  _createClass(PatternValidation, [{
    key: "validate",
    value: function validate(value) {
      var pattern = new RegExp(this.pattern.source, this.pattern.flags);

      if (typeof value !== "string") {
        throw new ValidationError("Incoming value must be string");
      }

      if (!pattern.exec(value)) {
        throw new ValidationError("Value doesn't match to pattern '".concat(pattern.toString(), "'"));
      }
    }
  }]);

  return PatternValidation;
}();

var InclusiveValidation = /*#__PURE__*/function () {
  function InclusiveValidation() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MIN_VALUE;
    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    _classCallCheck(this, InclusiveValidation);

    this.min = min;
    this.max = max;
  }

  _createClass(InclusiveValidation, [{
    key: "validate",
    value: function validate(value) {
      throwIfTypeIsWrong(value, JsonPropTypes.Number);

      if (!(this.min <= value && value <= this.max)) {
        var min = this.min === Number.MIN_VALUE ? "MIN" : this.min;
        var max = this.max === Number.MAX_VALUE ? "MAX" : this.max;
        throw new ValidationError("Value doesn't match to diapason [".concat(min, ",").concat(max, "]"));
      }
    }
  }]);

  return InclusiveValidation;
}();

var ExclusiveValidation = /*#__PURE__*/function () {
  function ExclusiveValidation() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MIN_VALUE;
    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    _classCallCheck(this, ExclusiveValidation);

    this.min = min;
    this.max = max;
  }

  _createClass(ExclusiveValidation, [{
    key: "validate",
    value: function validate(value) {
      throwIfTypeIsWrong(value, JsonPropTypes.Number);

      if (!(this.min < value && value < this.max)) {
        var min = this.min === Number.MIN_VALUE ? "MIN" : this.min;
        var max = this.max === Number.MAX_VALUE ? "MAX" : this.max;
        throw new ValidationError("Value doesn't match to diapason (".concat(min, ",").concat(max, ")"));
      }
    }
  }]);

  return ExclusiveValidation;
}();

var LengthValidation = /*#__PURE__*/function () {
  function LengthValidation(length, minLength, maxLength) {
    _classCallCheck(this, LengthValidation);

    this.length = length;
    this.minLength = minLength;
    this.maxLength = maxLength;
  }

  _createClass(LengthValidation, [{
    key: "validate",
    value: function validate(value) {
      if (this.length !== undefined) {
        if (value.length !== this.length) {
          throw new ValidationError("Value length must be exactly ".concat(this.length, "."));
        }

        return;
      }

      if (this.minLength !== undefined) {
        if (value.length < this.minLength) {
          throw new ValidationError("Value length must be more than ".concat(this.minLength, "."));
        }
      }

      if (this.maxLength !== undefined) {
        if (value.length > this.maxLength) {
          throw new ValidationError("Value length must be less than ".concat(this.maxLength, "."));
        }
      }
    }
  }]);

  return LengthValidation;
}();

var EnumerationValidation = /*#__PURE__*/function () {
  function EnumerationValidation(enumeration) {
    _classCallCheck(this, EnumerationValidation);

    this.enumeration = enumeration;
  }

  _createClass(EnumerationValidation, [{
    key: "validate",
    value: function validate(value) {
      throwIfTypeIsWrong(value, JsonPropTypes.String);

      if (!this.enumeration.includes(value)) {
        throw new ValidationError("Value must be one of ".concat(this.enumeration.map(function (v) {
          return "'".concat(v, "'");
        }).join(", ")));
      }
    }
  }]);

  return EnumerationValidation;
}();

var JsonTransform = /*#__PURE__*/function () {
  function JsonTransform() {
    _classCallCheck(this, JsonTransform);
  }

  _createClass(JsonTransform, null, [{
    key: "checkValues",
    value: function checkValues(data, schemaItem) {
      var values = Array.isArray(data) ? data : [data];

      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          var _iterator2 = _createForOfIteratorHelper(schemaItem.validations),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var validation = _step2.value;

              if (validation instanceof LengthValidation && schemaItem.repeated) {
                validation.validate(data);
              } else {
                validation.validate(value);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "checkTypes",
    value: function checkTypes(value, schemaItem) {
      if (schemaItem.repeated && !Array.isArray(value)) {
        throw new TypeError("Value must be Array");
      }

      if (typeof schemaItem.type === "number") {
        var values = Array.isArray(value) ? value : [value];

        var _iterator3 = _createForOfIteratorHelper(values),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var v = _step3.value;
            throwIfTypeIsWrong(v, schemaItem.type);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "getSchemaByName",
    value: function getSchemaByName(schema) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SCHEMA;
      return _objectSpread(_objectSpread({}, schema.names[DEFAULT_SCHEMA]), schema.names[name]);
    }
  }]);

  return JsonTransform;
}();

var JsonSerializer = /*#__PURE__*/function (_JsonTransform) {
  _inherits(JsonSerializer, _JsonTransform);

  var _super7 = _createSuper(JsonSerializer);

  function JsonSerializer() {
    _classCallCheck(this, JsonSerializer);

    return _super7.apply(this, arguments);
  }

  _createClass(JsonSerializer, null, [{
    key: "serialize",
    value: function serialize(obj, options, replacer, space) {
      var json = this.toJSON(obj, options);
      return JSON.stringify(json, replacer, space);
    }
  }, {
    key: "toJSON",
    value: function toJSON(obj) {
      var _this5 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var res;
      var targetSchema = options.targetSchema;
      var schemaName = options.schemaName || DEFAULT_SCHEMA;

      if (isConvertible(obj)) {
        return obj.toJSON();
      }

      if (Array.isArray(obj)) {
        res = [];

        var _iterator4 = _createForOfIteratorHelper(obj),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var item = _step4.value;
            res.push(this.toJSON(item, options));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (_typeof(obj) === "object") {
        if (targetSchema && !schemaStorage.has(targetSchema)) {
          throw new JsonError("Cannot get schema for `targetSchema` param");
        }

        targetSchema = targetSchema || obj.constructor;

        if (schemaStorage.has(targetSchema)) {
          var schema = schemaStorage.get(targetSchema);
          res = {};
          var namedSchema = this.getSchemaByName(schema, schemaName);

          for (var key in namedSchema) {
            try {
              var _ret = function () {
                var item = namedSchema[key];
                var objItem = obj[key];
                var value = void 0;

                if (item.optional && objItem === undefined || item.defaultValue !== undefined && objItem === item.defaultValue) {
                  return "continue";
                }

                if (!item.optional && objItem === undefined) {
                  throw new SerializerError(targetSchema.name, "Property '".concat(key, "' is required."));
                }

                if (typeof item.type === "number") {
                  if (item.converter) {
                    if (item.repeated) {
                      value = objItem.map(function (el) {
                        return item.converter.toJSON(el, obj);
                      });
                    } else {
                      value = item.converter.toJSON(objItem, obj);
                    }
                  } else {
                    value = objItem;
                  }
                } else {
                  if (item.repeated) {
                    value = objItem.map(function (el) {
                      return _this5.toJSON(el, {
                        schemaName: schemaName
                      });
                    });
                  } else {
                    value = _this5.toJSON(objItem, {
                      schemaName: schemaName
                    });
                  }
                }

                _this5.checkTypes(value, item);

                _this5.checkValues(value, item);

                res[item.name || key] = value;
              }();

              if (_ret === "continue") continue;
            } catch (e) {
              if (e instanceof SerializerError) {
                throw e;
              } else {
                throw new SerializerError(schema.target.name, "Property '".concat(key, "' is wrong. ").concat(e.message), e);
              }
            }
          }
        } else {
          res = {};

          for (var _key in obj) {
            res[_key] = this.toJSON(obj[_key], {
              schemaName: schemaName
            });
          }
        }
      } else {
        res = obj;
      }

      return res;
    }
  }]);

  return JsonSerializer;
}(JsonTransform);

var JsonParser = /*#__PURE__*/function (_JsonTransform2) {
  _inherits(JsonParser, _JsonTransform2);

  var _super8 = _createSuper(JsonParser);

  function JsonParser() {
    _classCallCheck(this, JsonParser);

    return _super8.apply(this, arguments);
  }

  _createClass(JsonParser, null, [{
    key: "parse",
    value: function parse(data, options) {
      var obj = JSON.parse(data);
      return this.fromJSON(obj, options);
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(target, options) {
      var _this6 = this;

      var targetSchema = options.targetSchema;
      var schemaName = options.schemaName || DEFAULT_SCHEMA;
      var obj = new targetSchema();

      if (isConvertible(obj)) {
        return obj.fromJSON(target);
      }

      var schema = schemaStorage.get(targetSchema);
      var namedSchema = this.getSchemaByName(schema, schemaName);
      var keyErrors = {};

      if (options.strictProperty && !Array.isArray(target)) {
        JsonParser.checkStrictProperty(target, namedSchema, schema);
      }

      for (var key in namedSchema) {
        try {
          var _ret2 = function () {
            var item = namedSchema[key];
            var name = item.name || key;
            var value = target[name];

            if (value === undefined && (item.optional || item.defaultValue !== undefined)) {
              return "continue";
            }

            if (!item.optional && value === undefined) {
              throw new ParserError(schema, "Property '".concat(name, "' is required."));
            }

            _this6.checkTypes(value, item);

            _this6.checkValues(value, item);

            if (typeof item.type === "number") {
              if (item.converter) {
                if (item.repeated) {
                  obj[key] = value.map(function (el) {
                    return item.converter.fromJSON(el, obj);
                  });
                } else {
                  obj[key] = item.converter.fromJSON(value, obj);
                }
              } else {
                obj[key] = value;
              }
            } else {
              var newOptions = _objectSpread(_objectSpread({}, options), {}, {
                targetSchema: item.type,
                schemaName: schemaName
              });

              if (item.repeated) {
                obj[key] = value.map(function (el) {
                  return _this6.fromJSON(el, newOptions);
                });
              } else {
                obj[key] = _this6.fromJSON(value, newOptions);
              }
            }
          }();

          if (_ret2 === "continue") continue;
        } catch (e) {
          if (!(e instanceof ParserError)) {
            e = new ParserError(schema, "Property '".concat(key, "' is wrong. ").concat(e.message), e);
          }

          if (options.strictAllKeys) {
            keyErrors[key] = e;
          } else {
            throw e;
          }
        }
      }

      var keys = Object.keys(keyErrors);

      if (keys.length) {
        throw new KeyError(schema, keys, keyErrors);
      }

      return obj;
    }
  }, {
    key: "checkStrictProperty",
    value: function checkStrictProperty(target, namedSchema, schema) {
      var jsonProps = Object.keys(target);
      var schemaProps = Object.keys(namedSchema);
      var keys = [];

      for (var _i = 0, _jsonProps = jsonProps; _i < _jsonProps.length; _i++) {
        var key = _jsonProps[_i];

        if (schemaProps.indexOf(key) === -1) {
          keys.push(key);
        }
      }

      if (keys.length) {
        throw new KeyError(schema, keys);
      }
    }
  }]);

  return JsonParser;
}(JsonTransform);

function getValidations(item) {
  var validations = [];

  if (item.pattern) {
    validations.push(new PatternValidation(item.pattern));
  }

  if (item.type === JsonPropTypes.Number || item.type === JsonPropTypes.Any) {
    if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {
      validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));
    }

    if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {
      validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));
    }

    if (item.enumeration !== undefined) {
      validations.push(new EnumerationValidation(item.enumeration));
    }
  }

  if (item.type === JsonPropTypes.String || item.repeated || item.type === JsonPropTypes.Any) {
    if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {
      validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));
    }
  }

  return validations;
}

var JsonProp = function JsonProp() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, propertyKey) {
    var errorMessage = "Cannot set type for ".concat(propertyKey, " property of ").concat(target.constructor.name, " schema");
    var schema;

    if (!schemaStorage.has(target.constructor)) {
      schema = schemaStorage.create(target.constructor);
      schemaStorage.set(target.constructor, schema);
    } else {
      schema = schemaStorage.get(target.constructor);

      if (schema.target !== target.constructor) {
        schema = schemaStorage.create(target.constructor);
        schemaStorage.set(target.constructor, schema);
      }
    }

    var defaultSchema = {
      type: JsonPropTypes.Any,
      validations: []
    };
    var copyOptions = Object.assign(defaultSchema, options);
    copyOptions.validations = getValidations(copyOptions);

    if (typeof copyOptions.type !== "number") {
      if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {
        throw new Error("".concat(errorMessage, ". Assigning type doesn't have schema."));
      }
    }

    var schemaNames;

    if (Array.isArray(options.schema)) {
      schemaNames = options.schema;
    } else {
      schemaNames = [options.schema || DEFAULT_SCHEMA];
    }

    var _iterator5 = _createForOfIteratorHelper(schemaNames),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var schemaName = _step5.value;

        if (!schema.names[schemaName]) {
          schema.names[schemaName] = {};
        }

        var namedSchema = schema.names[schemaName];
        namedSchema[propertyKey] = copyOptions;
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  };
};



/***/ }),

/***/ 7275:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
 // Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Package binary provides functions for encoding and decoding numbers in byte arrays.
 */

var int_1 = __webpack_require__(5587); // TODO(dchest): add asserts for correct value ranges and array offsets.

/**
 * Reads 2 bytes from array starting at offset as big-endian
 * signed 16-bit integer and returns it.
 */


function readInt16BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;
}

exports.readInt16BE = readInt16BE;
/**
 * Reads 2 bytes from array starting at offset as big-endian
 * unsigned 16-bit integer and returns it.
 */

function readUint16BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;
}

exports.readUint16BE = readUint16BE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * signed 16-bit integer and returns it.
 */

function readInt16LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;
}

exports.readInt16LE = readInt16LE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * unsigned 16-bit integer and returns it.
 */

function readUint16LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset + 1] << 8 | array[offset]) >>> 0;
}

exports.readUint16LE = readUint16LE;
/**
 * Writes 2-byte big-endian representation of 16-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */

function writeUint16BE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(2);
  }

  if (offset === void 0) {
    offset = 0;
  }

  out[offset + 0] = value >>> 8;
  out[offset + 1] = value >>> 0;
  return out;
}

exports.writeUint16BE = writeUint16BE;
exports.writeInt16BE = writeUint16BE;
/**
 * Writes 2-byte little-endian representation of 16-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */

function writeUint16LE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(2);
  }

  if (offset === void 0) {
    offset = 0;
  }

  out[offset + 0] = value >>> 0;
  out[offset + 1] = value >>> 8;
  return out;
}

exports.writeUint16LE = writeUint16LE;
exports.writeInt16LE = writeUint16LE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * signed 32-bit integer and returns it.
 */

function readInt32BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];
}

exports.readInt32BE = readInt32BE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * unsigned 32-bit integer and returns it.
 */

function readUint32BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;
}

exports.readUint32BE = readUint32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * signed 32-bit integer and returns it.
 */

function readInt32LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];
}

exports.readInt32LE = readInt32LE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * unsigned 32-bit integer and returns it.
 */

function readUint32LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;
}

exports.readUint32LE = readUint32LE;
/**
 * Writes 4-byte big-endian representation of 32-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */

function writeUint32BE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(4);
  }

  if (offset === void 0) {
    offset = 0;
  }

  out[offset + 0] = value >>> 24;
  out[offset + 1] = value >>> 16;
  out[offset + 2] = value >>> 8;
  out[offset + 3] = value >>> 0;
  return out;
}

exports.writeUint32BE = writeUint32BE;
exports.writeInt32BE = writeUint32BE;
/**
 * Writes 4-byte little-endian representation of 32-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */

function writeUint32LE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(4);
  }

  if (offset === void 0) {
    offset = 0;
  }

  out[offset + 0] = value >>> 0;
  out[offset + 1] = value >>> 8;
  out[offset + 2] = value >>> 16;
  out[offset + 3] = value >>> 24;
  return out;
}

exports.writeUint32LE = writeUint32LE;
exports.writeInt32LE = writeUint32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */

function readInt64BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var hi = readInt32BE(array, offset);
  var lo = readInt32BE(array, offset + 4);
  return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}

exports.readInt64BE = readInt64BE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */

function readUint64BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var hi = readUint32BE(array, offset);
  var lo = readUint32BE(array, offset + 4);
  return hi * 0x100000000 + lo;
}

exports.readUint64BE = readUint64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */

function readInt64LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var lo = readInt32LE(array, offset);
  var hi = readInt32LE(array, offset + 4);
  return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}

exports.readInt64LE = readInt64LE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */

function readUint64LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var lo = readUint32LE(array, offset);
  var hi = readUint32LE(array, offset + 4);
  return hi * 0x100000000 + lo;
}

exports.readUint64LE = readUint64LE;
/**
 * Writes 8-byte big-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */

function writeUint64BE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(8);
  }

  if (offset === void 0) {
    offset = 0;
  }

  writeUint32BE(value / 0x100000000 >>> 0, out, offset);
  writeUint32BE(value >>> 0, out, offset + 4);
  return out;
}

exports.writeUint64BE = writeUint64BE;
exports.writeInt64BE = writeUint64BE;
/**
 * Writes 8-byte little-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */

function writeUint64LE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(8);
  }

  if (offset === void 0) {
    offset = 0;
  }

  writeUint32LE(value >>> 0, out, offset);
  writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
  return out;
}

exports.writeUint64LE = writeUint64LE;
exports.writeInt64LE = writeUint64LE;
/**
 * Reads bytes from array starting at offset as big-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */

function readUintBE(bitLength, array, offset) {
  if (offset === void 0) {
    offset = 0;
  } // TODO(dchest): implement support for bitLengths non-divisible by 8


  if (bitLength % 8 !== 0) {
    throw new Error("readUintBE supports only bitLengths divisible by 8");
  }

  if (bitLength / 8 > array.length - offset) {
    throw new Error("readUintBE: array is too short for the given bitLength");
  }

  var result = 0;
  var mul = 1;

  for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
    result += array[i] * mul;
    mul *= 256;
  }

  return result;
}

exports.readUintBE = readUintBE;
/**
 * Reads bytes from array starting at offset as little-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */

function readUintLE(bitLength, array, offset) {
  if (offset === void 0) {
    offset = 0;
  } // TODO(dchest): implement support for bitLengths non-divisible by 8


  if (bitLength % 8 !== 0) {
    throw new Error("readUintLE supports only bitLengths divisible by 8");
  }

  if (bitLength / 8 > array.length - offset) {
    throw new Error("readUintLE: array is too short for the given bitLength");
  }

  var result = 0;
  var mul = 1;

  for (var i = offset; i < offset + bitLength / 8; i++) {
    result += array[i] * mul;
    mul *= 256;
  }

  return result;
}

exports.readUintLE = readUintLE;
/**
 * Writes a big-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */

function writeUintBE(bitLength, value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(bitLength / 8);
  }

  if (offset === void 0) {
    offset = 0;
  } // TODO(dchest): implement support for bitLengths non-divisible by 8


  if (bitLength % 8 !== 0) {
    throw new Error("writeUintBE supports only bitLengths divisible by 8");
  }

  if (!int_1.isSafeInteger(value)) {
    throw new Error("writeUintBE value must be an integer");
  }

  var div = 1;

  for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
    out[i] = value / div & 0xff;
    div *= 256;
  }

  return out;
}

exports.writeUintBE = writeUintBE;
/**
 * Writes a little-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */

function writeUintLE(bitLength, value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(bitLength / 8);
  }

  if (offset === void 0) {
    offset = 0;
  } // TODO(dchest): implement support for bitLengths non-divisible by 8


  if (bitLength % 8 !== 0) {
    throw new Error("writeUintLE supports only bitLengths divisible by 8");
  }

  if (!int_1.isSafeInteger(value)) {
    throw new Error("writeUintLE value must be an integer");
  }

  var div = 1;

  for (var i = offset; i < offset + bitLength / 8; i++) {
    out[i] = value / div & 0xff;
    div *= 256;
  }

  return out;
}

exports.writeUintLE = writeUintLE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * 32-bit floating-point number and returns it.
 */

function readFloat32BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
  return view.getFloat32(offset);
}

exports.readFloat32BE = readFloat32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * 32-bit floating-point number and returns it.
 */

function readFloat32LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
  return view.getFloat32(offset, true);
}

exports.readFloat32LE = readFloat32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * 64-bit floating-point number ("double") and returns it.
 */

function readFloat64BE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
  return view.getFloat64(offset);
}

exports.readFloat64BE = readFloat64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * 64-bit floating-point number ("double") and returns it.
 */

function readFloat64LE(array, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
  return view.getFloat64(offset, true);
}

exports.readFloat64LE = readFloat64LE;
/**
 * Writes 4-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */

function writeFloat32BE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(4);
  }

  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
  view.setFloat32(offset, value);
  return out;
}

exports.writeFloat32BE = writeFloat32BE;
/**
 * Writes 4-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */

function writeFloat32LE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(4);
  }

  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
  view.setFloat32(offset, value, true);
  return out;
}

exports.writeFloat32LE = writeFloat32LE;
/**
 * Writes 8-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */

function writeFloat64BE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(8);
  }

  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
  view.setFloat64(offset, value);
  return out;
}

exports.writeFloat64BE = writeFloat64BE;
/**
 * Writes 8-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */

function writeFloat64LE(value, out, offset) {
  if (out === void 0) {
    out = new Uint8Array(8);
  }

  if (offset === void 0) {
    offset = 0;
  }

  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
  view.setFloat64(offset, value, true);
  return out;
}

exports.writeFloat64LE = writeFloat64LE;

/***/ }),

/***/ 5587:
/***/ (function(__unused_webpack_module, exports) {

"use strict";
 // Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Package int provides helper functions for integerss.
 */
// Shim using 16-bit pieces.

function imulShim(a, b) {
  var ah = a >>> 16 & 0xffff,
      al = a & 0xffff;
  var bh = b >>> 16 & 0xffff,
      bl = b & 0xffff;
  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
}
/** 32-bit integer multiplication.  */
// Use system Math.imul if available, otherwise use our shim.


exports.mul = Math.imul || imulShim;
/** 32-bit integer addition.  */

function add(a, b) {
  return a + b | 0;
}

exports.add = add;
/**  32-bit integer subtraction.  */

function sub(a, b) {
  return a - b | 0;
}

exports.sub = sub;
/** 32-bit integer left rotation */

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

exports.rotl = rotl;
/** 32-bit integer left rotation */

function rotr(x, n) {
  return x << 32 - n | x >>> n;
}

exports.rotr = rotr;

function isIntegerShim(n) {
  return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
}
/**
 * Returns true if the argument is an integer number.
 *
 * In ES2015, Number.isInteger.
 */


exports.isInteger = Number.isInteger || isIntegerShim;
/**
 *  Math.pow(2, 53) - 1
 *
 *  In ES2015 Number.MAX_SAFE_INTEGER.
 */

exports.MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Returns true if the argument is a safe integer number
 * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
 *
 * In ES2015, Number.isSafeInteger.
 */

exports.isSafeInteger = function (n) {
  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;
};

/***/ }),

/***/ 2277:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
 // Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var binary_1 = __webpack_require__(7275);

var wipe_1 = __webpack_require__(7849);

var Keccak =
/** @class */
function () {
  function Keccak(capacity) {
    if (capacity === void 0) {
      capacity = 32;
    }

    this.capacity = capacity;
    this._sh = new Int32Array(25); // temporary space for permutation (high bits)

    this._sl = new Int32Array(25); // temporary space for permutation (low bits)

    this._state = new Uint8Array(200); // hash state

    this._pos = 0; // position in state to XOR bytes into

    this._finished = false; // whether the hash was finalized

    this.clean = this.reset;

    if (capacity <= 0 || capacity > 128) {
      throw new Error("SHA3: incorrect capacity");
    }

    this.blockSize = 200 - capacity;
  }

  Keccak.prototype.reset = function () {
    wipe_1.wipe(this._sh);
    wipe_1.wipe(this._sl);
    wipe_1.wipe(this._state);
    this._pos = 0;
    this._finished = false;
    return this;
  };

  Keccak.prototype.update = function (data) {
    if (this._finished) {
      throw new Error("SHA3: can't update because hash was finished");
    } // XOR data into the "rate"-size part of state
    // (the rest is "capacity", which is not touched from outside).


    for (var i = 0; i < data.length; i++) {
      this._state[this._pos++] ^= data[i]; // If the "rate" part is full, process the whole state
      // with Keccak permutation and reset position.

      if (this._pos >= this.blockSize) {
        keccakf(this._sh, this._sl, this._state);
        this._pos = 0;
      }
    }

    return this;
  };

  Keccak.prototype._padAndPermute = function (paddingByte) {
    // Apply padding.
    this._state[this._pos] ^= paddingByte;
    this._state[this.blockSize - 1] ^= 0x80; // Permute state.

    keccakf(this._sh, this._sl, this._state); // Set finished flag to true.

    this._finished = true;
    this._pos = 0;
  };

  Keccak.prototype._squeeze = function (dst) {
    if (!this._finished) {
      throw new Error("SHA3: squeezing before padAndPermute");
    } // Squeeze.


    for (var i = 0; i < dst.length; i++) {
      if (this._pos === this.blockSize) {
        // Permute.
        keccakf(this._sh, this._sl, this._state);
        this._pos = 0;
      }

      dst[i] = this._state[this._pos++];
    }
  };

  return Keccak;
}();

exports.Keccak = Keccak;

var SHA3 =
/** @class */
function (_super) {
  __extends(SHA3, _super);

  function SHA3(digestLength) {
    if (digestLength === void 0) {
      digestLength = 32;
    }

    var _this = _super.call(this, digestLength * 2) || this;

    _this.digestLength = digestLength;
    return _this;
  }

  SHA3.prototype.finish = function (dst) {
    if (!this._finished) {
      this._padAndPermute(0x06);
    } else {
      // XXX: only works for up to blockSize digests,
      // which is the case in our implementation.
      this._pos = 0;
    }

    this._squeeze(dst);

    return this;
  };

  SHA3.prototype.digest = function () {
    var out = new Uint8Array(this.digestLength);
    this.finish(out);
    return out;
  };

  SHA3.prototype.saveState = function () {
    if (this._finished) {
      throw new Error("SHA3: cannot save finished state");
    }

    return new Uint8Array(this._state.subarray(0, this._pos));
  };

  SHA3.prototype.restoreState = function (savedState) {
    this._state.set(savedState);

    this._pos = savedState.length;
    this._finished = false;
    return this;
  };

  SHA3.prototype.cleanSavedState = function (savedState) {
    wipe_1.wipe(savedState);
  };

  return SHA3;
}(Keccak);

exports.SHA3 = SHA3;

var SHA3224 =
/** @class */
function (_super) {
  __extends(SHA3224, _super);

  function SHA3224() {
    return _super.call(this, 224 / 8) || this;
  }

  return SHA3224;
}(SHA3);

exports.SHA3224 = SHA3224;

var SHA3256 =
/** @class */
function (_super) {
  __extends(SHA3256, _super);

  function SHA3256() {
    return _super.call(this, 256 / 8) || this;
  }

  return SHA3256;
}(SHA3);

exports.SHA3256 = SHA3256;

var SHA3384 =
/** @class */
function (_super) {
  __extends(SHA3384, _super);

  function SHA3384() {
    return _super.call(this, 384 / 8) || this;
  }

  return SHA3384;
}(SHA3);

exports.SHA3384 = SHA3384;

var SHA3512 =
/** @class */
function (_super) {
  __extends(SHA3512, _super);

  function SHA3512() {
    return _super.call(this, 512 / 8) || this;
  }

  return SHA3512;
}(SHA3);

exports.SHA3512 = SHA3512;

function hash(digestLength, data) {
  var h = new SHA3(digestLength);
  h.update(data);
  var digest = h.digest();
  h.clean();
  return digest;
}

exports.hash = hash;

exports.hash224 = function (data) {
  return hash(224 / 8, data);
};

exports.hash256 = function (data) {
  return hash(256 / 8, data);
};

exports.hash384 = function (data) {
  return hash(384 / 8, data);
};

exports.hash512 = function (data) {
  return hash(512 / 8, data);
};

var SHAKE =
/** @class */
function (_super) {
  __extends(SHAKE, _super);

  function SHAKE(bitSize) {
    var _this = _super.call(this, bitSize / 8 * 2) || this;

    _this.bitSize = bitSize;
    return _this;
  }

  SHAKE.prototype.stream = function (dst) {
    if (!this._finished) {
      this._padAndPermute(0x1f);
    }

    this._squeeze(dst);
  };

  return SHAKE;
}(Keccak);

exports.SHAKE = SHAKE;

var SHAKE128 =
/** @class */
function (_super) {
  __extends(SHAKE128, _super);

  function SHAKE128() {
    return _super.call(this, 128) || this;
  }

  return SHAKE128;
}(SHAKE);

exports.SHAKE128 = SHAKE128;

var SHAKE256 =
/** @class */
function (_super) {
  __extends(SHAKE256, _super);

  function SHAKE256() {
    return _super.call(this, 256) || this;
  }

  return SHAKE256;
}(SHAKE);

exports.SHAKE256 = SHAKE256;
var RNDC_HI = new Int32Array([0x00000000, 0x00000000, 0x80000000, 0x80000000, 0x00000000, 0x00000000, 0x80000000, 0x80000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x00000000, 0x80000000, 0x80000000, 0x80000000, 0x00000000, 0x80000000]);
var RNDC_LO = new Int32Array([0x00000001, 0x00008082, 0x0000808a, 0x80008000, 0x0000808b, 0x80000001, 0x80008081, 0x00008009, 0x0000008a, 0x00000088, 0x80008009, 0x8000000a, 0x8000808b, 0x0000008b, 0x00008089, 0x00008003, 0x00008002, 0x00000080, 0x0000800a, 0x8000000a, 0x80008081, 0x00008080, 0x80000001, 0x80008008]);

function keccakf(sh, sl, buf) {
  var bch0, bch1, bch2, bch3, bch4;
  var bcl0, bcl1, bcl2, bcl3, bcl4;
  var th, tl;

  for (var i = 0; i < 25; i++) {
    sl[i] = binary_1.readUint32LE(buf, i * 8);
    sh[i] = binary_1.readUint32LE(buf, i * 8 + 4);
  }

  for (var r = 0; r < 24; r++) {
    // Theta
    bch0 = sh[0] ^ sh[5] ^ sh[10] ^ sh[15] ^ sh[20];
    bch1 = sh[1] ^ sh[6] ^ sh[11] ^ sh[16] ^ sh[21];
    bch2 = sh[2] ^ sh[7] ^ sh[12] ^ sh[17] ^ sh[22];
    bch3 = sh[3] ^ sh[8] ^ sh[13] ^ sh[18] ^ sh[23];
    bch4 = sh[4] ^ sh[9] ^ sh[14] ^ sh[19] ^ sh[24];
    bcl0 = sl[0] ^ sl[5] ^ sl[10] ^ sl[15] ^ sl[20];
    bcl1 = sl[1] ^ sl[6] ^ sl[11] ^ sl[16] ^ sl[21];
    bcl2 = sl[2] ^ sl[7] ^ sl[12] ^ sl[17] ^ sl[22];
    bcl3 = sl[3] ^ sl[8] ^ sl[13] ^ sl[18] ^ sl[23];
    bcl4 = sl[4] ^ sl[9] ^ sl[14] ^ sl[19] ^ sl[24];
    th = bch4 ^ (bch1 << 1 | bcl1 >>> 32 - 1);
    tl = bcl4 ^ (bcl1 << 1 | bch1 >>> 32 - 1);
    sh[0] ^= th;
    sh[5] ^= th;
    sh[10] ^= th;
    sh[15] ^= th;
    sh[20] ^= th;
    sl[0] ^= tl;
    sl[5] ^= tl;
    sl[10] ^= tl;
    sl[15] ^= tl;
    sl[20] ^= tl;
    th = bch0 ^ (bch2 << 1 | bcl2 >>> 32 - 1);
    tl = bcl0 ^ (bcl2 << 1 | bch2 >>> 32 - 1);
    sh[1] ^= th;
    sh[6] ^= th;
    sh[11] ^= th;
    sh[16] ^= th;
    sh[21] ^= th;
    sl[1] ^= tl;
    sl[6] ^= tl;
    sl[11] ^= tl;
    sl[16] ^= tl;
    sl[21] ^= tl;
    th = bch1 ^ (bch3 << 1 | bcl3 >>> 32 - 1);
    tl = bcl1 ^ (bcl3 << 1 | bch3 >>> 32 - 1);
    sh[2] ^= th;
    sh[7] ^= th;
    sh[12] ^= th;
    sh[17] ^= th;
    sh[22] ^= th;
    sl[2] ^= tl;
    sl[7] ^= tl;
    sl[12] ^= tl;
    sl[17] ^= tl;
    sl[22] ^= tl;
    th = bch2 ^ (bch4 << 1 | bcl4 >>> 32 - 1);
    tl = bcl2 ^ (bcl4 << 1 | bch4 >>> 32 - 1);
    sh[3] ^= th;
    sl[3] ^= tl;
    sh[8] ^= th;
    sl[8] ^= tl;
    sh[13] ^= th;
    sl[13] ^= tl;
    sh[18] ^= th;
    sl[18] ^= tl;
    sh[23] ^= th;
    sl[23] ^= tl;
    th = bch3 ^ (bch0 << 1 | bcl0 >>> 32 - 1);
    tl = bcl3 ^ (bcl0 << 1 | bch0 >>> 32 - 1);
    sh[4] ^= th;
    sh[9] ^= th;
    sh[14] ^= th;
    sh[19] ^= th;
    sh[24] ^= th;
    sl[4] ^= tl;
    sl[9] ^= tl;
    sl[14] ^= tl;
    sl[19] ^= tl;
    sl[24] ^= tl; // Rho Pi

    th = sh[1];
    tl = sl[1];
    bch0 = sh[10];
    bcl0 = sl[10];
    sh[10] = th << 1 | tl >>> 32 - 1;
    sl[10] = tl << 1 | th >>> 32 - 1;
    th = bch0;
    tl = bcl0;
    bch0 = sh[7];
    bcl0 = sl[7];
    sh[7] = th << 3 | tl >>> 32 - 3;
    sl[7] = tl << 3 | th >>> 32 - 3;
    th = bch0;
    tl = bcl0;
    bch0 = sh[11];
    bcl0 = sl[11];
    sh[11] = th << 6 | tl >>> 32 - 6;
    sl[11] = tl << 6 | th >>> 32 - 6;
    th = bch0;
    tl = bcl0;
    bch0 = sh[17];
    bcl0 = sl[17];
    sh[17] = th << 10 | tl >>> 32 - 10;
    sl[17] = tl << 10 | th >>> 32 - 10;
    th = bch0;
    tl = bcl0;
    bch0 = sh[18];
    bcl0 = sl[18];
    sh[18] = th << 15 | tl >>> 32 - 15;
    sl[18] = tl << 15 | th >>> 32 - 15;
    th = bch0;
    tl = bcl0;
    bch0 = sh[3];
    bcl0 = sl[3];
    sh[3] = th << 21 | tl >>> 32 - 21;
    sl[3] = tl << 21 | th >>> 32 - 21;
    th = bch0;
    tl = bcl0;
    bch0 = sh[5];
    bcl0 = sl[5];
    sh[5] = th << 28 | tl >>> 32 - 28;
    sl[5] = tl << 28 | th >>> 32 - 28;
    th = bch0;
    tl = bcl0;
    bch0 = sh[16];
    bcl0 = sl[16];
    sh[16] = tl << 4 | th >>> 32 - 4;
    sl[16] = th << 4 | tl >>> 32 - 4;
    th = bch0;
    tl = bcl0;
    bch0 = sh[8];
    bcl0 = sl[8];
    sh[8] = tl << 13 | th >>> 32 - 13;
    sl[8] = th << 13 | tl >>> 32 - 13;
    th = bch0;
    tl = bcl0;
    bch0 = sh[21];
    bcl0 = sl[21];
    sh[21] = tl << 23 | th >>> 32 - 23;
    sl[21] = th << 23 | tl >>> 32 - 23;
    th = bch0;
    tl = bcl0;
    bch0 = sh[24];
    bcl0 = sl[24];
    sh[24] = th << 2 | tl >>> 32 - 2;
    sl[24] = tl << 2 | th >>> 32 - 2;
    th = bch0;
    tl = bcl0;
    bch0 = sh[4];
    bcl0 = sl[4];
    sh[4] = th << 14 | tl >>> 32 - 14;
    sl[4] = tl << 14 | th >>> 32 - 14;
    th = bch0;
    tl = bcl0;
    bch0 = sh[15];
    bcl0 = sl[15];
    sh[15] = th << 27 | tl >>> 32 - 27;
    sl[15] = tl << 27 | th >>> 32 - 27;
    th = bch0;
    tl = bcl0;
    bch0 = sh[23];
    bcl0 = sl[23];
    sh[23] = tl << 9 | th >>> 32 - 9;
    sl[23] = th << 9 | tl >>> 32 - 9;
    th = bch0;
    tl = bcl0;
    bch0 = sh[19];
    bcl0 = sl[19];
    sh[19] = tl << 24 | th >>> 32 - 24;
    sl[19] = th << 24 | tl >>> 32 - 24;
    th = bch0;
    tl = bcl0;
    bch0 = sh[13];
    bcl0 = sl[13];
    sh[13] = th << 8 | tl >>> 32 - 8;
    sl[13] = tl << 8 | th >>> 32 - 8;
    th = bch0;
    tl = bcl0;
    bch0 = sh[12];
    bcl0 = sl[12];
    sh[12] = th << 25 | tl >>> 32 - 25;
    sl[12] = tl << 25 | th >>> 32 - 25;
    th = bch0;
    tl = bcl0;
    bch0 = sh[2];
    bcl0 = sl[2];
    sh[2] = tl << 11 | th >>> 32 - 11;
    sl[2] = th << 11 | tl >>> 32 - 11;
    th = bch0;
    tl = bcl0;
    bch0 = sh[20];
    bcl0 = sl[20];
    sh[20] = tl << 30 | th >>> 32 - 30;
    sl[20] = th << 30 | tl >>> 32 - 30;
    th = bch0;
    tl = bcl0;
    bch0 = sh[14];
    bcl0 = sl[14];
    sh[14] = th << 18 | tl >>> 32 - 18;
    sl[14] = tl << 18 | th >>> 32 - 18;
    th = bch0;
    tl = bcl0;
    bch0 = sh[22];
    bcl0 = sl[22];
    sh[22] = tl << 7 | th >>> 32 - 7;
    sl[22] = th << 7 | tl >>> 32 - 7;
    th = bch0;
    tl = bcl0;
    bch0 = sh[9];
    bcl0 = sl[9];
    sh[9] = tl << 29 | th >>> 32 - 29;
    sl[9] = th << 29 | tl >>> 32 - 29;
    th = bch0;
    tl = bcl0;
    bch0 = sh[6];
    bcl0 = sl[6];
    sh[6] = th << 20 | tl >>> 32 - 20;
    sl[6] = tl << 20 | th >>> 32 - 20;
    th = bch0;
    tl = bcl0;
    bch0 = sh[1];
    bcl0 = sl[1];
    sh[1] = tl << 12 | th >>> 32 - 12;
    sl[1] = th << 12 | tl >>> 32 - 12;
    th = bch0;
    tl = bcl0; // Chi

    bch0 = sh[0];
    bch1 = sh[1];
    bch2 = sh[2];
    bch3 = sh[3];
    bch4 = sh[4];
    sh[0] ^= ~bch1 & bch2;
    sh[1] ^= ~bch2 & bch3;
    sh[2] ^= ~bch3 & bch4;
    sh[3] ^= ~bch4 & bch0;
    sh[4] ^= ~bch0 & bch1;
    bcl0 = sl[0];
    bcl1 = sl[1];
    bcl2 = sl[2];
    bcl3 = sl[3];
    bcl4 = sl[4];
    sl[0] ^= ~bcl1 & bcl2;
    sl[1] ^= ~bcl2 & bcl3;
    sl[2] ^= ~bcl3 & bcl4;
    sl[3] ^= ~bcl4 & bcl0;
    sl[4] ^= ~bcl0 & bcl1;
    bch0 = sh[5];
    bch1 = sh[6];
    bch2 = sh[7];
    bch3 = sh[8];
    bch4 = sh[9];
    sh[5] ^= ~bch1 & bch2;
    sh[6] ^= ~bch2 & bch3;
    sh[7] ^= ~bch3 & bch4;
    sh[8] ^= ~bch4 & bch0;
    sh[9] ^= ~bch0 & bch1;
    bcl0 = sl[5];
    bcl1 = sl[6];
    bcl2 = sl[7];
    bcl3 = sl[8];
    bcl4 = sl[9];
    sl[5] ^= ~bcl1 & bcl2;
    sl[6] ^= ~bcl2 & bcl3;
    sl[7] ^= ~bcl3 & bcl4;
    sl[8] ^= ~bcl4 & bcl0;
    sl[9] ^= ~bcl0 & bcl1;
    bch0 = sh[10];
    bch1 = sh[11];
    bch2 = sh[12];
    bch3 = sh[13];
    bch4 = sh[14];
    sh[10] ^= ~bch1 & bch2;
    sh[11] ^= ~bch2 & bch3;
    sh[12] ^= ~bch3 & bch4;
    sh[13] ^= ~bch4 & bch0;
    sh[14] ^= ~bch0 & bch1;
    bcl0 = sl[10];
    bcl1 = sl[11];
    bcl2 = sl[12];
    bcl3 = sl[13];
    bcl4 = sl[14];
    sl[10] ^= ~bcl1 & bcl2;
    sl[11] ^= ~bcl2 & bcl3;
    sl[12] ^= ~bcl3 & bcl4;
    sl[13] ^= ~bcl4 & bcl0;
    sl[14] ^= ~bcl0 & bcl1;
    bch0 = sh[15];
    bch1 = sh[16];
    bch2 = sh[17];
    bch3 = sh[18];
    bch4 = sh[19];
    sh[15] ^= ~bch1 & bch2;
    sh[16] ^= ~bch2 & bch3;
    sh[17] ^= ~bch3 & bch4;
    sh[18] ^= ~bch4 & bch0;
    sh[19] ^= ~bch0 & bch1;
    bcl0 = sl[15];
    bcl1 = sl[16];
    bcl2 = sl[17];
    bcl3 = sl[18];
    bcl4 = sl[19];
    sl[15] ^= ~bcl1 & bcl2;
    sl[16] ^= ~bcl2 & bcl3;
    sl[17] ^= ~bcl3 & bcl4;
    sl[18] ^= ~bcl4 & bcl0;
    sl[19] ^= ~bcl0 & bcl1;
    bch0 = sh[20];
    bch1 = sh[21];
    bch2 = sh[22];
    bch3 = sh[23];
    bch4 = sh[24];
    sh[20] ^= ~bch1 & bch2;
    sh[21] ^= ~bch2 & bch3;
    sh[22] ^= ~bch3 & bch4;
    sh[23] ^= ~bch4 & bch0;
    sh[24] ^= ~bch0 & bch1;
    bcl0 = sl[20];
    bcl1 = sl[21];
    bcl2 = sl[22];
    bcl3 = sl[23];
    bcl4 = sl[24];
    sl[20] ^= ~bcl1 & bcl2;
    sl[21] ^= ~bcl2 & bcl3;
    sl[22] ^= ~bcl3 & bcl4;
    sl[23] ^= ~bcl4 & bcl0;
    sl[24] ^= ~bcl0 & bcl1; //  Iota

    sh[0] ^= RNDC_HI[r];
    sl[0] ^= RNDC_LO[r];
  }

  for (var i = 0; i < 25; i++) {
    binary_1.writeUint32LE(sl[i], buf, i * 8);
    binary_1.writeUint32LE(sh[i], buf, i * 8 + 4);
  }
}

/***/ }),

/***/ 7849:
/***/ (function(__unused_webpack_module, exports) {

"use strict";
 // Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Sets all values in the given array to zero and returns it.
 *
 * The fact that it sets bytes to zero can be relied on.
 *
 * There is no guarantee that this function makes data disappear from memory,
 * as runtime implementation can, for example, have copying garbage collector
 * that will make copies of sensitive data before we wipe it. Or that an
 * operating system will write our data to swap or sleep image. Another thing
 * is that an optimizing compiler can remove calls to this function or make it
 * no-op. There's nothing we can do with it, so we just do our best and hope
 * that everything will be okay and good will triumph over evil.
 */

function wipe(array) {
  // Right now it's similar to array.fill(0). If it turns
  // out that runtimes optimize this call away, maybe
  // we can try something else.
  for (var i = 0; i < array.length; i++) {
    array[i] = 0;
  }

  return array;
}

exports.wipe = wipe;

/***/ }),

/***/ 4576:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AES_CBC": function() { return /* binding */ AES_CBC; },
/* harmony export */   "AES_CCM": function() { return /* binding */ AES_CCM; },
/* harmony export */   "AES_CFB": function() { return /* binding */ AES_CFB; },
/* harmony export */   "AES_CMAC": function() { return /* binding */ AES_CMAC; },
/* harmony export */   "AES_CTR": function() { return /* binding */ AES_CTR; },
/* harmony export */   "AES_ECB": function() { return /* binding */ AES_ECB; },
/* harmony export */   "AES_GCM": function() { return /* binding */ AES_GCM; },
/* harmony export */   "AES_OFB": function() { return /* binding */ AES_OFB; },
/* harmony export */   "BigNumber": function() { return /* binding */ BigNumber; },
/* harmony export */   "HmacSha1": function() { return /* binding */ HmacSha1; },
/* harmony export */   "HmacSha256": function() { return /* binding */ HmacSha256; },
/* harmony export */   "HmacSha512": function() { return /* binding */ HmacSha512; },
/* harmony export */   "IllegalArgumentError": function() { return /* binding */ IllegalArgumentError; },
/* harmony export */   "IllegalStateError": function() { return /* binding */ IllegalStateError; },
/* harmony export */   "Modulus": function() { return /* binding */ Modulus; },
/* harmony export */   "Pbkdf2HmacSha1": function() { return /* binding */ Pbkdf2HmacSha1; },
/* harmony export */   "Pbkdf2HmacSha256": function() { return /* binding */ Pbkdf2HmacSha256; },
/* harmony export */   "Pbkdf2HmacSha512": function() { return /* binding */ Pbkdf2HmacSha512; },
/* harmony export */   "RSA": function() { return /* binding */ RSA; },
/* harmony export */   "RSA_OAEP": function() { return /* binding */ RSA_OAEP; },
/* harmony export */   "RSA_PKCS1_v1_5": function() { return /* binding */ RSA_PKCS1_v1_5; },
/* harmony export */   "RSA_PSS": function() { return /* binding */ RSA_PSS; },
/* harmony export */   "SecurityError": function() { return /* binding */ SecurityError; },
/* harmony export */   "Sha1": function() { return /* binding */ Sha1; },
/* harmony export */   "Sha256": function() { return /* binding */ Sha256; },
/* harmony export */   "Sha512": function() { return /* binding */ Sha512; },
/* harmony export */   "base64_to_bytes": function() { return /* binding */ base64_to_bytes; },
/* harmony export */   "bytes_to_base64": function() { return /* binding */ bytes_to_base64; },
/* harmony export */   "bytes_to_hex": function() { return /* binding */ bytes_to_hex; },
/* harmony export */   "bytes_to_string": function() { return /* binding */ bytes_to_string; },
/* harmony export */   "hex_to_bytes": function() { return /* binding */ hex_to_bytes; },
/* harmony export */   "string_to_bytes": function() { return /* binding */ string_to_bytes; }
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var local_atob = typeof atob === 'undefined' ? function (str) {
  return Buffer.from(str, 'base64').toString('binary');
} : atob;
var local_btoa = typeof btoa === 'undefined' ? function (str) {
  return Buffer.from(str, 'binary').toString('base64');
} : btoa;

function string_to_bytes(str) {
  var utf8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var len = str.length,
      bytes = new Uint8Array(utf8 ? 4 * len : len);

  for (var i = 0, j = 0; i < len; i++) {
    var c = str.charCodeAt(i);

    if (utf8 && 0xd800 <= c && c <= 0xdbff) {
      if (++i >= len) throw new Error('Malformed string, low surrogate expected at position ' + i);
      c = (c ^ 0xd800) << 10 | 0x10000 | str.charCodeAt(i) ^ 0xdc00;
    } else if (!utf8 && c >>> 8) {
      throw new Error('Wide characters are not allowed.');
    }

    if (!utf8 || c <= 0x7f) {
      bytes[j++] = c;
    } else if (c <= 0x7ff) {
      bytes[j++] = 0xc0 | c >> 6;
      bytes[j++] = 0x80 | c & 0x3f;
    } else if (c <= 0xffff) {
      bytes[j++] = 0xe0 | c >> 12;
      bytes[j++] = 0x80 | c >> 6 & 0x3f;
      bytes[j++] = 0x80 | c & 0x3f;
    } else {
      bytes[j++] = 0xf0 | c >> 18;
      bytes[j++] = 0x80 | c >> 12 & 0x3f;
      bytes[j++] = 0x80 | c >> 6 & 0x3f;
      bytes[j++] = 0x80 | c & 0x3f;
    }
  }

  return bytes.subarray(0, j);
}

function hex_to_bytes(str) {
  var len = str.length;

  if (len & 1) {
    str = '0' + str;
    len++;
  }

  var bytes = new Uint8Array(len >> 1);

  for (var i = 0; i < len; i += 2) {
    bytes[i >> 1] = parseInt(str.substr(i, 2), 16);
  }

  return bytes;
}

function base64_to_bytes(str) {
  return string_to_bytes(local_atob(str));
}

function bytes_to_string(bytes) {
  var utf8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var len = bytes.length,
      chars = new Array(len);

  for (var i = 0, j = 0; i < len; i++) {
    var b = bytes[i];

    if (!utf8 || b < 128) {
      chars[j++] = b;
    } else if (b >= 192 && b < 224 && i + 1 < len) {
      chars[j++] = (b & 0x1f) << 6 | bytes[++i] & 0x3f;
    } else if (b >= 224 && b < 240 && i + 2 < len) {
      chars[j++] = (b & 0xf) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;
    } else if (b >= 240 && b < 248 && i + 3 < len) {
      var c = (b & 7) << 18 | (bytes[++i] & 0x3f) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;

      if (c <= 0xffff) {
        chars[j++] = c;
      } else {
        c ^= 0x10000;
        chars[j++] = 0xd800 | c >> 10;
        chars[j++] = 0xdc00 | c & 0x3ff;
      }
    } else {
      throw new Error('Malformed UTF8 character at byte offset ' + i);
    }
  }

  var str = '',
      bs = 16384;

  for (var i = 0; i < j; i += bs) {
    str += String.fromCharCode.apply(String, chars.slice(i, i + bs <= j ? i + bs : j));
  }

  return str;
}

function bytes_to_hex(arr) {
  var str = '';

  for (var i = 0; i < arr.length; i++) {
    var h = (arr[i] & 0xff).toString(16);
    if (h.length < 2) str += '0';
    str += h;
  }

  return str;
}

function bytes_to_base64(arr) {
  return local_btoa(bytes_to_string(arr));
}

function is_bytes(a) {
  return a instanceof Uint8Array;
}

function _heap_init(heap, heapSize) {
  var size = heap ? heap.byteLength : heapSize || 65536;
  if (size & 0xfff || size <= 0) throw new Error('heap size must be a positive integer and a multiple of 4096');
  heap = heap || new Uint8Array(new ArrayBuffer(size));
  return heap;
}

function _heap_write(heap, hpos, data, dpos, dlen) {
  var hlen = heap.length - hpos;
  var wlen = hlen < dlen ? hlen : dlen;
  heap.set(data.subarray(dpos, dpos + wlen), hpos);
  return wlen;
}

function joinBytes() {
  for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
    arg[_key] = arguments[_key];
  }

  var totalLenght = arg.reduce(function (sum, curr) {
    return sum + curr.length;
  }, 0);
  var ret = new Uint8Array(totalLenght);
  var cursor = 0;

  for (var i = 0; i < arg.length; i++) {
    ret.set(arg[i], cursor);
    cursor += arg[i].length;
  }

  return ret;
}
/**
 * Util exports
 */


var IllegalStateError = /*#__PURE__*/function (_Error) {
  _inherits(IllegalStateError, _Error);

  var _super = _createSuper(IllegalStateError);

  function IllegalStateError() {
    _classCallCheck(this, IllegalStateError);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _super.call.apply(_super, [this].concat(args));
  }

  return _createClass(IllegalStateError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var IllegalArgumentError = /*#__PURE__*/function (_Error2) {
  _inherits(IllegalArgumentError, _Error2);

  var _super2 = _createSuper(IllegalArgumentError);

  function IllegalArgumentError() {
    _classCallCheck(this, IllegalArgumentError);

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _super2.call.apply(_super2, [this].concat(args));
  }

  return _createClass(IllegalArgumentError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var SecurityError = /*#__PURE__*/function (_Error3) {
  _inherits(SecurityError, _Error3);

  var _super3 = _createSuper(SecurityError);

  function SecurityError() {
    _classCallCheck(this, SecurityError);

    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return _super3.call.apply(_super3, [this].concat(args));
  }

  return _createClass(SecurityError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.
 * @author Artem S Vybornov <vybornov@gmail.com>
 * @license MIT
 */


var AES_asm = function () {
  /**
   * Galois Field stuff init flag
   */
  var ginit_done = false;
  /**
   * Galois Field exponentiation and logarithm tables for 3 (the generator)
   */

  var gexp3, glog3;
  /**
   * Init Galois Field tables
   */

  function ginit() {
    gexp3 = [], glog3 = [];
    var a = 1,
        c,
        d;

    for (c = 0; c < 255; c++) {
      gexp3[c] = a; // Multiply by three

      d = a & 0x80, a <<= 1, a &= 255;
      if (d === 0x80) a ^= 0x1b;
      a ^= gexp3[c]; // Set the log table value

      glog3[gexp3[c]] = c;
    }

    gexp3[255] = gexp3[0];
    glog3[0] = 0;
    ginit_done = true;
  }
  /**
   * Galois Field multiplication
   * @param {number} a
   * @param {number} b
   * @return {number}
   */


  function gmul(a, b) {
    var c = gexp3[(glog3[a] + glog3[b]) % 255];
    if (a === 0 || b === 0) c = 0;
    return c;
  }
  /**
   * Galois Field reciprocal
   * @param {number} a
   * @return {number}
   */


  function ginv(a) {
    var i = gexp3[255 - glog3[a]];
    if (a === 0) i = 0;
    return i;
  }
  /**
   * AES stuff init flag
   */


  var aes_init_done = false;
  /**
   * Encryption, Decryption, S-Box and KeyTransform tables
   *
   * @type {number[]}
   */

  var aes_sbox;
  /**
   * @type {number[]}
   */

  var aes_sinv;
  /**
   * @type {number[][]}
   */

  var aes_enc;
  /**
   * @type {number[][]}
   */

  var aes_dec;
  /**
   * Init AES tables
   */

  function aes_init() {
    if (!ginit_done) ginit(); // Calculates AES S-Box value

    function _s(a) {
      var c, s, x;
      s = x = ginv(a);

      for (c = 0; c < 4; c++) {
        s = (s << 1 | s >>> 7) & 255;
        x ^= s;
      }

      x ^= 99;
      return x;
    } // Tables


    aes_sbox = [], aes_sinv = [], aes_enc = [[], [], [], []], aes_dec = [[], [], [], []];

    for (var i = 0; i < 256; i++) {
      var s = _s(i); // S-Box and its inverse


      aes_sbox[i] = s;
      aes_sinv[s] = i; // Ecryption and Decryption tables

      aes_enc[0][i] = gmul(2, s) << 24 | s << 16 | s << 8 | gmul(3, s);
      aes_dec[0][s] = gmul(14, i) << 24 | gmul(9, i) << 16 | gmul(13, i) << 8 | gmul(11, i); // Rotate tables

      for (var t = 1; t < 4; t++) {
        aes_enc[t][i] = aes_enc[t - 1][i] >>> 8 | aes_enc[t - 1][i] << 24;
        aes_dec[t][s] = aes_dec[t - 1][s] >>> 8 | aes_dec[t - 1][s] << 24;
      }
    }

    aes_init_done = true;
  }
  /**
   * Asm.js module constructor.
   *
   * <p>
   * Heap buffer layout by offset:
   * <pre>
   * 0x0000   encryption key schedule
   * 0x0400   decryption key schedule
   * 0x0800   sbox
   * 0x0c00   inv sbox
   * 0x1000   encryption tables
   * 0x2000   decryption tables
   * 0x3000   reserved (future GCM multiplication lookup table)
   * 0x4000   data
   * </pre>
   * Don't touch anything before <code>0x400</code>.
   * </p>
   *
   * @alias AES_asm
   * @class
   * @param foreign - <i>ignored</i>
   * @param buffer - heap buffer to link with
   */


  var wrapper = function wrapper(foreign, buffer) {
    // Init AES stuff for the first time
    if (!aes_init_done) aes_init(); // Fill up AES tables

    var heap = new Uint32Array(buffer);
    heap.set(aes_sbox, 0x0800 >> 2);
    heap.set(aes_sinv, 0x0c00 >> 2);

    for (var i = 0; i < 4; i++) {
      heap.set(aes_enc[i], 0x1000 + 0x400 * i >> 2);
      heap.set(aes_dec[i], 0x2000 + 0x400 * i >> 2);
    }
    /**
     * Calculate AES key schedules.
     * @instance
     * @memberof AES_asm
     * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)
     * @param {number} k0 - key vector components
     * @param {number} k1 - key vector components
     * @param {number} k2 - key vector components
     * @param {number} k3 - key vector components
     * @param {number} k4 - key vector components
     * @param {number} k5 - key vector components
     * @param {number} k6 - key vector components
     * @param {number} k7 - key vector components
     */


    function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {
      var ekeys = heap.subarray(0x000, 60),
          dkeys = heap.subarray(0x100, 0x100 + 60); // Encryption key schedule

      ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);

      for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {
        var k = ekeys[i - 1];

        if (i % ks === 0 || ks === 8 && i % ks === 4) {
          k = aes_sbox[k >>> 24] << 24 ^ aes_sbox[k >>> 16 & 255] << 16 ^ aes_sbox[k >>> 8 & 255] << 8 ^ aes_sbox[k & 255];
        }

        if (i % ks === 0) {
          k = k << 8 ^ k >>> 24 ^ rcon << 24;
          rcon = rcon << 1 ^ (rcon & 0x80 ? 0x1b : 0);
        }

        ekeys[i] = ekeys[i - ks] ^ k;
      } // Decryption key schedule


      for (var j = 0; j < i; j += 4) {
        for (var jj = 0; jj < 4; jj++) {
          var k = ekeys[i - (4 + j) + (4 - jj) % 4];

          if (j < 4 || j >= i - 4) {
            dkeys[j + jj] = k;
          } else {
            dkeys[j + jj] = aes_dec[0][aes_sbox[k >>> 24]] ^ aes_dec[1][aes_sbox[k >>> 16 & 255]] ^ aes_dec[2][aes_sbox[k >>> 8 & 255]] ^ aes_dec[3][aes_sbox[k & 255]];
          }
        }
      } // Set rounds number


      asm.set_rounds(ks + 5);
    } // create library object with necessary properties


    var stdlib = {
      Uint8Array: Uint8Array,
      Uint32Array: Uint32Array
    };

    var asm = function (stdlib, foreign, buffer) {
      "use asm";

      var S0 = 0,
          S1 = 0,
          S2 = 0,
          S3 = 0,
          I0 = 0,
          I1 = 0,
          I2 = 0,
          I3 = 0,
          N0 = 0,
          N1 = 0,
          N2 = 0,
          N3 = 0,
          M0 = 0,
          M1 = 0,
          M2 = 0,
          M3 = 0,
          H0 = 0,
          H1 = 0,
          H2 = 0,
          H3 = 0,
          R = 0;
      var HEAP = new stdlib.Uint32Array(buffer),
          DATA = new stdlib.Uint8Array(buffer);
      /**
       * AES core
       * @param {number} k - precomputed key schedule offset
       * @param {number} s - precomputed sbox table offset
       * @param {number} t - precomputed round table offset
       * @param {number} r - number of inner rounds to perform
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */

      function _core(k, s, t, r, x0, x1, x2, x3) {
        k = k | 0;
        s = s | 0;
        t = t | 0;
        r = r | 0;
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t1 = 0,
            t2 = 0,
            t3 = 0,
            y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            i = 0;
        t1 = t | 0x400, t2 = t | 0x800, t3 = t | 0xc00; // round 0

        x0 = x0 ^ HEAP[(k | 0) >> 2], x1 = x1 ^ HEAP[(k | 4) >> 2], x2 = x2 ^ HEAP[(k | 8) >> 2], x3 = x3 ^ HEAP[(k | 12) >> 2]; // round 1..r

        for (i = 16; (i | 0) <= r << 4; i = i + 16 | 0) {
          y0 = HEAP[(t | x0 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x1 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x2 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], y1 = HEAP[(t | x1 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x2 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x3 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], y2 = HEAP[(t | x2 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x3 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x0 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], y3 = HEAP[(t | x3 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x0 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x1 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
          x0 = y0, x1 = y1, x2 = y2, x3 = y3;
        } // final round


        S0 = HEAP[(s | x0 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x1 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x2 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], S1 = HEAP[(s | x1 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x2 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x3 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], S2 = HEAP[(s | x2 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x3 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x0 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], S3 = HEAP[(s | x3 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x0 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x1 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
      }
      /**
       * ECB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ecb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, x0, x1, x2, x3);
      }
      /**
       * ECB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ecb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;
      }
      /**
       * CBC mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cbc_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0 ^ x0, I1 ^ x1, I2 ^ x2, I3 ^ x3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;
      }
      /**
       * CBC mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cbc_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;
        S0 = S0 ^ I0, S1 = S1 ^ I1, S2 = S2 ^ I2, S3 = S3 ^ I3;
        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }
      /**
       * CFB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cfb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0 = S0 ^ x0, I1 = S1 = S1 ^ x1, I2 = S2 = S2 ^ x2, I3 = S3 = S3 ^ x3;
      }
      /**
       * CFB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cfb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;
        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }
      /**
       * OFB mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ofb(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;
        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;
      }
      /**
       * CTR mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ctr(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, N0, N1, N2, N3);

        N3 = ~M3 & N3 | M3 & N3 + 1;
        N2 = ~M2 & N2 | M2 & N2 + ((N3 | 0) == 0);
        N1 = ~M1 & N1 | M1 & N1 + ((N2 | 0) == 0);
        N0 = ~M0 & N0 | M0 & N0 + ((N1 | 0) == 0);
        S0 = S0 ^ x0;
        S1 = S1 ^ x1;
        S2 = S2 ^ x2;
        S3 = S3 ^ x3;
      }
      /**
       * GCM mode MAC calculation
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _gcm_mac(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            z0 = 0,
            z1 = 0,
            z2 = 0,
            z3 = 0,
            i = 0,
            c = 0;
        x0 = x0 ^ I0, x1 = x1 ^ I1, x2 = x2 ^ I2, x3 = x3 ^ I3;
        y0 = H0 | 0, y1 = H1 | 0, y2 = H2 | 0, y3 = H3 | 0;

        for (; (i | 0) < 128; i = i + 1 | 0) {
          if (y0 >>> 31) {
            z0 = z0 ^ x0, z1 = z1 ^ x1, z2 = z2 ^ x2, z3 = z3 ^ x3;
          }

          y0 = y0 << 1 | y1 >>> 31, y1 = y1 << 1 | y2 >>> 31, y2 = y2 << 1 | y3 >>> 31, y3 = y3 << 1;
          c = x3 & 1;
          x3 = x3 >>> 1 | x2 << 31, x2 = x2 >>> 1 | x1 << 31, x1 = x1 >>> 1 | x0 << 31, x0 = x0 >>> 1;
          if (c) x0 = x0 ^ 0xe1000000;
        }

        I0 = z0, I1 = z1, I2 = z2, I3 = z3;
      }
      /**
       * Set the internal rounds number.
       * @instance
       * @memberof AES_asm
       * @param {number} r - number if inner AES rounds
       */


      function set_rounds(r) {
        r = r | 0;
        R = r;
      }
      /**
       * Populate the internal state of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} s0 - state vector
       * @param {number} s1 - state vector
       * @param {number} s2 - state vector
       * @param {number} s3 - state vector
       */


      function set_state(s0, s1, s2, s3) {
        s0 = s0 | 0;
        s1 = s1 | 0;
        s2 = s2 | 0;
        s3 = s3 | 0;
        S0 = s0, S1 = s1, S2 = s2, S3 = s3;
      }
      /**
       * Populate the internal iv of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} i0 - iv vector
       * @param {number} i1 - iv vector
       * @param {number} i2 - iv vector
       * @param {number} i3 - iv vector
       */


      function set_iv(i0, i1, i2, i3) {
        i0 = i0 | 0;
        i1 = i1 | 0;
        i2 = i2 | 0;
        i3 = i3 | 0;
        I0 = i0, I1 = i1, I2 = i2, I3 = i3;
      }
      /**
       * Set nonce for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} n0 - nonce vector
       * @param {number} n1 - nonce vector
       * @param {number} n2 - nonce vector
       * @param {number} n3 - nonce vector
       */


      function set_nonce(n0, n1, n2, n3) {
        n0 = n0 | 0;
        n1 = n1 | 0;
        n2 = n2 | 0;
        n3 = n3 | 0;
        N0 = n0, N1 = n1, N2 = n2, N3 = n3;
      }
      /**
       * Set counter mask for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} m0 - counter mask vector
       * @param {number} m1 - counter mask vector
       * @param {number} m2 - counter mask vector
       * @param {number} m3 - counter mask vector
       */


      function set_mask(m0, m1, m2, m3) {
        m0 = m0 | 0;
        m1 = m1 | 0;
        m2 = m2 | 0;
        m3 = m3 | 0;
        M0 = m0, M1 = m1, M2 = m2, M3 = m3;
      }
      /**
       * Set counter for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} c0 - counter vector
       * @param {number} c1 - counter vector
       * @param {number} c2 - counter vector
       * @param {number} c3 - counter vector
       */


      function set_counter(c0, c1, c2, c3) {
        c0 = c0 | 0;
        c1 = c1 | 0;
        c2 = c2 | 0;
        c3 = c3 | 0;
        N3 = ~M3 & N3 | M3 & c3, N2 = ~M2 & N2 | M2 & c2, N1 = ~M1 & N1 | M1 & c1, N0 = ~M0 & N0 | M0 & c0;
      }
      /**
       * Store the internal state vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */


      function get_state(pos) {
        pos = pos | 0;
        if (pos & 15) return -1;
        DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;
        return 16;
      }
      /**
       * Store the internal iv vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */


      function get_iv(pos) {
        pos = pos | 0;
        if (pos & 15) return -1;
        DATA[pos | 0] = I0 >>> 24, DATA[pos | 1] = I0 >>> 16 & 255, DATA[pos | 2] = I0 >>> 8 & 255, DATA[pos | 3] = I0 & 255, DATA[pos | 4] = I1 >>> 24, DATA[pos | 5] = I1 >>> 16 & 255, DATA[pos | 6] = I1 >>> 8 & 255, DATA[pos | 7] = I1 & 255, DATA[pos | 8] = I2 >>> 24, DATA[pos | 9] = I2 >>> 16 & 255, DATA[pos | 10] = I2 >>> 8 & 255, DATA[pos | 11] = I2 & 255, DATA[pos | 12] = I3 >>> 24, DATA[pos | 13] = I3 >>> 16 & 255, DATA[pos | 14] = I3 >>> 8 & 255, DATA[pos | 15] = I3 & 255;
        return 16;
      }
      /**
       * GCM initialization.
       * @instance
       * @memberof AES_asm
       */


      function gcm_init() {
        _ecb_enc(0, 0, 0, 0);

        H0 = S0, H1 = S1, H2 = S2, H3 = S3;
      }
      /**
       * Perform ciphering operation on the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */


      function cipher(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;
        var ret = 0;
        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _cipher_modes[mode & 7](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;
          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }
      /**
       * Calculates MAC of the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */


      function mac(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;
        var ret = 0;
        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _mac_modes[mode & 1](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }
      /**
       * AES cipher modes table (virual methods)
       */


      var _cipher_modes = [_ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr];
      /**
       * AES MAC modes table (virual methods)
       */

      var _mac_modes = [_cbc_enc, _gcm_mac];
      /**
       * Asm.js module exports
       */

      return {
        set_rounds: set_rounds,
        set_state: set_state,
        set_iv: set_iv,
        set_nonce: set_nonce,
        set_mask: set_mask,
        set_counter: set_counter,
        get_state: get_state,
        get_iv: get_iv,
        gcm_init: gcm_init,
        cipher: cipher,
        mac: mac
      };
    }(stdlib, foreign, buffer);

    asm.set_key = set_key;
    return asm;
  };
  /**
   * AES enciphering mode constants
   * @enum {number}
   * @const
   */


  wrapper.ENC = {
    ECB: 0,
    CBC: 2,
    CFB: 4,
    OFB: 6,
    CTR: 7
  },
  /**
   * AES deciphering mode constants
   * @enum {number}
   * @const
   */
  wrapper.DEC = {
    ECB: 1,
    CBC: 3,
    CFB: 5,
    OFB: 6,
    CTR: 7
  },
  /**
   * AES MAC mode constants
   * @enum {number}
   * @const
   */
  wrapper.MAC = {
    CBC: 0,
    GCM: 1
  };
  /**
   * Heap data offset
   * @type {number}
   * @const
   */

  wrapper.HEAP_DATA = 0x4000;
  return wrapper;
}();

var AES = /*#__PURE__*/function () {
  function AES(key, iv) {
    var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var mode = arguments.length > 3 ? arguments[3] : undefined;

    _classCallCheck(this, AES);

    this.pos = 0;
    this.len = 0;
    this.mode = mode; // The AES "worker"

    this.heap = _heap_init().subarray(AES_asm.HEAP_DATA);
    this.asm = new AES_asm(null, this.heap.buffer); // The AES object state

    this.pos = 0;
    this.len = 0; // Key

    var keylen = key.length;
    if (keylen !== 16 && keylen !== 24 && keylen !== 32) throw new IllegalArgumentError('illegal key size');
    var keyview = new DataView(key.buffer, key.byteOffset, key.byteLength);
    this.asm.set_key(keylen >> 2, keyview.getUint32(0), keyview.getUint32(4), keyview.getUint32(8), keyview.getUint32(12), keylen > 16 ? keyview.getUint32(16) : 0, keylen > 16 ? keyview.getUint32(20) : 0, keylen > 24 ? keyview.getUint32(24) : 0, keylen > 24 ? keyview.getUint32(28) : 0); // IV

    if (iv !== undefined) {
      if (iv.length !== 16) throw new IllegalArgumentError('illegal iv size');
      var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);
      this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));
    } else {
      this.asm.set_iv(0, 0, 0, 0);
    }

    this.padding = padding;
  }

  _createClass(AES, [{
    key: "AES_Encrypt_process",
    value: function AES_Encrypt_process(data) {
      if (!is_bytes(data)) throw new TypeError("data isn't of expected type");
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.ENC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var dpos = 0;
      var dlen = data.length || 0;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var wlen = 0;
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(amode, hpos + pos, len);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_Encrypt_finish",
    value: function AES_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.ENC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var plen = 16 - len % 16;
      var rlen = len;

      if (this.hasOwnProperty('padding')) {
        if (this.padding) {
          for (var p = 0; p < plen; ++p) {
            heap[pos + len + p] = plen;
          }

          len += plen;
          rlen = len;
        } else if (len % 16) {
          throw new IllegalArgumentError('data length must be a multiple of the block size');
        }
      } else {
        len += plen;
      }

      var result = new Uint8Array(rlen);
      if (len) asm.cipher(amode, hpos + pos, len);
      if (rlen) result.set(heap.subarray(pos, pos + rlen));
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_Decrypt_process",
    value: function AES_Decrypt_process(data) {
      if (!is_bytes(data)) throw new TypeError("data isn't of expected type");
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.DEC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var dpos = 0;
      var dlen = data.length || 0;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var plen = 0;
      var wlen = 0;

      if (this.padding) {
        plen = len + dlen - rlen || 16;
        rlen -= plen;
      }

      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(amode, hpos + pos, len - (!dlen ? plen : 0));
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_Decrypt_finish",
    value: function AES_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.DEC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var rlen = len;

      if (len > 0) {
        if (len % 16) {
          if (this.hasOwnProperty('padding')) {
            throw new IllegalArgumentError('data length must be a multiple of the block size');
          } else {
            len += 16 - len % 16;
          }
        }

        asm.cipher(amode, hpos + pos, len);

        if (this.hasOwnProperty('padding') && this.padding) {
          var pad = heap[pos + rlen - 1];
          if (pad < 1 || pad > 16 || pad > rlen) throw new SecurityError('bad padding');
          var pcheck = 0;

          for (var i = pad; i > 1; i--) {
            pcheck |= pad ^ heap[pos + rlen - i];
          }

          if (pcheck) throw new SecurityError('bad padding');
          rlen -= pad;
        }
      }

      var result = new Uint8Array(rlen);

      if (rlen > 0) {
        result.set(heap.subarray(pos, pos + rlen));
      }

      this.pos = 0;
      this.len = 0;
      return result;
    }
  }]);

  return AES;
}();

var AES_CBC = /*#__PURE__*/function (_AES) {
  _inherits(AES_CBC, _AES);

  var _super4 = _createSuper(AES_CBC);

  function AES_CBC(key, iv) {
    var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    _classCallCheck(this, AES_CBC);

    return _super4.call(this, key, iv, padding, 'CBC');
  }

  _createClass(AES_CBC, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var iv = arguments.length > 3 ? arguments[3] : undefined;
      return new AES_CBC(key, iv, padding).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var iv = arguments.length > 3 ? arguments[3] : undefined;
      return new AES_CBC(key, iv, padding).decrypt(data);
    }
  }]);

  return AES_CBC;
}(AES);
/**
 * Counter with CBC-MAC (CCM)
 *
 * Due to JS limitations (52 bits of Number precision) maximum encrypted message length
 * is limited to ~4 PiB ( 2^52 - 16 ) per `nonce`-`key` pair.
 * That also limits `lengthSize` parameter maximum value to 7 (not 8 as described in RFC3610).
 *
 * Additional authenticated data `adata` maximum length is chosen to be no more than 65279 bytes ( 2^16 - 2^8 ),
 * which is considered enough for the most of use-cases.
 *
 * And one more important thing: in case of progressive ciphering of a data stream (in other
 * words when data can't be held in-memory at a whole and are ciphered chunk-by-chunk)
 * you have to know the `dataLength` in advance and pass that value to the cipher options.
 */


var _AES_CCM_adata_maxLength = 65279; // 2^16 - 2^8

var _AES_CCM_data_maxLength = 4503599627370480; // 2^52 - 2^4

var AES_CCM = /*#__PURE__*/function (_AES2) {
  _inherits(AES_CCM, _AES2);

  var _super5 = _createSuper(AES_CCM);

  function AES_CCM(key, nonce, adata) {
    var _this;

    var tagSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16;
    var dataLength = arguments.length > 4 ? arguments[4] : undefined;

    _classCallCheck(this, AES_CCM);

    _this = _super5.call(this, key, undefined, undefined, 'CCM');
    _this.counter = 1;
    _this.dataLength = -1; // Tag size

    if (tagSize < 4 || tagSize > 16 || tagSize & 1) throw new IllegalArgumentError('illegal tagSize value');
    _this.tagSize = tagSize; // Nonce

    _this.nonce = nonce;
    if (nonce.length < 8 || nonce.length > 13) throw new IllegalArgumentError('illegal nonce length');
    _this.lengthSize = 15 - nonce.length;
    nonce = new Uint8Array(nonce.length + 1);
    nonce[0] = _this.lengthSize - 1;
    nonce.set(_this.nonce, 1);
    if (dataLength < 0 || dataLength > _AES_CCM_data_maxLength || dataLength > Math.pow(2, 8 * _this.lengthSize) - 16) throw new IllegalArgumentError('illegal dataLength value');

    if (adata !== undefined) {
      if (adata.length > _AES_CCM_adata_maxLength) throw new IllegalArgumentError('illegal adata length');
      _this.adata = adata.length ? adata : undefined;
    }

    _this.dataLength = dataLength;
    _this.counter = 1;

    _this.AES_CCM_calculate_iv();

    _this.AES_CTR_set_options(nonce, _this.counter, 8 * _this.lengthSize);

    return _this;
  }

  _createClass(AES_CCM, [{
    key: "encrypt",
    value: function encrypt(data) {
      this.dataLength = data.length || 0;
      var result1 = this.AES_CCM_Encrypt_process(data);
      var result2 = this.AES_CCM_Encrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      this.dataLength = data.length || 0;
      var result1 = this.AES_CCM_Decrypt_process(data);
      var result2 = this.AES_CCM_Decrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "AES_CCM_calculate_iv",
    value: function AES_CCM_calculate_iv() {
      var nonce = this.nonce;
      var adata = this.adata;
      var tagSize = this.tagSize;
      var lengthSize = this.lengthSize;
      var dataLength = this.dataLength;
      var data = new Uint8Array(16 + (adata ? 2 + adata.length : 0)); // B0: flags(adata?, M', L'), nonce, len(data)

      data[0] = (adata ? 64 : 0) | tagSize - 2 << 2 | lengthSize - 1;
      data.set(nonce, 1);
      if (lengthSize > 6) data[9] = dataLength / 0x100000000 >>> 16 & 15;
      if (lengthSize > 5) data[10] = dataLength / 0x100000000 >>> 8 & 255;
      if (lengthSize > 4) data[11] = dataLength / 0x100000000 & 255;
      if (lengthSize > 3) data[12] = dataLength >>> 24;
      if (lengthSize > 2) data[13] = dataLength >>> 16 & 255;
      data[14] = dataLength >>> 8 & 255;
      data[15] = dataLength & 255; // B*: len(adata), adata

      if (adata) {
        data[16] = adata.length >>> 8 & 255;
        data[17] = adata.length & 255;
        data.set(adata, 18);
      }

      this._cbc_mac_process(data);

      this.asm.get_state(AES_asm.HEAP_DATA);
      var iv = new Uint8Array(this.heap.subarray(0, 16));
      var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);
      this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));
    }
  }, {
    key: "_cbc_mac_process",
    value: function _cbc_mac_process(data) {
      var heap = this.heap;
      var asm = this.asm;
      var dpos = 0;
      var dlen = data.length || 0;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, 0, data, dpos, dlen);

        while (wlen & 15) {
          heap[wlen++] = 0;
        }

        dpos += wlen;
        dlen -= wlen;
        asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA, wlen);
      }
    }
  }, {
    key: "AES_CCM_Encrypt_process",
    value: function AES_CCM_Encrypt_process(data) {
      var asm = this.asm;
      var heap = this.heap;
      var dpos = 0;
      var dlen = data.length || 0;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rlen = len + dlen & -16;
      var rpos = 0;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_CCM_data_maxLength) // ??? should check against lengthSize
        throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, len);
        wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_CCM_Encrypt_finish",
    value: function AES_CCM_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var result = new Uint8Array(len + tagSize);
      var i = len;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, i);
      if (len) result.set(heap.subarray(pos, pos + len));
      asm.set_counter(0, 0, 0, 0);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      result.set(heap.subarray(0, tagSize), len);
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_CCM_Decrypt_process",
    value: function AES_CCM_Decrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen > tagSize ? len + dlen - tagSize & -16 : 0;
      var tlen = len + dlen - rlen;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_CCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > tlen) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;
        pos = 0;
        len = 0;
      }

      if (dlen > 0) {
        len += _heap_write(heap, 0, data, dpos, dlen);
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_CCM_Decrypt_finish",
    value: function AES_CCM_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rlen = len - tagSize;
      if (len < tagSize) throw new IllegalStateError('authentication tag not found');
      var result = new Uint8Array(rlen);
      var atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
      asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, rlen + 15 & -16);
      result.set(heap.subarray(pos, pos + rlen));
      var i = rlen;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
      asm.set_counter(0, 0, 0, 0);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      var acheck = 0;

      for (var j = 0; j < tagSize; ++j) {
        acheck |= atag[j] ^ heap[j];
      }

      if (acheck) throw new SecurityError('data integrity check failed');
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_CTR_set_options",
    value: function AES_CTR_set_options(nonce, counter, size) {
      if (size < 8 || size > 48) throw new IllegalArgumentError('illegal counter size');
      var mask = Math.pow(2, size) - 1;
      this.asm.set_mask(0, 0, mask / 0x100000000 | 0, mask | 0);
      var len = nonce.length;
      if (!len || len > 16) throw new IllegalArgumentError('illegal nonce size');
      this.nonce = nonce;
      var view = new DataView(new ArrayBuffer(16));
      new Uint8Array(view.buffer).set(nonce);
      this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));
      if (counter < 0 || counter >= Math.pow(2, size)) throw new IllegalArgumentError('illegal counter value');
      this.counter = counter;
      this.asm.set_counter(0, 0, counter / 0x100000000 | 0, counter | 0);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(clear, key, nonce, adata) {
      var tagsize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 16;
      return new AES_CCM(key, nonce, adata, tagsize, clear.length).encrypt(clear);
    }
  }, {
    key: "decrypt",
    value: function decrypt(cipher, key, nonce, adata) {
      var tagsize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 16;
      return new AES_CCM(key, nonce, adata, tagsize, cipher.length - tagsize).decrypt(cipher);
    }
  }]);

  return AES_CCM;
}(AES);

var AES_CFB = /*#__PURE__*/function (_AES3) {
  _inherits(AES_CFB, _AES3);

  var _super6 = _createSuper(AES_CFB);

  function AES_CFB(key, iv) {
    var _this2;

    _classCallCheck(this, AES_CFB);

    _this2 = _super6.call(this, key, iv, true, 'CFB');
    delete _this2.padding;
    return _this2;
  }

  _createClass(AES_CFB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(data, key, iv) {
      return new AES_CFB(key, iv).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, iv) {
      return new AES_CFB(key, iv).decrypt(data);
    }
  }]);

  return AES_CFB;
}(AES);

var AES_ECB = /*#__PURE__*/function (_AES4) {
  _inherits(AES_ECB, _AES4);

  var _super7 = _createSuper(AES_ECB);

  function AES_ECB(key) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, AES_ECB);

    return _super7.call(this, key, undefined, padding, 'ECB');
  }

  _createClass(AES_ECB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new AES_ECB(key, padding).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new AES_ECB(key, padding).decrypt(data);
    }
  }]);

  return AES_ECB;
}(AES);

function mul2(data) {
  var t = data[0] & 0x80;

  for (var i = 0; i < 15; i++) {
    data[i] = data[i] << 1 ^ (data[i + 1] & 0x80 ? 1 : 0);
  }

  data[15] = data[15] << 1 ^ (t ? 0x87 : 0);
}

var AES_CMAC = /*#__PURE__*/function () {
  function AES_CMAC(key) {
    _classCallCheck(this, AES_CMAC);

    this.bufferLength = 0;
    this.k = new AES_ECB(key).encrypt(new Uint8Array(16));
    mul2(this.k);
    this.cbc = new AES_CBC(key, new Uint8Array(16), false);
    this.buffer = new Uint8Array(16);
    this.result = null;
  }

  _createClass(AES_CMAC, [{
    key: "process",
    value: function process(data) {
      if (this.bufferLength + data.length > 16) {
        this.cbc.encrypt(this.buffer.subarray(0, this.bufferLength));
        var offset = (this.bufferLength + data.length - 1 & ~15) - this.bufferLength;
        this.cbc.encrypt(data.subarray(0, offset));
        this.buffer.set(data.subarray(offset));
        this.bufferLength = data.length - offset;
      } else {
        this.buffer.set(data, this.bufferLength);
        this.bufferLength += data.length;
      }

      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.bufferLength !== 16) {
        this.buffer[this.bufferLength] = 0x80;

        for (var i = this.bufferLength + 1; i < 16; i++) {
          this.buffer[i] = 0;
        }

        mul2(this.k);
      }

      for (var _i = 0; _i < 16; _i++) {
        this.buffer[_i] ^= this.k[_i];
      }

      this.result = this.cbc.encrypt(this.buffer);
      return this;
    }
  }], [{
    key: "bytes",
    value: function bytes(data, key) {
      return new AES_CMAC(key).process(data).finish().result;
    }
  }]);

  return AES_CMAC;
}();

var AES_CTR = /*#__PURE__*/function (_AES5) {
  _inherits(AES_CTR, _AES5);

  var _super8 = _createSuper(AES_CTR);

  function AES_CTR(key, nonce) {
    var _this3;

    _classCallCheck(this, AES_CTR);

    _this3 = _super8.call(this, key, undefined, false, 'CTR');
    delete _this3.padding;

    _this3.AES_CTR_set_options(nonce);

    return _this3;
  }

  _createClass(AES_CTR, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "AES_CTR_set_options",
    value: function AES_CTR_set_options(nonce, counter, size) {
      if (size !== undefined) {
        if (size < 8 || size > 48) throw new IllegalArgumentError('illegal counter size');
        var mask = Math.pow(2, size) - 1;
        this.asm.set_mask(0, 0, mask / 0x100000000 | 0, mask | 0);
      } else {
        size = 48;
        this.asm.set_mask(0, 0, 0xffff, 0xffffffff);
      }

      if (nonce !== undefined) {
        var len = nonce.length;
        if (!len || len > 16) throw new IllegalArgumentError('illegal nonce size');
        var view = new DataView(new ArrayBuffer(16));
        new Uint8Array(view.buffer).set(nonce);
        this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));
      } else {
        throw new Error('nonce is required');
      }

      if (counter !== undefined) {
        if (counter < 0 || counter >= Math.pow(2, size)) throw new IllegalArgumentError('illegal counter value');
        this.asm.set_counter(0, 0, counter / 0x100000000 | 0, counter | 0);
      }
    }
  }], [{
    key: "encrypt",
    value: function encrypt(data, key, nonce) {
      return new AES_CTR(key, nonce).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, nonce) {
      return new AES_CTR(key, nonce).encrypt(data);
    }
  }]);

  return AES_CTR;
}(AES);

var _AES_GCM_data_maxLength = 68719476704; // 2^36 - 2^5

var AES_GCM = /*#__PURE__*/function (_AES6) {
  _inherits(AES_GCM, _AES6);

  var _super9 = _createSuper(AES_GCM);

  function AES_GCM(key, nonce, adata) {
    var _this4;

    var tagSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16;

    _classCallCheck(this, AES_GCM);

    _this4 = _super9.call(this, key, undefined, false, 'CTR');
    _this4.tagSize = tagSize;
    _this4.gamma0 = 0;
    _this4.counter = 1; // Init GCM

    _this4.asm.gcm_init(); // Tag size


    if (_this4.tagSize < 4 || _this4.tagSize > 16) throw new IllegalArgumentError('illegal tagSize value'); // Nonce

    var noncelen = nonce.length || 0;
    var noncebuf = new Uint8Array(16);

    if (noncelen !== 12) {
      _this4._gcm_mac_process(nonce);

      _this4.heap[0] = 0;
      _this4.heap[1] = 0;
      _this4.heap[2] = 0;
      _this4.heap[3] = 0;
      _this4.heap[4] = 0;
      _this4.heap[5] = 0;
      _this4.heap[6] = 0;
      _this4.heap[7] = 0;
      _this4.heap[8] = 0;
      _this4.heap[9] = 0;
      _this4.heap[10] = 0;
      _this4.heap[11] = noncelen >>> 29;
      _this4.heap[12] = noncelen >>> 21 & 255;
      _this4.heap[13] = noncelen >>> 13 & 255;
      _this4.heap[14] = noncelen >>> 5 & 255;
      _this4.heap[15] = noncelen << 3 & 255;

      _this4.asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);

      _this4.asm.get_iv(AES_asm.HEAP_DATA);

      _this4.asm.set_iv(0, 0, 0, 0);

      noncebuf.set(_this4.heap.subarray(0, 16));
    } else {
      noncebuf.set(nonce);
      noncebuf[15] = 1;
    }

    var nonceview = new DataView(noncebuf.buffer);
    _this4.gamma0 = nonceview.getUint32(12);

    _this4.asm.set_nonce(nonceview.getUint32(0), nonceview.getUint32(4), nonceview.getUint32(8), 0);

    _this4.asm.set_mask(0, 0, 0, 0xffffffff); // Associated data


    if (adata !== undefined) {
      if (adata.length > _AES_GCM_data_maxLength) throw new IllegalArgumentError('illegal adata length');

      if (adata.length) {
        _this4.adata = adata;

        _this4._gcm_mac_process(adata);
      } else {
        _this4.adata = undefined;
      }
    } else {
      _this4.adata = undefined;
    } // Counter


    if (_this4.counter < 1 || _this4.counter > 0xffffffff) throw new RangeError('counter must be a positive 32-bit integer');

    _this4.asm.set_counter(0, 0, 0, _this4.gamma0 + _this4.counter | 0);

    return _this4;
  }

  _createClass(AES_GCM, [{
    key: "encrypt",
    value: function encrypt(data) {
      return this.AES_GCM_encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      return this.AES_GCM_decrypt(data);
    }
  }, {
    key: "AES_GCM_Encrypt_process",
    value: function AES_GCM_Encrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len);
        wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_GCM_Encrypt_finish",
    value: function AES_GCM_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var adata = this.adata;
      var pos = this.pos;
      var len = this.len;
      var result = new Uint8Array(len + tagSize);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len + 15 & -16);
      if (len) result.set(heap.subarray(pos, pos + len));
      var i = len;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
      var alen = adata !== undefined ? adata.length : 0;
      var clen = (counter - 1 << 4) + len;
      heap[0] = 0;
      heap[1] = 0;
      heap[2] = 0;
      heap[3] = alen >>> 29;
      heap[4] = alen >>> 21;
      heap[5] = alen >>> 13 & 255;
      heap[6] = alen >>> 5 & 255;
      heap[7] = alen << 3 & 255;
      heap[8] = heap[9] = heap[10] = 0;
      heap[11] = clen >>> 29;
      heap[12] = clen >>> 21 & 255;
      heap[13] = clen >>> 13 & 255;
      heap[14] = clen >>> 5 & 255;
      heap[15] = clen << 3 & 255;
      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.set_counter(0, 0, 0, this.gamma0);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      result.set(heap.subarray(0, tagSize), len);
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_GCM_Decrypt_process",
    value: function AES_GCM_Decrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen > tagSize ? len + dlen - tagSize & -16 : 0;
      var tlen = len + dlen - rlen;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > tlen) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
        wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;
        pos = 0;
        len = 0;
      }

      if (dlen > 0) {
        len += _heap_write(heap, 0, data, dpos, dlen);
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_GCM_Decrypt_finish",
    value: function AES_GCM_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var adata = this.adata;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rlen = len - tagSize;
      if (len < tagSize) throw new IllegalStateError('authentication tag not found');
      var result = new Uint8Array(rlen);
      var atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
      var i = rlen;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
      asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, i);
      if (rlen) result.set(heap.subarray(pos, pos + rlen));
      var alen = adata !== undefined ? adata.length : 0;
      var clen = (counter - 1 << 4) + len - tagSize;
      heap[0] = 0;
      heap[1] = 0;
      heap[2] = 0;
      heap[3] = alen >>> 29;
      heap[4] = alen >>> 21;
      heap[5] = alen >>> 13 & 255;
      heap[6] = alen >>> 5 & 255;
      heap[7] = alen << 3 & 255;
      heap[8] = heap[9] = heap[10] = 0;
      heap[11] = clen >>> 29;
      heap[12] = clen >>> 21 & 255;
      heap[13] = clen >>> 13 & 255;
      heap[14] = clen >>> 5 & 255;
      heap[15] = clen << 3 & 255;
      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.set_counter(0, 0, 0, this.gamma0);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      var acheck = 0;

      for (var _i2 = 0; _i2 < tagSize; ++_i2) {
        acheck |= atag[_i2] ^ heap[_i2];
      }

      if (acheck) throw new SecurityError('data integrity check failed');
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_GCM_decrypt",
    value: function AES_GCM_decrypt(data) {
      var result1 = this.AES_GCM_Decrypt_process(data);
      var result2 = this.AES_GCM_Decrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "AES_GCM_encrypt",
    value: function AES_GCM_encrypt(data) {
      var result1 = this.AES_GCM_Encrypt_process(data);
      var result2 = this.AES_GCM_Encrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "_gcm_mac_process",
    value: function _gcm_mac_process(data) {
      var heap = this.heap;
      var asm = this.asm;
      var dpos = 0;
      var dlen = data.length || 0;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, 0, data, dpos, dlen);
        dpos += wlen;
        dlen -= wlen;

        while (wlen & 15) {
          heap[wlen++] = 0;
        }

        asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, wlen);
      }
    }
  }], [{
    key: "encrypt",
    value: function encrypt(cleartext, key, nonce, adata, tagsize) {
      return new AES_GCM(key, nonce, adata, tagsize).encrypt(cleartext);
    }
  }, {
    key: "decrypt",
    value: function decrypt(ciphertext, key, nonce, adata, tagsize) {
      return new AES_GCM(key, nonce, adata, tagsize).decrypt(ciphertext);
    }
  }]);

  return AES_GCM;
}(AES);

var AES_OFB = /*#__PURE__*/function (_AES7) {
  _inherits(AES_OFB, _AES7);

  var _super10 = _createSuper(AES_OFB);

  function AES_OFB(key, iv) {
    _classCallCheck(this, AES_OFB);

    return _super10.call(this, key, iv, false, 'OFB');
  }

  _createClass(AES_OFB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(data, key, iv) {
      return new AES_OFB(key, iv).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, iv) {
      return new AES_OFB(key, iv).decrypt(data);
    }
  }]);

  return AES_OFB;
}(AES);
/**
 * Integers are represented as little endian array of 32-bit limbs.
 * Limbs number is a power of 2 and a multiple of 8 (256 bits).
 * Negative values use two's complement representation.
 */


var bigint_asm = function bigint_asm(stdlib, foreign, buffer) {
  "use asm";

  var SP = 0;
  var HEAP32 = new stdlib.Uint32Array(buffer);
  var imul = stdlib.Math.imul;
  /**
   * Simple stack memory allocator
   *
   * Methods:
   *  sreset
   *  salloc
   *  sfree
   */

  function sreset(p) {
    p = p | 0;
    SP = p = p + 31 & -32;
    return p | 0;
  }

  function salloc(l) {
    l = l | 0;
    var p = 0;
    p = SP;
    SP = p + (l + 31 & -32) | 0;
    return p | 0;
  }

  function sfree(l) {
    l = l | 0;
    SP = SP - (l + 31 & -32) | 0;
  }
  /**
   * Utility functions:
   *  cp
   *  z
   */


  function cp(l, A, B) {
    l = l | 0;
    A = A | 0;
    B = B | 0;
    var i = 0;

    if ((A | 0) > (B | 0)) {
      for (; (i | 0) < (l | 0); i = i + 4 | 0) {
        HEAP32[B + i >> 2] = HEAP32[A + i >> 2];
      }
    } else {
      for (i = l - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        HEAP32[B + i >> 2] = HEAP32[A + i >> 2];
      }
    }
  }

  function z(l, z, A) {
    l = l | 0;
    z = z | 0;
    A = A | 0;
    var i = 0;

    for (; (i | 0) < (l | 0); i = i + 4 | 0) {
      HEAP32[A + i >> 2] = z;
    }
  }
  /**
   * Negate the argument
   *
   * Perform two's complement transformation:
   *
   *  -A = ~A + 1
   *
   * @param A offset of the argment being negated, 32-byte aligned
   * @param lA length of the argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function neg(A, lA, R, lR) {
    A = A | 0;
    lA = lA | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;
    if ((lR | 0) <= 0) lR = lA;
    if ((lR | 0) < (lA | 0)) lA = lR;
    c = 1;

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      a = ~HEAP32[A + i >> 2];
      t = (a & 0xffff) + c | 0;
      r = (a >>> 16) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = r << 16 | t & 0xffff;
      c = r >>> 16;
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c - 1 | 0;
    }

    return c | 0;
  }

  function cmp(A, lA, B, lB) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    var a = 0,
        b = 0,
        i = 0;

    if ((lA | 0) > (lB | 0)) {
      for (i = lA - 4 | 0; (i | 0) >= (lB | 0); i = i - 4 | 0) {
        if (HEAP32[A + i >> 2] | 0) return 1;
      }
    } else {
      for (i = lB - 4 | 0; (i | 0) >= (lA | 0); i = i - 4 | 0) {
        if (HEAP32[B + i >> 2] | 0) return -1;
      }
    }

    for (; (i | 0) >= 0; i = i - 4 | 0) {
      a = HEAP32[A + i >> 2] | 0, b = HEAP32[B + i >> 2] | 0;
      if (a >>> 0 < b >>> 0) return -1;
      if (a >>> 0 > b >>> 0) return 1;
    }

    return 0;
  }
  /**
   * Test the argument
   *
   * Same as `cmp` with zero.
   */


  function tst(A, lA) {
    A = A | 0;
    lA = lA | 0;
    var i = 0;

    for (i = lA - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
      if (HEAP32[A + i >> 2] | 0) return i + 4 | 0;
    }

    return 0;
  }
  /**
   * Conventional addition
   *
   * @param A offset of the first argument, 32-byte aligned
   * @param lA length of the first argument, multiple of 32
   *
   * @param B offset of the second argument, 32-bit aligned
   * @param lB length of the second argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function add(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        b = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;

    if ((lA | 0) < (lB | 0)) {
      t = A, A = B, B = t;
      t = lA, lA = lB, lB = t;
    }

    if ((lR | 0) <= 0) lR = lA + 4 | 0;
    if ((lR | 0) < (lB | 0)) lA = lB = lR;

    for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
      a = HEAP32[A + i >> 2] | 0;
      b = HEAP32[B + i >> 2] | 0;
      t = ((a & 0xffff) + (b & 0xffff) | 0) + c | 0;
      r = ((a >>> 16) + (b >>> 16) | 0) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = t & 0xffff | r << 16;
      c = r >>> 16;
    }

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      a = HEAP32[A + i >> 2] | 0;
      t = (a & 0xffff) + c | 0;
      r = (a >>> 16) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = t & 0xffff | r << 16;
      c = r >>> 16;
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c | 0;
      c = 0;
    }

    return c | 0;
  }
  /**
    * Conventional subtraction
    *
    * @param A offset of the first argument, 32-byte aligned
    * @param lA length of the first argument, multiple of 32
    *
    * @param B offset of the second argument, 32-bit aligned
    * @param lB length of the second argument, multiple of 32
    *
    * @param R offset where to place the result to, 32-byte aligned
    * @param lR length to truncate the result to, multiple of 32
    */


  function sub(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        b = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;
    if ((lR | 0) <= 0) lR = (lA | 0) > (lB | 0) ? lA + 4 | 0 : lB + 4 | 0;
    if ((lR | 0) < (lA | 0)) lA = lR;
    if ((lR | 0) < (lB | 0)) lB = lR;

    if ((lA | 0) < (lB | 0)) {
      for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        b = HEAP32[B + i >> 2] | 0;
        t = ((a & 0xffff) - (b & 0xffff) | 0) + c | 0;
        r = ((a >>> 16) - (b >>> 16) | 0) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }

      for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
        b = HEAP32[B + i >> 2] | 0;
        t = c - (b & 0xffff) | 0;
        r = (t >> 16) - (b >>> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }
    } else {
      for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        b = HEAP32[B + i >> 2] | 0;
        t = ((a & 0xffff) - (b & 0xffff) | 0) + c | 0;
        r = ((a >>> 16) - (b >>> 16) | 0) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }

      for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        t = (a & 0xffff) + c | 0;
        r = (a >>> 16) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c | 0;
    }

    return c | 0;
  }
  /**
   * Conventional multiplication
   *
   * TODO implement Karatsuba algorithm for large multiplicands
   *
   * @param A offset of the first argument, 32-byte aligned
   * @param lA length of the first argument, multiple of 32
   *
   * @param B offset of the second argument, 32-byte aligned
   * @param lB length of the second argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function mul(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var al0 = 0,
        al1 = 0,
        al2 = 0,
        al3 = 0,
        al4 = 0,
        al5 = 0,
        al6 = 0,
        al7 = 0,
        ah0 = 0,
        ah1 = 0,
        ah2 = 0,
        ah3 = 0,
        ah4 = 0,
        ah5 = 0,
        ah6 = 0,
        ah7 = 0,
        bl0 = 0,
        bl1 = 0,
        bl2 = 0,
        bl3 = 0,
        bl4 = 0,
        bl5 = 0,
        bl6 = 0,
        bl7 = 0,
        bh0 = 0,
        bh1 = 0,
        bh2 = 0,
        bh3 = 0,
        bh4 = 0,
        bh5 = 0,
        bh6 = 0,
        bh7 = 0,
        r0 = 0,
        r1 = 0,
        r2 = 0,
        r3 = 0,
        r4 = 0,
        r5 = 0,
        r6 = 0,
        r7 = 0,
        r8 = 0,
        r9 = 0,
        r10 = 0,
        r11 = 0,
        r12 = 0,
        r13 = 0,
        r14 = 0,
        r15 = 0,
        u = 0,
        v = 0,
        w = 0,
        m = 0,
        i = 0,
        Ai = 0,
        j = 0,
        Bj = 0,
        Rk = 0;

    if ((lA | 0) > (lB | 0)) {
      u = A, v = lA;
      A = B, lA = lB;
      B = u, lB = v;
    }

    m = lA + lB | 0;
    if ((lR | 0) > (m | 0) | (lR | 0) <= 0) lR = m;
    if ((lR | 0) < (lA | 0)) lA = lR;
    if ((lR | 0) < (lB | 0)) lB = lR;

    for (; (i | 0) < (lA | 0); i = i + 32 | 0) {
      Ai = A + i | 0;
      ah0 = HEAP32[(Ai | 0) >> 2] | 0, ah1 = HEAP32[(Ai | 4) >> 2] | 0, ah2 = HEAP32[(Ai | 8) >> 2] | 0, ah3 = HEAP32[(Ai | 12) >> 2] | 0, ah4 = HEAP32[(Ai | 16) >> 2] | 0, ah5 = HEAP32[(Ai | 20) >> 2] | 0, ah6 = HEAP32[(Ai | 24) >> 2] | 0, ah7 = HEAP32[(Ai | 28) >> 2] | 0, al0 = ah0 & 0xffff, al1 = ah1 & 0xffff, al2 = ah2 & 0xffff, al3 = ah3 & 0xffff, al4 = ah4 & 0xffff, al5 = ah5 & 0xffff, al6 = ah6 & 0xffff, al7 = ah7 & 0xffff, ah0 = ah0 >>> 16, ah1 = ah1 >>> 16, ah2 = ah2 >>> 16, ah3 = ah3 >>> 16, ah4 = ah4 >>> 16, ah5 = ah5 >>> 16, ah6 = ah6 >>> 16, ah7 = ah7 >>> 16;
      r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0;

      for (j = 0; (j | 0) < (lB | 0); j = j + 32 | 0) {
        Bj = B + j | 0;
        Rk = R + (i + j | 0) | 0;
        bh0 = HEAP32[(Bj | 0) >> 2] | 0, bh1 = HEAP32[(Bj | 4) >> 2] | 0, bh2 = HEAP32[(Bj | 8) >> 2] | 0, bh3 = HEAP32[(Bj | 12) >> 2] | 0, bh4 = HEAP32[(Bj | 16) >> 2] | 0, bh5 = HEAP32[(Bj | 20) >> 2] | 0, bh6 = HEAP32[(Bj | 24) >> 2] | 0, bh7 = HEAP32[(Bj | 28) >> 2] | 0, bl0 = bh0 & 0xffff, bl1 = bh1 & 0xffff, bl2 = bh2 & 0xffff, bl3 = bh3 & 0xffff, bl4 = bh4 & 0xffff, bl5 = bh5 & 0xffff, bl6 = bh6 & 0xffff, bl7 = bh7 & 0xffff, bh0 = bh0 >>> 16, bh1 = bh1 >>> 16, bh2 = bh2 >>> 16, bh3 = bh3 >>> 16, bh4 = bh4 >>> 16, bh5 = bh5 >>> 16, bh6 = bh6 >>> 16, bh7 = bh7 >>> 16;
        r0 = HEAP32[(Rk | 0) >> 2] | 0, r1 = HEAP32[(Rk | 4) >> 2] | 0, r2 = HEAP32[(Rk | 8) >> 2] | 0, r3 = HEAP32[(Rk | 12) >> 2] | 0, r4 = HEAP32[(Rk | 16) >> 2] | 0, r5 = HEAP32[(Rk | 20) >> 2] | 0, r6 = HEAP32[(Rk | 24) >> 2] | 0, r7 = HEAP32[(Rk | 28) >> 2] | 0;
        u = ((imul(al0, bl0) | 0) + (r8 & 0xffff) | 0) + (r0 & 0xffff) | 0;
        v = ((imul(ah0, bl0) | 0) + (r8 >>> 16) | 0) + (r0 >>> 16) | 0;
        w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r0 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl1) | 0) + (m & 0xffff) | 0) + (r1 & 0xffff) | 0;
        v = ((imul(ah0, bl1) | 0) + (m >>> 16) | 0) + (r1 >>> 16) | 0;
        w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r1 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl2) | 0) + (m & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah0, bl2) | 0) + (m >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl3) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah0, bl3) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl4) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah0, bl4) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al0, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl5) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah0, bl5) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al0, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl6) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah0, bl6) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al0, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl7) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah0, bl7) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al0, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        r8 = m;
        u = ((imul(al1, bl0) | 0) + (r9 & 0xffff) | 0) + (r1 & 0xffff) | 0;
        v = ((imul(ah1, bl0) | 0) + (r9 >>> 16) | 0) + (r1 >>> 16) | 0;
        w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r1 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl1) | 0) + (m & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah1, bl1) | 0) + (m >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl2) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah1, bl2) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl3) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah1, bl3) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl4) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah1, bl4) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al1, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl5) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah1, bl5) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al1, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl6) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah1, bl6) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al1, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl7) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah1, bl7) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al1, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        r9 = m;
        u = ((imul(al2, bl0) | 0) + (r10 & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah2, bl0) | 0) + (r10 >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl1) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah2, bl1) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl2) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah2, bl2) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl3) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah2, bl3) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl4) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah2, bl4) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al2, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl5) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah2, bl5) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al2, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl6) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah2, bl6) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al2, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl7) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah2, bl7) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al2, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        r10 = m;
        u = ((imul(al3, bl0) | 0) + (r11 & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah3, bl0) | 0) + (r11 >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl1) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah3, bl1) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl2) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah3, bl2) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl3) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah3, bl3) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl4) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah3, bl4) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al3, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl5) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah3, bl5) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al3, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl6) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah3, bl6) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al3, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl7) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah3, bl7) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al3, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        r11 = m;
        u = ((imul(al4, bl0) | 0) + (r12 & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah4, bl0) | 0) + (r12 >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al4, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl1) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah4, bl1) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al4, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl2) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah4, bl2) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al4, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl3) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah4, bl3) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al4, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl4) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah4, bl4) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al4, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl5) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah4, bl5) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al4, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl6) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah4, bl6) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al4, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl7) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah4, bl7) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al4, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        r12 = m;
        u = ((imul(al5, bl0) | 0) + (r13 & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah5, bl0) | 0) + (r13 >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al5, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl1) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah5, bl1) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al5, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl2) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah5, bl2) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al5, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl3) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah5, bl3) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al5, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl4) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah5, bl4) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al5, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl5) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah5, bl5) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al5, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl6) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah5, bl6) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al5, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl7) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah5, bl7) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al5, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        r13 = m;
        u = ((imul(al6, bl0) | 0) + (r14 & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah6, bl0) | 0) + (r14 >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al6, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl1) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah6, bl1) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al6, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl2) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah6, bl2) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al6, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl3) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah6, bl3) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al6, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl4) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah6, bl4) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al6, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl5) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah6, bl5) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al6, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl6) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah6, bl6) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al6, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl7) | 0) + (m & 0xffff) | 0) + (r13 & 0xffff) | 0;
        v = ((imul(ah6, bl7) | 0) + (m >>> 16) | 0) + (r13 >>> 16) | 0;
        w = ((imul(al6, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r13 = w << 16 | u & 0xffff;
        r14 = m;
        u = ((imul(al7, bl0) | 0) + (r15 & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah7, bl0) | 0) + (r15 >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al7, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl1) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah7, bl1) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al7, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl2) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah7, bl2) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al7, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl3) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah7, bl3) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al7, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl4) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah7, bl4) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al7, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl5) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah7, bl5) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al7, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl6) | 0) + (m & 0xffff) | 0) + (r13 & 0xffff) | 0;
        v = ((imul(ah7, bl6) | 0) + (m >>> 16) | 0) + (r13 >>> 16) | 0;
        w = ((imul(al7, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r13 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl7) | 0) + (m & 0xffff) | 0) + (r14 & 0xffff) | 0;
        v = ((imul(ah7, bl7) | 0) + (m >>> 16) | 0) + (r14 >>> 16) | 0;
        w = ((imul(al7, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r14 = w << 16 | u & 0xffff;
        r15 = m;
        HEAP32[(Rk | 0) >> 2] = r0, HEAP32[(Rk | 4) >> 2] = r1, HEAP32[(Rk | 8) >> 2] = r2, HEAP32[(Rk | 12) >> 2] = r3, HEAP32[(Rk | 16) >> 2] = r4, HEAP32[(Rk | 20) >> 2] = r5, HEAP32[(Rk | 24) >> 2] = r6, HEAP32[(Rk | 28) >> 2] = r7;
      }

      Rk = R + (i + j | 0) | 0;
      HEAP32[(Rk | 0) >> 2] = r8, HEAP32[(Rk | 4) >> 2] = r9, HEAP32[(Rk | 8) >> 2] = r10, HEAP32[(Rk | 12) >> 2] = r11, HEAP32[(Rk | 16) >> 2] = r12, HEAP32[(Rk | 20) >> 2] = r13, HEAP32[(Rk | 24) >> 2] = r14, HEAP32[(Rk | 28) >> 2] = r15;
    }
    /*
            for ( i = lA & -32; (i|0) < (lA|0); i = (i+4)|0 ) {
                Ai = (A+i)|0;
    
                ah0 = HEAP32[Ai>>2]|0,
                al0 = ah0 & 0xffff,
                ah0 = ah0 >>> 16;
    
                r1 = 0;
    
                for ( j = 0; (j|0) < (lB|0); j = (j+4)|0 ) {
                    Bj = (B+j)|0;
                    Rk = (R+(i+j|0))|0;
    
                    bh0 = HEAP32[Bj>>2]|0,
                    bl0 = bh0 & 0xffff,
                    bh0 = bh0 >>> 16;
    
                    r0 = HEAP32[Rk>>2]|0;
    
                    u = ((imul(al0, bl0)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;
                    v = ((imul(ah0, bl0)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;
                    w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;
                    m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;
                    r0 = (w << 16) | (u & 0xffff);
    
                    r1 = m;
    
                    HEAP32[Rk>>2] = r0;
                }
    
                Rk = (R+(i+j|0))|0;
                HEAP32[Rk>>2] = r1;
            }
    */

  }
  /**
   * Fast squaring
   *
   * Exploits the fact:
   *
   *  X² = ( X0 + X1*B )² = X0² + 2*X0*X1*B + X1²*B²,
   *
   * where B is a power of 2, so:
   *
   *  2*X0*X1*B = (X0*X1 << 1)*B
   *
   * @param A offset of the argument being squared, 32-byte aligned
   * @param lA length of the argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   */


  function sqr(A, lA, R) {
    A = A | 0;
    lA = lA | 0;
    R = R | 0;
    var al0 = 0,
        al1 = 0,
        al2 = 0,
        al3 = 0,
        al4 = 0,
        al5 = 0,
        al6 = 0,
        al7 = 0,
        ah0 = 0,
        ah1 = 0,
        ah2 = 0,
        ah3 = 0,
        ah4 = 0,
        ah5 = 0,
        ah6 = 0,
        ah7 = 0,
        bl0 = 0,
        bl1 = 0,
        bl2 = 0,
        bl3 = 0,
        bl4 = 0,
        bl5 = 0,
        bl6 = 0,
        bl7 = 0,
        bh0 = 0,
        bh1 = 0,
        bh2 = 0,
        bh3 = 0,
        bh4 = 0,
        bh5 = 0,
        bh6 = 0,
        bh7 = 0,
        r0 = 0,
        r1 = 0,
        r2 = 0,
        r3 = 0,
        r4 = 0,
        r5 = 0,
        r6 = 0,
        r7 = 0,
        r8 = 0,
        r9 = 0,
        r10 = 0,
        r11 = 0,
        r12 = 0,
        r13 = 0,
        r14 = 0,
        r15 = 0,
        u = 0,
        v = 0,
        w = 0,
        c = 0,
        h = 0,
        m = 0,
        r = 0,
        d = 0,
        dd = 0,
        p = 0,
        i = 0,
        j = 0,
        k = 0,
        Ai = 0,
        Aj = 0,
        Rk = 0; // prepare for iterations

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      Rk = R + (i << 1) | 0;
      ah0 = HEAP32[A + i >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;
      u = imul(al0, al0) | 0;
      v = (imul(al0, ah0) | 0) + (u >>> 17) | 0;
      w = (imul(ah0, ah0) | 0) + (v >>> 15) | 0;
      HEAP32[Rk >> 2] = v << 17 | u & 0x1ffff;
      HEAP32[(Rk | 4) >> 2] = w;
    } // unrolled 1st iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 8 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;
      bh0 = HEAP32[(Ai | 4) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16;
      u = imul(al0, bl0) | 0;
      v = (imul(al0, bh0) | 0) + (u >>> 16) | 0;
      w = (imul(ah0, bl0) | 0) + (v & 0xffff) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r = HEAP32[(Rk | 4) >> 2] | 0;
      u = (r & 0xffff) + ((u & 0xffff) << 1) | 0;
      w = ((r >>> 16) + ((w & 0xffff) << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 4) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 8) >> 2] | 0;
      u = ((r & 0xffff) + ((m & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (m >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 8) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      if (c) {
        r = HEAP32[(Rk | 12) >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[(Rk | 12) >> 2] = w << 16 | u & 0xffff;
      }
    } // unrolled 2nd iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 16 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16;
      bh0 = HEAP32[(Ai | 8) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Ai | 12) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16;
      u = imul(al0, bl0) | 0;
      v = imul(ah0, bl0) | 0;
      w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r0 = w << 16 | u & 0xffff;
      u = (imul(al0, bl1) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl1) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      r2 = m;
      u = (imul(al1, bl0) | 0) + (r1 & 0xffff) | 0;
      v = (imul(ah1, bl0) | 0) + (r1 >>> 16) | 0;
      w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      r3 = m;
      r = HEAP32[(Rk | 8) >> 2] | 0;
      u = (r & 0xffff) + ((r0 & 0xffff) << 1) | 0;
      w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 8) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 12) >> 2] | 0;
      u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 12) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 16) >> 2] | 0;
      u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 16) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 20) >> 2] | 0;
      u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 20) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      for (k = 24; !!c & (k | 0) < 32; k = k + 4 | 0) {
        r = HEAP32[(Rk | k) >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[(Rk | k) >> 2] = w << 16 | u & 0xffff;
        c = w >>> 16;
      }
    } // unrolled 3rd iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 32 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16, ah2 = HEAP32[(Ai | 8) >> 2] | 0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16, ah3 = HEAP32[(Ai | 12) >> 2] | 0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16;
      bh0 = HEAP32[(Ai | 16) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Ai | 20) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16, bh2 = HEAP32[(Ai | 24) >> 2] | 0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16, bh3 = HEAP32[(Ai | 28) >> 2] | 0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16;
      u = imul(al0, bl0) | 0;
      v = imul(ah0, bl0) | 0;
      w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r0 = w << 16 | u & 0xffff;
      u = (imul(al0, bl1) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl1) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = (imul(al0, bl2) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl2) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = (imul(al0, bl3) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl3) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      r4 = m;
      u = (imul(al1, bl0) | 0) + (r1 & 0xffff) | 0;
      v = (imul(ah1, bl0) | 0) + (r1 >>> 16) | 0;
      w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl2) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl2) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl3) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl3) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      r5 = m;
      u = (imul(al2, bl0) | 0) + (r2 & 0xffff) | 0;
      v = (imul(ah2, bl0) | 0) + (r2 >>> 16) | 0;
      w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl1) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl1) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl2) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl2) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl3) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl3) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r5 = w << 16 | u & 0xffff;
      r6 = m;
      u = (imul(al3, bl0) | 0) + (r3 & 0xffff) | 0;
      v = (imul(ah3, bl0) | 0) + (r3 >>> 16) | 0;
      w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl1) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl1) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl2) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl2) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r5 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl3) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl3) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r6 = w << 16 | u & 0xffff;
      r7 = m;
      r = HEAP32[(Rk | 16) >> 2] | 0;
      u = (r & 0xffff) + ((r0 & 0xffff) << 1) | 0;
      w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 16) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 20) >> 2] | 0;
      u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 20) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 24) >> 2] | 0;
      u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 24) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 28) >> 2] | 0;
      u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 28) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 32 >> 2] | 0;
      u = ((r & 0xffff) + ((r4 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r4 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 32 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 36 >> 2] | 0;
      u = ((r & 0xffff) + ((r5 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r5 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 36 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 40 >> 2] | 0;
      u = ((r & 0xffff) + ((r6 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r6 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 40 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 44 >> 2] | 0;
      u = ((r & 0xffff) + ((r7 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r7 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 44 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      for (k = 48; !!c & (k | 0) < 64; k = k + 4 | 0) {
        r = HEAP32[Rk + k >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
        c = w >>> 16;
      }
    } // perform iterations


    for (d = 32; (d | 0) < (lA | 0); d = d << 1) {
      // depth loop
      dd = d << 1;

      for (p = 0; (p | 0) < (lA | 0); p = p + dd | 0) {
        // part loop
        Rk = R + (p << 1) | 0;
        h = 0;

        for (i = 0; (i | 0) < (d | 0); i = i + 32 | 0) {
          // multiply-and-add loop
          Ai = (A + p | 0) + i | 0;
          ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16, ah2 = HEAP32[(Ai | 8) >> 2] | 0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16, ah3 = HEAP32[(Ai | 12) >> 2] | 0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16, ah4 = HEAP32[(Ai | 16) >> 2] | 0, al4 = ah4 & 0xffff, ah4 = ah4 >>> 16, ah5 = HEAP32[(Ai | 20) >> 2] | 0, al5 = ah5 & 0xffff, ah5 = ah5 >>> 16, ah6 = HEAP32[(Ai | 24) >> 2] | 0, al6 = ah6 & 0xffff, ah6 = ah6 >>> 16, ah7 = HEAP32[(Ai | 28) >> 2] | 0, al7 = ah7 & 0xffff, ah7 = ah7 >>> 16;
          r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = c = 0;

          for (j = 0; (j | 0) < (d | 0); j = j + 32 | 0) {
            Aj = ((A + p | 0) + d | 0) + j | 0;
            bh0 = HEAP32[Aj >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Aj | 4) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16, bh2 = HEAP32[(Aj | 8) >> 2] | 0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16, bh3 = HEAP32[(Aj | 12) >> 2] | 0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16, bh4 = HEAP32[(Aj | 16) >> 2] | 0, bl4 = bh4 & 0xffff, bh4 = bh4 >>> 16, bh5 = HEAP32[(Aj | 20) >> 2] | 0, bl5 = bh5 & 0xffff, bh5 = bh5 >>> 16, bh6 = HEAP32[(Aj | 24) >> 2] | 0, bl6 = bh6 & 0xffff, bh6 = bh6 >>> 16, bh7 = HEAP32[(Aj | 28) >> 2] | 0, bl7 = bh7 & 0xffff, bh7 = bh7 >>> 16;
            r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 0;
            u = ((imul(al0, bl0) | 0) + (r0 & 0xffff) | 0) + (r8 & 0xffff) | 0;
            v = ((imul(ah0, bl0) | 0) + (r0 >>> 16) | 0) + (r8 >>> 16) | 0;
            w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r0 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl1) | 0) + (r1 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl1) | 0) + (r1 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r1 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl2) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl2) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl3) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl3) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl4) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl4) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl5) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl5) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl6) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl6) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl7) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl7) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            r8 = m;
            u = ((imul(al1, bl0) | 0) + (r1 & 0xffff) | 0) + (r9 & 0xffff) | 0;
            v = ((imul(ah1, bl0) | 0) + (r1 >>> 16) | 0) + (r9 >>> 16) | 0;
            w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r1 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl2) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl2) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl3) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl3) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl4) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl4) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl5) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl5) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl6) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl6) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl7) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl7) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            r9 = m;
            u = ((imul(al2, bl0) | 0) + (r2 & 0xffff) | 0) + (r10 & 0xffff) | 0;
            v = ((imul(ah2, bl0) | 0) + (r2 >>> 16) | 0) + (r10 >>> 16) | 0;
            w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl1) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl1) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl2) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl2) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl3) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl3) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl4) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl4) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl5) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl5) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl6) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl6) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl7) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl7) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            r10 = m;
            u = ((imul(al3, bl0) | 0) + (r3 & 0xffff) | 0) + (r11 & 0xffff) | 0;
            v = ((imul(ah3, bl0) | 0) + (r3 >>> 16) | 0) + (r11 >>> 16) | 0;
            w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl1) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl1) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl2) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl2) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl3) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl3) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl4) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl4) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl5) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl5) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl6) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl6) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl7) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl7) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            r11 = m;
            u = ((imul(al4, bl0) | 0) + (r4 & 0xffff) | 0) + (r12 & 0xffff) | 0;
            v = ((imul(ah4, bl0) | 0) + (r4 >>> 16) | 0) + (r12 >>> 16) | 0;
            w = ((imul(al4, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl1) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl1) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl2) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl2) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl3) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl3) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl4) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl4) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl5) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl5) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl6) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl6) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl7) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl7) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            r12 = m;
            u = ((imul(al5, bl0) | 0) + (r5 & 0xffff) | 0) + (r13 & 0xffff) | 0;
            v = ((imul(ah5, bl0) | 0) + (r5 >>> 16) | 0) + (r13 >>> 16) | 0;
            w = ((imul(al5, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl1) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl1) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl2) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl2) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl3) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl3) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl4) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl4) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl5) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl5) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl6) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl6) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl7) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl7) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            r13 = m;
            u = ((imul(al6, bl0) | 0) + (r6 & 0xffff) | 0) + (r14 & 0xffff) | 0;
            v = ((imul(ah6, bl0) | 0) + (r6 >>> 16) | 0) + (r14 >>> 16) | 0;
            w = ((imul(al6, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl1) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl1) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl2) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl2) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl3) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl3) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl4) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl4) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl5) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl5) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl6) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl6) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl7) | 0) + (r13 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl7) | 0) + (r13 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r13 = w << 16 | u & 0xffff;
            r14 = m;
            u = ((imul(al7, bl0) | 0) + (r7 & 0xffff) | 0) + (r15 & 0xffff) | 0;
            v = ((imul(ah7, bl0) | 0) + (r7 >>> 16) | 0) + (r15 >>> 16) | 0;
            w = ((imul(al7, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl1) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl1) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl2) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl2) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl3) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl3) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl4) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl4) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl5) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl5) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl6) | 0) + (r13 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl6) | 0) + (r13 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r13 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl7) | 0) + (r14 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl7) | 0) + (r14 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r14 = w << 16 | u & 0xffff;
            r15 = m;
            k = d + (i + j | 0) | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r0 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r4 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r4 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r5 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r5 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r6 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r6 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r7 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r7 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
          }

          k = d + (i + j | 0) | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = (((r & 0xffff) + ((r8 & 0xffff) << 1) | 0) + c | 0) + h | 0;
          w = ((r >>> 16) + (r8 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r9 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r9 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r10 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r10 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r11 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r11 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r12 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r12 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r13 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r13 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r14 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r14 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r15 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r15 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          h = w >>> 16;
        }

        for (k = k + 4 | 0; !!h & (k | 0) < dd << 1; k = k + 4 | 0) {
          // carry propagation loop
          r = HEAP32[Rk + k >> 2] | 0;
          u = (r & 0xffff) + h | 0;
          w = (r >>> 16) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          h = w >>> 16;
        }
      }
    }
  }
  /**
   * Conventional division
   *
   * @param A offset of the numerator, 32-byte aligned
   * @param lA length of the numerator, multiple of 32
   *
   * @param B offset of the divisor, 32-byte aligned
   * @param lB length of the divisor, multiple of 32
   *
   * @param R offset where to place the remainder to, 32-byte aligned
   *
   * @param Q offser where to place the quotient to, 32-byte aligned
   */


  function div(N, lN, D, lD, Q) {
    N = N | 0;
    lN = lN | 0;
    D = D | 0;
    lD = lD | 0;
    Q = Q | 0;
    var n = 0,
        d = 0,
        e = 0,
        u1 = 0,
        u0 = 0,
        v0 = 0,
        vh = 0,
        vl = 0,
        qh = 0,
        ql = 0,
        rh = 0,
        rl = 0,
        t1 = 0,
        t2 = 0,
        m = 0,
        c = 0,
        i = 0,
        j = 0,
        k = 0; // number of significant limbs in `N` (multiplied by 4)

    for (i = lN - 1 & -4; (i | 0) >= 0; i = i - 4 | 0) {
      n = HEAP32[N + i >> 2] | 0;

      if (n) {
        lN = i;
        break;
      }
    } // number of significant limbs in `D` (multiplied by 4)


    for (i = lD - 1 & -4; (i | 0) >= 0; i = i - 4 | 0) {
      d = HEAP32[D + i >> 2] | 0;

      if (d) {
        lD = i;
        break;
      }
    } // `D` is zero? WTF?!
    // calculate `e` — the power of 2 of the normalization factor


    while ((d & 0x80000000) == 0) {
      d = d << 1;
      e = e + 1 | 0;
    } // normalize `N` in place


    u0 = HEAP32[N + lN >> 2] | 0;

    if (e) {
      u1 = u0 >>> (32 - e | 0);

      for (i = lN - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        n = HEAP32[N + i >> 2] | 0;
        HEAP32[N + i + 4 >> 2] = u0 << e | (e ? n >>> (32 - e | 0) : 0);
        u0 = n;
      }

      HEAP32[N >> 2] = u0 << e;
    } // normalize `D` in place


    if (e) {
      v0 = HEAP32[D + lD >> 2] | 0;

      for (i = lD - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        d = HEAP32[D + i >> 2] | 0;
        HEAP32[D + i + 4 >> 2] = v0 << e | d >>> (32 - e | 0);
        v0 = d;
      }

      HEAP32[D >> 2] = v0 << e;
    } // divisor parts won't change


    v0 = HEAP32[D + lD >> 2] | 0;
    vh = v0 >>> 16, vl = v0 & 0xffff; // perform division

    for (i = lN; (i | 0) >= (lD | 0); i = i - 4 | 0) {
      j = i - lD | 0; // estimate high part of the quotient

      u0 = HEAP32[N + i >> 2] | 0;
      qh = (u1 >>> 0) / (vh >>> 0) | 0, rh = (u1 >>> 0) % (vh >>> 0) | 0, t1 = imul(qh, vl) | 0;

      while ((qh | 0) == 0x10000 | t1 >>> 0 > (rh << 16 | u0 >>> 16) >>> 0) {
        qh = qh - 1 | 0, rh = rh + vh | 0, t1 = t1 - vl | 0;
        if ((rh | 0) >= 0x10000) break;
      } // bulk multiply-and-subtract
      // m - multiplication carry, c - subtraction carry


      m = 0, c = 0;

      for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
        d = HEAP32[D + k >> 2] | 0;
        t1 = (imul(qh, d & 0xffff) | 0) + (m >>> 16) | 0;
        t2 = (imul(qh, d >>> 16) | 0) + (t1 >>> 16) | 0;
        d = m & 0xffff | t1 << 16;
        m = t2;
        n = HEAP32[N + j + k >> 2] | 0;
        t1 = ((n & 0xffff) - (d & 0xffff) | 0) + c | 0;
        t2 = ((n >>> 16) - (d >>> 16) | 0) + (t1 >> 16) | 0;
        HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
        c = t2 >> 16;
      }

      t1 = ((u1 & 0xffff) - (m & 0xffff) | 0) + c | 0;
      t2 = ((u1 >>> 16) - (m >>> 16) | 0) + (t1 >> 16) | 0;
      u1 = t2 << 16 | t1 & 0xffff;
      c = t2 >> 16; // add `D` back if got carry-out

      if (c) {
        qh = qh - 1 | 0;
        c = 0;

        for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
          d = HEAP32[D + k >> 2] | 0;
          n = HEAP32[N + j + k >> 2] | 0;
          t1 = (n & 0xffff) + c | 0;
          t2 = (n >>> 16) + d + (t1 >>> 16) | 0;
          HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
          c = t2 >>> 16;
        }

        u1 = u1 + c | 0;
      } // estimate low part of the quotient


      u0 = HEAP32[N + i >> 2] | 0;
      n = u1 << 16 | u0 >>> 16;
      ql = (n >>> 0) / (vh >>> 0) | 0, rl = (n >>> 0) % (vh >>> 0) | 0, t1 = imul(ql, vl) | 0;

      while ((ql | 0) == 0x10000 | t1 >>> 0 > (rl << 16 | u0 & 0xffff) >>> 0) {
        ql = ql - 1 | 0, rl = rl + vh | 0, t1 = t1 - vl | 0;
        if ((rl | 0) >= 0x10000) break;
      } // bulk multiply-and-subtract
      // m - multiplication carry, c - subtraction carry


      m = 0, c = 0;

      for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
        d = HEAP32[D + k >> 2] | 0;
        t1 = (imul(ql, d & 0xffff) | 0) + (m & 0xffff) | 0;
        t2 = ((imul(ql, d >>> 16) | 0) + (t1 >>> 16) | 0) + (m >>> 16) | 0;
        d = t1 & 0xffff | t2 << 16;
        m = t2 >>> 16;
        n = HEAP32[N + j + k >> 2] | 0;
        t1 = ((n & 0xffff) - (d & 0xffff) | 0) + c | 0;
        t2 = ((n >>> 16) - (d >>> 16) | 0) + (t1 >> 16) | 0;
        c = t2 >> 16;
        HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
      }

      t1 = ((u1 & 0xffff) - (m & 0xffff) | 0) + c | 0;
      t2 = ((u1 >>> 16) - (m >>> 16) | 0) + (t1 >> 16) | 0;
      c = t2 >> 16; // add `D` back if got carry-out

      if (c) {
        ql = ql - 1 | 0;
        c = 0;

        for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
          d = HEAP32[D + k >> 2] | 0;
          n = HEAP32[N + j + k >> 2] | 0;
          t1 = ((n & 0xffff) + (d & 0xffff) | 0) + c | 0;
          t2 = ((n >>> 16) + (d >>> 16) | 0) + (t1 >>> 16) | 0;
          c = t2 >>> 16;
          HEAP32[N + j + k >> 2] = t1 & 0xffff | t2 << 16;
        }
      } // got quotient limb


      HEAP32[Q + j >> 2] = qh << 16 | ql;
      u1 = HEAP32[N + i >> 2] | 0;
    }

    if (e) {
      // TODO denormalize `D` in place
      // denormalize `N` in place
      u0 = HEAP32[N >> 2] | 0;

      for (i = 4; (i | 0) <= (lD | 0); i = i + 4 | 0) {
        n = HEAP32[N + i >> 2] | 0;
        HEAP32[N + i - 4 >> 2] = n << (32 - e | 0) | u0 >>> e;
        u0 = n;
      }

      HEAP32[N + lD >> 2] = u0 >>> e;
    }
  }
  /**
   * Montgomery modular reduction
   *
   * Definition:
   *
   *  MREDC(A) = A × X (mod N),
   *  M × X = N × Y + 1,
   *
   * where M = 2^(32*m) such that N < M and A < N×M
   *
   * Numbers `X` and `Y` can be calculated using Extended Euclidean Algorithm.
   */


  function mredc(A, lA, N, lN, y, R) {
    A = A | 0;
    lA = lA | 0;
    N = N | 0;
    lN = lN | 0;
    y = y | 0;
    R = R | 0;
    var T = 0,
        c = 0,
        uh = 0,
        ul = 0,
        vl = 0,
        vh = 0,
        w0 = 0,
        w1 = 0,
        w2 = 0,
        r0 = 0,
        r1 = 0,
        i = 0,
        j = 0,
        k = 0;
    T = salloc(lN << 1) | 0;
    z(lN << 1, 0, T);
    cp(lA, A, T); // HAC 14.32

    for (i = 0; (i | 0) < (lN | 0); i = i + 4 | 0) {
      uh = HEAP32[T + i >> 2] | 0, ul = uh & 0xffff, uh = uh >>> 16;
      vh = y >>> 16, vl = y & 0xffff;
      w0 = imul(ul, vl) | 0, w1 = ((imul(ul, vh) | 0) + (imul(uh, vl) | 0) | 0) + (w0 >>> 16) | 0;
      ul = w0 & 0xffff, uh = w1 & 0xffff;
      r1 = 0;

      for (j = 0; (j | 0) < (lN | 0); j = j + 4 | 0) {
        k = i + j | 0;
        vh = HEAP32[N + j >> 2] | 0, vl = vh & 0xffff, vh = vh >>> 16;
        r0 = HEAP32[T + k >> 2] | 0;
        w0 = ((imul(ul, vl) | 0) + (r1 & 0xffff) | 0) + (r0 & 0xffff) | 0;
        w1 = ((imul(ul, vh) | 0) + (r1 >>> 16) | 0) + (r0 >>> 16) | 0;
        w2 = ((imul(uh, vl) | 0) + (w1 & 0xffff) | 0) + (w0 >>> 16) | 0;
        r1 = ((imul(uh, vh) | 0) + (w2 >>> 16) | 0) + (w1 >>> 16) | 0;
        r0 = w2 << 16 | w0 & 0xffff;
        HEAP32[T + k >> 2] = r0;
      }

      k = i + j | 0;
      r0 = HEAP32[T + k >> 2] | 0;
      w0 = ((r0 & 0xffff) + (r1 & 0xffff) | 0) + c | 0;
      w1 = ((r0 >>> 16) + (r1 >>> 16) | 0) + (w0 >>> 16) | 0;
      HEAP32[T + k >> 2] = w1 << 16 | w0 & 0xffff;
      c = w1 >>> 16;
    }

    cp(lN, T + lN | 0, R);
    sfree(lN << 1);

    if (c | (cmp(N, lN, R, lN) | 0) <= 0) {
      sub(R, lN, N, lN, R, lN) | 0;
    }
  }

  return {
    sreset: sreset,
    salloc: salloc,
    sfree: sfree,
    z: z,
    tst: tst,
    neg: neg,
    cmp: cmp,
    add: add,
    sub: sub,
    mul: mul,
    sqr: sqr,
    div: div,
    mredc: mredc
  };
};

function Number_extGCD(a, b) {
  var sa = a < 0 ? -1 : 1,
      sb = b < 0 ? -1 : 1,
      xi = 1,
      xj = 0,
      yi = 0,
      yj = 1,
      r,
      q,
      t,
      a_cmp_b;
  a *= sa;
  b *= sb;
  a_cmp_b = a < b;

  if (a_cmp_b) {
    t = a;
    a = b, b = t;
    t = sa;
    sa = sb;
    sb = t;
  }

  q = Math.floor(a / b), r = a - q * b;

  while (r) {
    t = xi - q * xj, xi = xj, xj = t;
    t = yi - q * yj, yi = yj, yj = t;
    a = b, b = r;
    q = Math.floor(a / b), r = a - q * b;
  }

  xj *= sa;
  yj *= sb;

  if (a_cmp_b) {
    t = xj;
    xj = yj, yj = t;
  }

  return {
    gcd: b,
    x: xj,
    y: yj
  };
}

function BigNumber_extGCD(a, b) {
  var sa = a.sign;
  var sb = b.sign;
  if (sa < 0) a = a.negate();
  if (sb < 0) b = b.negate();
  var a_cmp_b = a.compare(b);

  if (a_cmp_b < 0) {
    var t = a;
    a = b, b = t;
    var t2 = sa;
    sa = sb;
    sb = t2;
  }

  var xi = BigNumber.ONE,
      xj = BigNumber.ZERO,
      lx = b.bitLength,
      yi = BigNumber.ZERO,
      yj = BigNumber.ONE,
      ly = a.bitLength,
      z,
      r,
      q;
  z = a.divide(b);

  while ((r = z.remainder) !== BigNumber.ZERO) {
    q = z.quotient;
    z = xi.subtract(q.multiply(xj).clamp(lx)).clamp(lx), xi = xj, xj = z;
    z = yi.subtract(q.multiply(yj).clamp(ly)).clamp(ly), yi = yj, yj = z;
    a = b, b = r;
    z = a.divide(b);
  }

  if (sa < 0) xj = xj.negate();
  if (sb < 0) yj = yj.negate();

  if (a_cmp_b < 0) {
    var _t = xj;
    xj = yj, yj = _t;
  }

  return {
    gcd: b,
    x: xj,
    y: yj
  };
}

function getRandomValues(buf) {
  if (typeof process !== 'undefined') {
    var nodeCrypto = __webpack_require__(9744);

    var bytes = nodeCrypto.randomBytes(buf.length);
    buf.set(bytes);
    return;
  }

  if (window.crypto && window.crypto.getRandomValues) {
    window.crypto.getRandomValues(buf);
    return;
  }

  if (self.crypto && self.crypto.getRandomValues) {
    self.crypto.getRandomValues(buf);
    return;
  } // @ts-ignore


  if (window.msCrypto && window.msCrypto.getRandomValues) {
    // @ts-ignore
    window.msCrypto.getRandomValues(buf);
    return;
  }

  throw new Error('No secure random number generator available.');
} ///////////////////////////////////////////////////////////////////////////////


var _bigint_stdlib = {
  Uint32Array: Uint32Array,
  Math: Math
};

var _bigint_heap = new Uint32Array(0x100000);

var _bigint_asm;

function _half_imul(a, b) {
  return a * b | 0;
}

if (_bigint_stdlib.Math.imul === undefined) {
  _bigint_stdlib.Math.imul = _half_imul;
  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
  delete _bigint_stdlib.Math.imul;
} else {
  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
} ///////////////////////////////////////////////////////////////////////////////


var _BigNumber_ZERO_limbs = new Uint32Array(0);

var BigNumber = /*#__PURE__*/function () {
  function BigNumber(num) {
    _classCallCheck(this, BigNumber);

    var limbs = _BigNumber_ZERO_limbs;
    var bitlen = 0;
    var sign = 0;
    if (num === undefined) ;else {
      for (var i = 0; !num[i]; i++) {
        ;
      }

      bitlen = (num.length - i) * 8;
      if (!bitlen) return BigNumber.ZERO;
      limbs = new Uint32Array(bitlen + 31 >> 5);

      for (var j = num.length - 4; j >= i; j -= 4) {
        limbs[num.length - 4 - j >> 2] = num[j] << 24 | num[j + 1] << 16 | num[j + 2] << 8 | num[j + 3];
      }

      if (i - j === 3) {
        limbs[limbs.length - 1] = num[i];
      } else if (i - j === 2) {
        limbs[limbs.length - 1] = num[i] << 8 | num[i + 1];
      } else if (i - j === 1) {
        limbs[limbs.length - 1] = num[i] << 16 | num[i + 1] << 8 | num[i + 2];
      }

      sign = 1;
    }
    this.limbs = limbs;
    this.bitLength = bitlen;
    this.sign = sign;
  }

  _createClass(BigNumber, [{
    key: "toString",
    value: function toString(radix) {
      radix = radix || 16;
      var limbs = this.limbs;
      var bitlen = this.bitLength;
      var str = '';

      if (radix === 16) {
        // FIXME clamp last limb to (bitlen % 32)
        for (var i = (bitlen + 31 >> 5) - 1; i >= 0; i--) {
          var h = limbs[i].toString(16);
          str += '00000000'.substr(h.length);
          str += h;
        }

        str = str.replace(/^0+/, '');
        if (!str.length) str = '0';
      } else {
        throw new IllegalArgumentError('bad radix');
      }

      if (this.sign < 0) str = '-' + str;
      return str;
    }
  }, {
    key: "toBytes",
    value: function toBytes() {
      var bitlen = this.bitLength;
      var limbs = this.limbs;
      if (bitlen === 0) return new Uint8Array(0);
      var bytelen = bitlen + 7 >> 3;
      var bytes = new Uint8Array(bytelen);

      for (var i = 0; i < bytelen; i++) {
        var j = bytelen - i - 1;
        bytes[i] = limbs[j >> 2] >> ((j & 3) << 3);
      }

      return bytes;
    }
    /**
     * Downgrade to Number
     */

  }, {
    key: "valueOf",
    value: function valueOf() {
      var limbs = this.limbs;
      var bits = this.bitLength;
      var sign = this.sign;
      if (!sign) return 0;
      if (bits <= 32) return sign * (limbs[0] >>> 0);
      if (bits <= 52) return sign * (0x100000000 * (limbs[1] >>> 0) + (limbs[0] >>> 0)); // normalization

      var i,
          l,
          e = 0;

      for (i = limbs.length - 1; i >= 0; i--) {
        if ((l = limbs[i]) === 0) continue;

        while ((l << e & 0x80000000) === 0) {
          e++;
        }

        break;
      }

      if (i === 0) return sign * (limbs[0] >>> 0);
      return sign * (0x100000 * ((limbs[i] << e | (e ? limbs[i - 1] >>> 32 - e : 0)) >>> 0) + ((limbs[i - 1] << e | (e && i > 1 ? limbs[i - 2] >>> 32 - e : 0)) >>> 12)) * Math.pow(2, 32 * i - e - 52);
    }
  }, {
    key: "clamp",
    value: function clamp(b) {
      var limbs = this.limbs;
      var bitlen = this.bitLength; // FIXME check b is number and in a valid range

      if (b >= bitlen) return this;
      var clamped = new BigNumber();
      var n = b + 31 >> 5;
      var k = b % 32;
      clamped.limbs = new Uint32Array(limbs.subarray(0, n));
      clamped.bitLength = b;
      clamped.sign = this.sign;
      if (k) clamped.limbs[n - 1] &= -1 >>> 32 - k;
      return clamped;
    }
  }, {
    key: "slice",
    value: function slice(f, b) {
      var limbs = this.limbs;
      var bitlen = this.bitLength;
      if (f < 0) throw new RangeError('TODO');
      if (f >= bitlen) return BigNumber.ZERO;
      if (b === undefined || b > bitlen - f) b = bitlen - f;
      var sliced = new BigNumber();
      var n = f >> 5;
      var m = f + b + 31 >> 5;
      var l = b + 31 >> 5;
      var t = f % 32;
      var k = b % 32;
      var slimbs = new Uint32Array(l);

      if (t) {
        for (var i = 0; i < m - n - 1; i++) {
          slimbs[i] = limbs[n + i] >>> t | limbs[n + i + 1] << 32 - t;
        }

        slimbs[i] = limbs[n + i] >>> t;
      } else {
        slimbs.set(limbs.subarray(n, m));
      }

      if (k) {
        slimbs[l - 1] &= -1 >>> 32 - k;
      }

      sliced.limbs = slimbs;
      sliced.bitLength = b;
      sliced.sign = this.sign;
      return sliced;
    }
  }, {
    key: "negate",
    value: function negate() {
      var negative = new BigNumber();
      negative.limbs = this.limbs;
      negative.bitLength = this.bitLength;
      negative.sign = -1 * this.sign;
      return negative;
    }
  }, {
    key: "compare",
    value: function compare(that) {
      var alimbs = this.limbs,
          alimbcnt = alimbs.length,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          z = 0;
      if (this.sign < that.sign) return -1;
      if (this.sign > that.sign) return 1;

      _bigint_heap.set(alimbs, 0);

      _bigint_heap.set(blimbs, alimbcnt);

      z = _bigint_asm.cmp(0, alimbcnt << 2, alimbcnt << 2, blimbcnt << 2);
      return z * this.sign;
    }
  }, {
    key: "add",
    value: function add(that) {
      if (!this.sign) return that;
      if (!that.sign) return this;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          asign = this.sign,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          bsign = that.sign,
          rbitlen,
          rlimbcnt,
          rsign,
          rof,
          result = new BigNumber();
      rbitlen = (abitlen > bbitlen ? abitlen : bbitlen) + (asign * bsign > 0 ? 1 : 0);
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      if (asign * bsign > 0) {
        _bigint_asm.add(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);

        rsign = asign;
      } else if (asign > bsign) {
        rof = _bigint_asm.sub(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);
        rsign = rof ? bsign : asign;
      } else {
        rof = _bigint_asm.sub(pB, blimbcnt << 2, pA, alimbcnt << 2, pR, rlimbcnt << 2);
        rsign = rof ? asign : bsign;
      }

      if (rof) _bigint_asm.neg(pR, rlimbcnt << 2, pR, rlimbcnt << 2);
      if (_bigint_asm.tst(pR, rlimbcnt << 2) === 0) return BigNumber.ZERO;
      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.bitLength = rbitlen;
      result.sign = rsign;
      return result;
    }
  }, {
    key: "subtract",
    value: function subtract(that) {
      return this.add(that.negate());
    }
  }, {
    key: "square",
    value: function square() {
      if (!this.sign) return BigNumber.ZERO;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          rbitlen,
          rlimbcnt,
          result = new BigNumber();
      rbitlen = abitlen << 1;
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_asm.sqr(pA, alimbcnt << 2, pR);

      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.bitLength = rbitlen;
      result.sign = 1;
      return result;
    }
  }, {
    key: "divide",
    value: function divide(that) {
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          qlimbcnt,
          rlimbcnt,
          quotient = BigNumber.ZERO,
          remainder = BigNumber.ZERO;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pQ = _bigint_asm.salloc(alimbcnt << 2);

      _bigint_asm.z(pQ - pA + (alimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      _bigint_asm.div(pA, alimbcnt << 2, pB, blimbcnt << 2, pQ);

      qlimbcnt = _bigint_asm.tst(pQ, alimbcnt << 2) >> 2;

      if (qlimbcnt) {
        quotient = new BigNumber();
        quotient.limbs = new Uint32Array(_bigint_heap.subarray(pQ >> 2, (pQ >> 2) + qlimbcnt));
        quotient.bitLength = abitlen < qlimbcnt << 5 ? abitlen : qlimbcnt << 5;
        quotient.sign = this.sign * that.sign;
      }

      rlimbcnt = _bigint_asm.tst(pA, blimbcnt << 2) >> 2;

      if (rlimbcnt) {
        remainder = new BigNumber();
        remainder.limbs = new Uint32Array(_bigint_heap.subarray(pA >> 2, (pA >> 2) + rlimbcnt));
        remainder.bitLength = bbitlen < rlimbcnt << 5 ? bbitlen : rlimbcnt << 5;
        remainder.sign = this.sign;
      }

      return {
        quotient: quotient,
        remainder: remainder
      };
    }
  }, {
    key: "multiply",
    value: function multiply(that) {
      if (!this.sign || !that.sign) return BigNumber.ZERO;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          rbitlen,
          rlimbcnt,
          result = new BigNumber();
      rbitlen = abitlen + bbitlen;
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      _bigint_asm.mul(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);

      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.sign = this.sign * that.sign;
      result.bitLength = rbitlen;
      return result;
    }
  }, {
    key: "isMillerRabinProbablePrime",
    value: function isMillerRabinProbablePrime(rounds) {
      var t = BigNumber.fromConfig(this),
          s = 0;
      t.limbs[0] -= 1;

      while (t.limbs[s >> 5] === 0) {
        s += 32;
      }

      while ((t.limbs[s >> 5] >> (s & 31) & 1) === 0) {
        s++;
      }

      t = t.slice(s);
      var m = new Modulus(this),
          m1 = this.subtract(BigNumber.ONE),
          a = BigNumber.fromConfig(this),
          l = this.limbs.length - 1;

      while (a.limbs[l] === 0) {
        l--;
      }

      while (--rounds >= 0) {
        getRandomValues(a.limbs);
        if (a.limbs[0] < 2) a.limbs[0] += 2;

        while (a.compare(m1) >= 0) {
          a.limbs[l] >>>= 1;
        }

        var x = m.power(a, t);
        if (x.compare(BigNumber.ONE) === 0) continue;
        if (x.compare(m1) === 0) continue;
        var c = s;

        while (--c > 0) {
          x = x.square().divide(m).remainder;
          if (x.compare(BigNumber.ONE) === 0) return false;
          if (x.compare(m1) === 0) break;
        }

        if (c === 0) return false;
      }

      return true;
    }
  }, {
    key: "isProbablePrime",
    value: function isProbablePrime() {
      var paranoia = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 80;
      var limbs = this.limbs;
      var i = 0; // Oddity test
      // (50% false positive probability)

      if ((limbs[0] & 1) === 0) return false;
      if (paranoia <= 1) return true; // Magic divisors (3, 5, 17) test
      // (~25% false positive probability)

      var s3 = 0,
          s5 = 0,
          s17 = 0;

      for (i = 0; i < limbs.length; i++) {
        var l3 = limbs[i];

        while (l3) {
          s3 += l3 & 3;
          l3 >>>= 2;
        }

        var l5 = limbs[i];

        while (l5) {
          s5 += l5 & 3;
          l5 >>>= 2;
          s5 -= l5 & 3;
          l5 >>>= 2;
        }

        var l17 = limbs[i];

        while (l17) {
          s17 += l17 & 15;
          l17 >>>= 4;
          s17 -= l17 & 15;
          l17 >>>= 4;
        }
      }

      if (!(s3 % 3) || !(s5 % 5) || !(s17 % 17)) return false;
      if (paranoia <= 2) return true; // Miller-Rabin test
      // (≤ 4^(-k) false positive probability)

      return this.isMillerRabinProbablePrime(paranoia >>> 1);
    }
  }], [{
    key: "fromString",
    value: function fromString(str) {
      var bytes = string_to_bytes(str);
      return new BigNumber(bytes);
    }
  }, {
    key: "fromNumber",
    value: function fromNumber(num) {
      var limbs = _BigNumber_ZERO_limbs;
      var bitlen = 0;
      var sign = 0;
      var absnum = Math.abs(num);

      if (absnum > 0xffffffff) {
        limbs = new Uint32Array(2);
        limbs[0] = absnum | 0;
        limbs[1] = absnum / 0x100000000 | 0;
        bitlen = 52;
      } else if (absnum > 0) {
        limbs = new Uint32Array(1);
        limbs[0] = absnum;
        bitlen = 32;
      } else {
        limbs = _BigNumber_ZERO_limbs;
        bitlen = 0;
      }

      sign = num < 0 ? -1 : 1;
      return BigNumber.fromConfig({
        limbs: limbs,
        bitLength: bitlen,
        sign: sign
      });
    }
  }, {
    key: "fromArrayBuffer",
    value: function fromArrayBuffer(buffer) {
      return new BigNumber(new Uint8Array(buffer));
    }
  }, {
    key: "fromConfig",
    value: function fromConfig(obj) {
      var bn = new BigNumber();
      bn.limbs = new Uint32Array(obj.limbs);
      bn.bitLength = obj.bitLength;
      bn.sign = obj.sign;
      return bn;
    }
  }]);

  return BigNumber;
}();

BigNumber.extGCD = BigNumber_extGCD;
BigNumber.ZERO = BigNumber.fromNumber(0);
BigNumber.ONE = BigNumber.fromNumber(1);

var Modulus = /*#__PURE__*/function (_BigNumber) {
  _inherits(Modulus, _BigNumber);

  var _super11 = _createSuper(Modulus);

  function Modulus(number) {
    var _this5;

    _classCallCheck(this, Modulus);

    _this5 = _super11.call(this);
    _this5.limbs = number.limbs;
    _this5.bitLength = number.bitLength;
    _this5.sign = number.sign;
    if (_this5.valueOf() < 1) throw new RangeError();
    if (_this5.bitLength <= 32) return _possibleConstructorReturn(_this5);
    var comodulus;

    if (_this5.limbs[0] & 1) {
      var bitlen = (_this5.bitLength + 31 & -32) + 1;
      var limbs = new Uint32Array(bitlen + 31 >> 5);
      limbs[limbs.length - 1] = 1;
      comodulus = new BigNumber();
      comodulus.sign = 1;
      comodulus.bitLength = bitlen;
      comodulus.limbs = limbs;
      var k = Number_extGCD(0x100000000, _this5.limbs[0]).y;
      _this5.coefficient = k < 0 ? -k : 0x100000000 - k;
    } else {
      /**
       * TODO even modulus reduction
       * Modulus represented as `N = 2^U * V`, where `V` is odd and thus `GCD(2^U, V) = 1`.
       * Calculation `A = TR' mod V` is made as for odd modulo using Montgomery method.
       * Calculation `B = TR' mod 2^U` is easy as modulus is a power of 2.
       * Using Chinese Remainder Theorem and Garner's Algorithm restore `TR' mod N` from `A` and `B`.
       */
      return _possibleConstructorReturn(_this5);
    }

    _this5.comodulus = comodulus;
    _this5.comodulusRemainder = comodulus.divide(_assertThisInitialized(_this5)).remainder;
    _this5.comodulusRemainderSquare = comodulus.square().divide(_assertThisInitialized(_this5)).remainder;
    return _this5;
  }
  /**
   * Modular reduction
   */


  _createClass(Modulus, [{
    key: "reduce",
    value: function reduce(a) {
      if (a.bitLength <= 32 && this.bitLength <= 32) return BigNumber.fromNumber(a.valueOf() % this.valueOf());
      if (a.compare(this) < 0) return a;
      return a.divide(this).remainder;
    }
    /**
     * Modular inverse
     */

  }, {
    key: "inverse",
    value: function inverse(a) {
      a = this.reduce(a);
      var r = BigNumber_extGCD(this, a);
      if (r.gcd.valueOf() !== 1) throw new Error('GCD is not 1');
      if (r.y.sign < 0) return r.y.add(this).clamp(this.bitLength);
      return r.y;
    }
    /**
     * Modular exponentiation
     */

  }, {
    key: "power",
    value: function power(g, e) {
      // count exponent set bits
      var c = 0;

      for (var i = 0; i < e.limbs.length; i++) {
        var t = e.limbs[i];

        while (t) {
          if (t & 1) c++;
          t >>>= 1;
        }
      } // window size parameter


      var k = 8;
      if (e.bitLength <= 4536) k = 7;
      if (e.bitLength <= 1736) k = 6;
      if (e.bitLength <= 630) k = 5;
      if (e.bitLength <= 210) k = 4;
      if (e.bitLength <= 60) k = 3;
      if (e.bitLength <= 12) k = 2;
      if (c <= 1 << k - 1) k = 1; // montgomerize base

      g = Modulus._Montgomery_reduce(this.reduce(g).multiply(this.comodulusRemainderSquare), this); // precompute odd powers

      var g2 = Modulus._Montgomery_reduce(g.square(), this),
          gn = new Array(1 << k - 1);

      gn[0] = g;
      gn[1] = Modulus._Montgomery_reduce(g.multiply(g2), this);

      for (var _i3 = 2; _i3 < 1 << k - 1; _i3++) {
        gn[_i3] = Modulus._Montgomery_reduce(gn[_i3 - 1].multiply(g2), this);
      } // perform exponentiation


      var u = this.comodulusRemainder;
      var r = u;

      for (var _i4 = e.limbs.length - 1; _i4 >= 0; _i4--) {
        var _t2 = e.limbs[_i4];

        for (var j = 32; j > 0;) {
          if (_t2 & 0x80000000) {
            var n = _t2 >>> 32 - k,
                l = k;

            while ((n & 1) === 0) {
              n >>>= 1;
              l--;
            }

            var m = gn[n >>> 1];

            while (n) {
              n >>>= 1;
              if (r !== u) r = Modulus._Montgomery_reduce(r.square(), this);
            }

            r = r !== u ? Modulus._Montgomery_reduce(r.multiply(m), this) : m;
            _t2 <<= l, j -= l;
          } else {
            if (r !== u) r = Modulus._Montgomery_reduce(r.square(), this);
            _t2 <<= 1, j--;
          }
        }
      } // de-montgomerize result


      return Modulus._Montgomery_reduce(r, this);
    }
  }], [{
    key: "_Montgomery_reduce",
    value: function _Montgomery_reduce(a, n) {
      var alimbs = a.limbs;
      var alimbcnt = alimbs.length;
      var nlimbs = n.limbs;
      var nlimbcnt = nlimbs.length;
      var y = n.coefficient;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pN = _bigint_asm.salloc(nlimbcnt << 2),
          pR = _bigint_asm.salloc(nlimbcnt << 2);

      _bigint_asm.z(pR - pA + (nlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(nlimbs, pN >> 2);

      _bigint_asm.mredc(pA, alimbcnt << 2, pN, nlimbcnt << 2, y, pR);

      var result = new BigNumber();
      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + nlimbcnt));
      result.bitLength = n.bitLength;
      result.sign = 1;
      return result;
    }
  }]);

  return Modulus;
}(BigNumber);

var sha1_asm = function sha1_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA256 state

  var H0 = 0,
      H1 = 0,
      H2 = 0,
      H3 = 0,
      H4 = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0 = 0,
      I1 = 0,
      I2 = 0,
      I3 = 0,
      I4 = 0,
      O0 = 0,
      O1 = 0,
      O2 = 0,
      O3 = 0,
      O4 = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
    w0 = w0 | 0;
    w1 = w1 | 0;
    w2 = w2 | 0;
    w3 = w3 | 0;
    w4 = w4 | 0;
    w5 = w5 | 0;
    w6 = w6 | 0;
    w7 = w7 | 0;
    w8 = w8 | 0;
    w9 = w9 | 0;
    w10 = w10 | 0;
    w11 = w11 | 0;
    w12 = w12 | 0;
    w13 = w13 | 0;
    w14 = w14 | 0;
    w15 = w15 | 0;
    var a = 0,
        b = 0,
        c = 0,
        d = 0,
        e = 0,
        n = 0,
        t = 0,
        w16 = 0,
        w17 = 0,
        w18 = 0,
        w19 = 0,
        w20 = 0,
        w21 = 0,
        w22 = 0,
        w23 = 0,
        w24 = 0,
        w25 = 0,
        w26 = 0,
        w27 = 0,
        w28 = 0,
        w29 = 0,
        w30 = 0,
        w31 = 0,
        w32 = 0,
        w33 = 0,
        w34 = 0,
        w35 = 0,
        w36 = 0,
        w37 = 0,
        w38 = 0,
        w39 = 0,
        w40 = 0,
        w41 = 0,
        w42 = 0,
        w43 = 0,
        w44 = 0,
        w45 = 0,
        w46 = 0,
        w47 = 0,
        w48 = 0,
        w49 = 0,
        w50 = 0,
        w51 = 0,
        w52 = 0,
        w53 = 0,
        w54 = 0,
        w55 = 0,
        w56 = 0,
        w57 = 0,
        w58 = 0,
        w59 = 0,
        w60 = 0,
        w61 = 0,
        w62 = 0,
        w63 = 0,
        w64 = 0,
        w65 = 0,
        w66 = 0,
        w67 = 0,
        w68 = 0,
        w69 = 0,
        w70 = 0,
        w71 = 0,
        w72 = 0,
        w73 = 0,
        w74 = 0,
        w75 = 0,
        w76 = 0,
        w77 = 0,
        w78 = 0,
        w79 = 0;
    a = H0;
    b = H1;
    c = H2;
    d = H3;
    e = H4; // 0

    t = w0 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 1

    t = w1 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 2

    t = w2 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 3

    t = w3 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 4

    t = w4 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 5

    t = w5 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 6

    t = w6 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 7

    t = w7 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 8

    t = w8 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 9

    t = w9 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 10

    t = w10 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 11

    t = w11 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 12

    t = w12 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 13

    t = w13 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 14

    t = w14 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 15

    t = w15 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 16

    n = w13 ^ w8 ^ w2 ^ w0;
    w16 = n << 1 | n >>> 31;
    t = w16 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 17

    n = w14 ^ w9 ^ w3 ^ w1;
    w17 = n << 1 | n >>> 31;
    t = w17 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 18

    n = w15 ^ w10 ^ w4 ^ w2;
    w18 = n << 1 | n >>> 31;
    t = w18 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 19

    n = w16 ^ w11 ^ w5 ^ w3;
    w19 = n << 1 | n >>> 31;
    t = w19 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 20

    n = w17 ^ w12 ^ w6 ^ w4;
    w20 = n << 1 | n >>> 31;
    t = w20 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 21

    n = w18 ^ w13 ^ w7 ^ w5;
    w21 = n << 1 | n >>> 31;
    t = w21 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 22

    n = w19 ^ w14 ^ w8 ^ w6;
    w22 = n << 1 | n >>> 31;
    t = w22 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 23

    n = w20 ^ w15 ^ w9 ^ w7;
    w23 = n << 1 | n >>> 31;
    t = w23 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 24

    n = w21 ^ w16 ^ w10 ^ w8;
    w24 = n << 1 | n >>> 31;
    t = w24 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 25

    n = w22 ^ w17 ^ w11 ^ w9;
    w25 = n << 1 | n >>> 31;
    t = w25 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 26

    n = w23 ^ w18 ^ w12 ^ w10;
    w26 = n << 1 | n >>> 31;
    t = w26 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 27

    n = w24 ^ w19 ^ w13 ^ w11;
    w27 = n << 1 | n >>> 31;
    t = w27 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 28

    n = w25 ^ w20 ^ w14 ^ w12;
    w28 = n << 1 | n >>> 31;
    t = w28 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 29

    n = w26 ^ w21 ^ w15 ^ w13;
    w29 = n << 1 | n >>> 31;
    t = w29 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 30

    n = w27 ^ w22 ^ w16 ^ w14;
    w30 = n << 1 | n >>> 31;
    t = w30 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 31

    n = w28 ^ w23 ^ w17 ^ w15;
    w31 = n << 1 | n >>> 31;
    t = w31 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 32

    n = w29 ^ w24 ^ w18 ^ w16;
    w32 = n << 1 | n >>> 31;
    t = w32 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 33

    n = w30 ^ w25 ^ w19 ^ w17;
    w33 = n << 1 | n >>> 31;
    t = w33 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 34

    n = w31 ^ w26 ^ w20 ^ w18;
    w34 = n << 1 | n >>> 31;
    t = w34 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 35

    n = w32 ^ w27 ^ w21 ^ w19;
    w35 = n << 1 | n >>> 31;
    t = w35 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 36

    n = w33 ^ w28 ^ w22 ^ w20;
    w36 = n << 1 | n >>> 31;
    t = w36 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 37

    n = w34 ^ w29 ^ w23 ^ w21;
    w37 = n << 1 | n >>> 31;
    t = w37 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 38

    n = w35 ^ w30 ^ w24 ^ w22;
    w38 = n << 1 | n >>> 31;
    t = w38 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 39

    n = w36 ^ w31 ^ w25 ^ w23;
    w39 = n << 1 | n >>> 31;
    t = w39 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 40

    n = w37 ^ w32 ^ w26 ^ w24;
    w40 = n << 1 | n >>> 31;
    t = w40 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 41

    n = w38 ^ w33 ^ w27 ^ w25;
    w41 = n << 1 | n >>> 31;
    t = w41 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 42

    n = w39 ^ w34 ^ w28 ^ w26;
    w42 = n << 1 | n >>> 31;
    t = w42 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 43

    n = w40 ^ w35 ^ w29 ^ w27;
    w43 = n << 1 | n >>> 31;
    t = w43 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 44

    n = w41 ^ w36 ^ w30 ^ w28;
    w44 = n << 1 | n >>> 31;
    t = w44 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 45

    n = w42 ^ w37 ^ w31 ^ w29;
    w45 = n << 1 | n >>> 31;
    t = w45 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 46

    n = w43 ^ w38 ^ w32 ^ w30;
    w46 = n << 1 | n >>> 31;
    t = w46 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 47

    n = w44 ^ w39 ^ w33 ^ w31;
    w47 = n << 1 | n >>> 31;
    t = w47 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 48

    n = w45 ^ w40 ^ w34 ^ w32;
    w48 = n << 1 | n >>> 31;
    t = w48 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 49

    n = w46 ^ w41 ^ w35 ^ w33;
    w49 = n << 1 | n >>> 31;
    t = w49 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 50

    n = w47 ^ w42 ^ w36 ^ w34;
    w50 = n << 1 | n >>> 31;
    t = w50 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 51

    n = w48 ^ w43 ^ w37 ^ w35;
    w51 = n << 1 | n >>> 31;
    t = w51 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 52

    n = w49 ^ w44 ^ w38 ^ w36;
    w52 = n << 1 | n >>> 31;
    t = w52 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 53

    n = w50 ^ w45 ^ w39 ^ w37;
    w53 = n << 1 | n >>> 31;
    t = w53 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 54

    n = w51 ^ w46 ^ w40 ^ w38;
    w54 = n << 1 | n >>> 31;
    t = w54 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 55

    n = w52 ^ w47 ^ w41 ^ w39;
    w55 = n << 1 | n >>> 31;
    t = w55 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 56

    n = w53 ^ w48 ^ w42 ^ w40;
    w56 = n << 1 | n >>> 31;
    t = w56 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 57

    n = w54 ^ w49 ^ w43 ^ w41;
    w57 = n << 1 | n >>> 31;
    t = w57 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 58

    n = w55 ^ w50 ^ w44 ^ w42;
    w58 = n << 1 | n >>> 31;
    t = w58 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 59

    n = w56 ^ w51 ^ w45 ^ w43;
    w59 = n << 1 | n >>> 31;
    t = w59 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 60

    n = w57 ^ w52 ^ w46 ^ w44;
    w60 = n << 1 | n >>> 31;
    t = w60 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 61

    n = w58 ^ w53 ^ w47 ^ w45;
    w61 = n << 1 | n >>> 31;
    t = w61 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 62

    n = w59 ^ w54 ^ w48 ^ w46;
    w62 = n << 1 | n >>> 31;
    t = w62 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 63

    n = w60 ^ w55 ^ w49 ^ w47;
    w63 = n << 1 | n >>> 31;
    t = w63 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 64

    n = w61 ^ w56 ^ w50 ^ w48;
    w64 = n << 1 | n >>> 31;
    t = w64 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 65

    n = w62 ^ w57 ^ w51 ^ w49;
    w65 = n << 1 | n >>> 31;
    t = w65 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 66

    n = w63 ^ w58 ^ w52 ^ w50;
    w66 = n << 1 | n >>> 31;
    t = w66 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 67

    n = w64 ^ w59 ^ w53 ^ w51;
    w67 = n << 1 | n >>> 31;
    t = w67 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 68

    n = w65 ^ w60 ^ w54 ^ w52;
    w68 = n << 1 | n >>> 31;
    t = w68 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 69

    n = w66 ^ w61 ^ w55 ^ w53;
    w69 = n << 1 | n >>> 31;
    t = w69 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 70

    n = w67 ^ w62 ^ w56 ^ w54;
    w70 = n << 1 | n >>> 31;
    t = w70 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 71

    n = w68 ^ w63 ^ w57 ^ w55;
    w71 = n << 1 | n >>> 31;
    t = w71 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 72

    n = w69 ^ w64 ^ w58 ^ w56;
    w72 = n << 1 | n >>> 31;
    t = w72 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 73

    n = w70 ^ w65 ^ w59 ^ w57;
    w73 = n << 1 | n >>> 31;
    t = w73 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 74

    n = w71 ^ w66 ^ w60 ^ w58;
    w74 = n << 1 | n >>> 31;
    t = w74 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 75

    n = w72 ^ w67 ^ w61 ^ w59;
    w75 = n << 1 | n >>> 31;
    t = w75 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 76

    n = w73 ^ w68 ^ w62 ^ w60;
    w76 = n << 1 | n >>> 31;
    t = w76 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 77

    n = w74 ^ w69 ^ w63 ^ w61;
    w77 = n << 1 | n >>> 31;
    t = w77 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 78

    n = w75 ^ w70 ^ w64 ^ w62;
    w78 = n << 1 | n >>> 31;
    t = w78 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 79

    n = w76 ^ w71 ^ w65 ^ w63;
    w79 = n << 1 | n >>> 31;
    t = w79 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t;
    H0 = H0 + a | 0;
    H1 = H1 + b | 0;
    H2 = H2 + c | 0;
    H3 = H3 + d | 0;
    H4 = H4 + e | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0 >>> 24;
    HEAP[output | 1] = H0 >>> 16 & 255;
    HEAP[output | 2] = H0 >>> 8 & 255;
    HEAP[output | 3] = H0 & 255;
    HEAP[output | 4] = H1 >>> 24;
    HEAP[output | 5] = H1 >>> 16 & 255;
    HEAP[output | 6] = H1 >>> 8 & 255;
    HEAP[output | 7] = H1 & 255;
    HEAP[output | 8] = H2 >>> 24;
    HEAP[output | 9] = H2 >>> 16 & 255;
    HEAP[output | 10] = H2 >>> 8 & 255;
    HEAP[output | 11] = H2 & 255;
    HEAP[output | 12] = H3 >>> 24;
    HEAP[output | 13] = H3 >>> 16 & 255;
    HEAP[output | 14] = H3 >>> 8 & 255;
    HEAP[output | 15] = H3 & 255;
    HEAP[output | 16] = H4 >>> 24;
    HEAP[output | 17] = H4 >>> 16 & 255;
    HEAP[output | 18] = H4 >>> 8 & 255;
    HEAP[output | 19] = H4 & 255;
  }

  function reset() {
    H0 = 0x67452301;
    H1 = 0xefcdab89;
    H2 = 0x98badcfe;
    H3 = 0x10325476;
    H4 = 0xc3d2e1f0;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0, h1, h2, h3, h4, total0, total1) {
    h0 = h0 | 0;
    h1 = h1 | 0;
    h2 = h2 | 0;
    h3 = h3 | 0;
    h4 = h4 | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 64


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 63) return -1;

    while ((length | 0) >= 64) {
      _core_heap(offset);

      offset = offset + 64 | 0;
      length = length - 64 | 0;
      hashed = hashed + 64 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;

    if ((length | 0) >= 64) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 56) {
      for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 63] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0 = I0;
    H1 = I1;
    H2 = I2;
    H3 = I3;
    H4 = I4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0 = O0;
    H1 = O1;
    H2 = O2;
    H3 = O3;
    H4 = O4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    p6 = p6 | 0;
    p7 = p7 | 0;
    p8 = p8 | 0;
    p9 = p9 | 0;
    p10 = p10 | 0;
    p11 = p11 | 0;
    p12 = p12 | 0;
    p13 = p13 | 0;
    p14 = p14 | 0;
    p15 = p15 | 0; // opad

    reset();

    _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);

    O0 = H0;
    O1 = H1;
    O2 = H2;
    O3 = H3;
    O4 = H4; // ipad

    reset();

    _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);

    I0 = H0;
    I1 = H1;
    I2 = H2;
    I3 = H3;
    I4 = H4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        hashed = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

    _hmac_opad();

    _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 64
  // output — multiple of 32


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0 = 0,
        h1 = 0,
        h2 = 0,
        h3 = 0,
        h4 = 0,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

      _hmac_opad();

      _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;
      h0 = h0 ^ H0;
      h1 = h1 ^ H1;
      h2 = h2 ^ H2;
      h3 = h3 ^ H3;
      h4 = h4 ^ H4;
      count = count - 1 | 0;
    }

    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA1
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA1
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA1
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var Hash = /*#__PURE__*/function () {
  function Hash() {
    _classCallCheck(this, Hash);

    this.pos = 0;
    this.len = 0;
  }

  _createClass(Hash, [{
    key: "reset",
    value: function reset() {
      this.result = null;
      this.pos = 0;
      this.len = 0;
      this.asm.reset();
      return this;
    }
  }, {
    key: "process",
    value: function process(data) {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var asm = this.asm;
      var heap = this.heap;
      var hpos = this.pos;
      var hlen = this.len;
      var dpos = 0;
      var dlen = data.length;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, hpos + hlen, data, dpos, dlen);
        hlen += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.process(hpos, hlen);
        hpos += wlen;
        hlen -= wlen;
        if (!hlen) hpos = 0;
      }

      this.pos = hpos;
      this.len = hlen;
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      this.asm.finish(this.pos, this.len, 0);
      this.result = new Uint8Array(this.HASH_SIZE);
      this.result.set(this.heap.subarray(0, this.HASH_SIZE));
      this.pos = 0;
      this.len = 0;
      return this;
    }
  }]);

  return Hash;
}();

var _sha1_block_size = 64;
var _sha1_hash_size = 20;

var Sha1 = /*#__PURE__*/function (_Hash) {
  _inherits(Sha1, _Hash);

  var _super12 = _createSuper(Sha1);

  function Sha1() {
    var _this6;

    _classCallCheck(this, Sha1);

    _this6 = _super12.call(this);
    _this6.NAME = 'sha1';
    _this6.BLOCK_SIZE = _sha1_block_size;
    _this6.HASH_SIZE = _sha1_hash_size;
    _this6.heap = _heap_init();
    _this6.asm = sha1_asm({
      Uint8Array: Uint8Array
    }, null, _this6.heap.buffer);

    _this6.reset();

    return _this6;
  }

  return _createClass(Sha1);
}(Hash);

Sha1.NAME = 'sha1';

var sha256_asm = function sha256_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA256 state

  var H0 = 0,
      H1 = 0,
      H2 = 0,
      H3 = 0,
      H4 = 0,
      H5 = 0,
      H6 = 0,
      H7 = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0 = 0,
      I1 = 0,
      I2 = 0,
      I3 = 0,
      I4 = 0,
      I5 = 0,
      I6 = 0,
      I7 = 0,
      O0 = 0,
      O1 = 0,
      O2 = 0,
      O3 = 0,
      O4 = 0,
      O5 = 0,
      O6 = 0,
      O7 = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
    w0 = w0 | 0;
    w1 = w1 | 0;
    w2 = w2 | 0;
    w3 = w3 | 0;
    w4 = w4 | 0;
    w5 = w5 | 0;
    w6 = w6 | 0;
    w7 = w7 | 0;
    w8 = w8 | 0;
    w9 = w9 | 0;
    w10 = w10 | 0;
    w11 = w11 | 0;
    w12 = w12 | 0;
    w13 = w13 | 0;
    w14 = w14 | 0;
    w15 = w15 | 0;
    var a = 0,
        b = 0,
        c = 0,
        d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0;
    a = H0;
    b = H1;
    c = H2;
    d = H3;
    e = H4;
    f = H5;
    g = H6;
    h = H7; // 0

    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x428a2f98 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 1

    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x71374491 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 2

    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb5c0fbcf | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 3

    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xe9b5dba5 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 4

    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x3956c25b | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 5

    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x59f111f1 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 6

    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x923f82a4 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 7

    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xab1c5ed5 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 8

    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xd807aa98 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 9

    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x12835b01 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 10

    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x243185be | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 11

    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x550c7dc3 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 12

    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x72be5d74 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 13

    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x80deb1fe | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 14

    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x9bdc06a7 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 15

    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc19bf174 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 16

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xe49b69c1 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 17

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xefbe4786 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 18

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x0fc19dc6 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 19

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x240ca1cc | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 20

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x2de92c6f | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 21

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4a7484aa | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 22

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5cb0a9dc | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 23

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x76f988da | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 24

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x983e5152 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 25

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa831c66d | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 26

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb00327c8 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 27

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xbf597fc7 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 28

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xc6e00bf3 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 29

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd5a79147 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 30

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x06ca6351 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 31

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x14292967 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 32

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x27b70a85 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 33

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x2e1b2138 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 34

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x4d2c6dfc | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 35

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x53380d13 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 36

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x650a7354 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 37

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x766a0abb | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 38

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x81c2c92e | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 39

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x92722c85 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 40

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xa2bfe8a1 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 41

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa81a664b | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 42

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xc24b8b70 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 43

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xc76c51a3 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 44

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xd192e819 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 45

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd6990624 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 46

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xf40e3585 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 47

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x106aa070 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 48

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x19a4c116 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 49

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x1e376c08 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 50

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x2748774c | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 51

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x34b0bcb5 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 52

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x391c0cb3 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 53

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4ed8aa4a | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 54

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5b9cca4f | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 55

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x682e6ff3 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 56

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x748f82ee | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 57

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x78a5636f | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 58

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x84c87814 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 59

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x8cc70208 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 60

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x90befffa | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 61

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xa4506ceb | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 62

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xbef9a3f7 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 63

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc67178f2 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;
    H0 = H0 + a | 0;
    H1 = H1 + b | 0;
    H2 = H2 + c | 0;
    H3 = H3 + d | 0;
    H4 = H4 + e | 0;
    H5 = H5 + f | 0;
    H6 = H6 + g | 0;
    H7 = H7 + h | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0 >>> 24;
    HEAP[output | 1] = H0 >>> 16 & 255;
    HEAP[output | 2] = H0 >>> 8 & 255;
    HEAP[output | 3] = H0 & 255;
    HEAP[output | 4] = H1 >>> 24;
    HEAP[output | 5] = H1 >>> 16 & 255;
    HEAP[output | 6] = H1 >>> 8 & 255;
    HEAP[output | 7] = H1 & 255;
    HEAP[output | 8] = H2 >>> 24;
    HEAP[output | 9] = H2 >>> 16 & 255;
    HEAP[output | 10] = H2 >>> 8 & 255;
    HEAP[output | 11] = H2 & 255;
    HEAP[output | 12] = H3 >>> 24;
    HEAP[output | 13] = H3 >>> 16 & 255;
    HEAP[output | 14] = H3 >>> 8 & 255;
    HEAP[output | 15] = H3 & 255;
    HEAP[output | 16] = H4 >>> 24;
    HEAP[output | 17] = H4 >>> 16 & 255;
    HEAP[output | 18] = H4 >>> 8 & 255;
    HEAP[output | 19] = H4 & 255;
    HEAP[output | 20] = H5 >>> 24;
    HEAP[output | 21] = H5 >>> 16 & 255;
    HEAP[output | 22] = H5 >>> 8 & 255;
    HEAP[output | 23] = H5 & 255;
    HEAP[output | 24] = H6 >>> 24;
    HEAP[output | 25] = H6 >>> 16 & 255;
    HEAP[output | 26] = H6 >>> 8 & 255;
    HEAP[output | 27] = H6 & 255;
    HEAP[output | 28] = H7 >>> 24;
    HEAP[output | 29] = H7 >>> 16 & 255;
    HEAP[output | 30] = H7 >>> 8 & 255;
    HEAP[output | 31] = H7 & 255;
  }

  function reset() {
    H0 = 0x6a09e667;
    H1 = 0xbb67ae85;
    H2 = 0x3c6ef372;
    H3 = 0xa54ff53a;
    H4 = 0x510e527f;
    H5 = 0x9b05688c;
    H6 = 0x1f83d9ab;
    H7 = 0x5be0cd19;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0, h1, h2, h3, h4, h5, h6, h7, total0, total1) {
    h0 = h0 | 0;
    h1 = h1 | 0;
    h2 = h2 | 0;
    h3 = h3 | 0;
    h4 = h4 | 0;
    h5 = h5 | 0;
    h6 = h6 | 0;
    h7 = h7 | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    H5 = h5;
    H6 = h6;
    H7 = h7;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 64


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 63) return -1;

    while ((length | 0) >= 64) {
      _core_heap(offset);

      offset = offset + 64 | 0;
      length = length - 64 | 0;
      hashed = hashed + 64 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;

    if ((length | 0) >= 64) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 56) {
      for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 63] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0 = I0;
    H1 = I1;
    H2 = I2;
    H3 = I3;
    H4 = I4;
    H5 = I5;
    H6 = I6;
    H7 = I7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0 = O0;
    H1 = O1;
    H2 = O2;
    H3 = O3;
    H4 = O4;
    H5 = O5;
    H6 = O6;
    H7 = O7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    p6 = p6 | 0;
    p7 = p7 | 0;
    p8 = p8 | 0;
    p9 = p9 | 0;
    p10 = p10 | 0;
    p11 = p11 | 0;
    p12 = p12 | 0;
    p13 = p13 | 0;
    p14 = p14 | 0;
    p15 = p15 | 0; // opad

    reset();

    _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);

    O0 = H0;
    O1 = H1;
    O2 = H2;
    O3 = H3;
    O4 = H4;
    O5 = H5;
    O6 = H6;
    O7 = H7; // ipad

    reset();

    _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);

    I0 = H0;
    I1 = H1;
    I2 = H2;
    I3 = H3;
    I4 = H4;
    I5 = H5;
    I6 = H6;
    I7 = H7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0,
        hashed = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

    _hmac_opad();

    _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 64
  // output — multiple of 32


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0 = 0,
        h1 = 0,
        h2 = 0,
        h3 = 0,
        h4 = 0,
        h5 = 0,
        h6 = 0,
        h7 = 0,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4, h5 = t5 = H5, h6 = t6 = H6, h7 = t7 = H7;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

      _hmac_opad();

      _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;
      h0 = h0 ^ H0;
      h1 = h1 ^ H1;
      h2 = h2 ^ H2;
      h3 = h3 ^ H3;
      h4 = h4 ^ H4;
      h5 = h5 ^ H5;
      h6 = h6 ^ H6;
      h7 = h7 ^ H7;
      count = count - 1 | 0;
    }

    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    H5 = h5;
    H6 = h6;
    H7 = h7;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA256
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA256
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA256
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var _sha256_block_size = 64;
var _sha256_hash_size = 32;

var Sha256 = /*#__PURE__*/function (_Hash2) {
  _inherits(Sha256, _Hash2);

  var _super13 = _createSuper(Sha256);

  function Sha256() {
    var _this7;

    _classCallCheck(this, Sha256);

    _this7 = _super13.call(this);
    _this7.NAME = 'sha256';
    _this7.BLOCK_SIZE = _sha256_block_size;
    _this7.HASH_SIZE = _sha256_hash_size;
    _this7.heap = _heap_init();
    _this7.asm = sha256_asm({
      Uint8Array: Uint8Array
    }, null, _this7.heap.buffer);

    _this7.reset();

    return _this7;
  }

  return _createClass(Sha256);
}(Hash);

Sha256.NAME = 'sha256';

var sha512_asm = function sha512_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA512 state

  var H0h = 0,
      H0l = 0,
      H1h = 0,
      H1l = 0,
      H2h = 0,
      H2l = 0,
      H3h = 0,
      H3l = 0,
      H4h = 0,
      H4l = 0,
      H5h = 0,
      H5l = 0,
      H6h = 0,
      H6l = 0,
      H7h = 0,
      H7l = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0h = 0,
      I0l = 0,
      I1h = 0,
      I1l = 0,
      I2h = 0,
      I2l = 0,
      I3h = 0,
      I3l = 0,
      I4h = 0,
      I4l = 0,
      I5h = 0,
      I5l = 0,
      I6h = 0,
      I6l = 0,
      I7h = 0,
      I7l = 0,
      O0h = 0,
      O0l = 0,
      O1h = 0,
      O1l = 0,
      O2h = 0,
      O2l = 0,
      O3h = 0,
      O3l = 0,
      O4h = 0,
      O4l = 0,
      O5h = 0,
      O5l = 0,
      O6h = 0,
      O6l = 0,
      O7h = 0,
      O7l = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0h, w0l, w1h, w1l, w2h, w2l, w3h, w3l, w4h, w4l, w5h, w5l, w6h, w6l, w7h, w7l, w8h, w8l, w9h, w9l, w10h, w10l, w11h, w11l, w12h, w12l, w13h, w13l, w14h, w14l, w15h, w15l) {
    w0h = w0h | 0;
    w0l = w0l | 0;
    w1h = w1h | 0;
    w1l = w1l | 0;
    w2h = w2h | 0;
    w2l = w2l | 0;
    w3h = w3h | 0;
    w3l = w3l | 0;
    w4h = w4h | 0;
    w4l = w4l | 0;
    w5h = w5h | 0;
    w5l = w5l | 0;
    w6h = w6h | 0;
    w6l = w6l | 0;
    w7h = w7h | 0;
    w7l = w7l | 0;
    w8h = w8h | 0;
    w8l = w8l | 0;
    w9h = w9h | 0;
    w9l = w9l | 0;
    w10h = w10h | 0;
    w10l = w10l | 0;
    w11h = w11h | 0;
    w11l = w11l | 0;
    w12h = w12h | 0;
    w12l = w12l | 0;
    w13h = w13h | 0;
    w13l = w13l | 0;
    w14h = w14h | 0;
    w14l = w14l | 0;
    w15h = w15h | 0;
    w15l = w15l | 0;
    var ah = 0,
        al = 0,
        bh = 0,
        bl = 0,
        ch = 0,
        cl = 0,
        dh = 0,
        dl = 0,
        eh = 0,
        el = 0,
        fh = 0,
        fl = 0,
        gh = 0,
        gl = 0,
        hh = 0,
        hl = 0,
        th = 0,
        tl = 0,
        xl = 0;
    ah = H0h;
    al = H0l;
    bh = H1h;
    bl = H1l;
    ch = H2h;
    cl = H2l;
    dh = H3h;
    dl = H3l;
    eh = H4h;
    el = H4l;
    fh = H5h;
    fl = H5l;
    gh = H6h;
    gl = H6l;
    hh = H7h;
    hl = H7l; // 0

    tl = 0xd728ae22 + w0l | 0;
    th = 0x428a2f98 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 1

    tl = 0x23ef65cd + w1l | 0;
    th = 0x71374491 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 2

    tl = 0xec4d3b2f + w2l | 0;
    th = 0xb5c0fbcf + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 3

    tl = 0x8189dbbc + w3l | 0;
    th = 0xe9b5dba5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 4

    tl = 0xf348b538 + w4l | 0;
    th = 0x3956c25b + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 5

    tl = 0xb605d019 + w5l | 0;
    th = 0x59f111f1 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 6

    tl = 0xaf194f9b + w6l | 0;
    th = 0x923f82a4 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 7

    tl = 0xda6d8118 + w7l | 0;
    th = 0xab1c5ed5 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 8

    tl = 0xa3030242 + w8l | 0;
    th = 0xd807aa98 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 9

    tl = 0x45706fbe + w9l | 0;
    th = 0x12835b01 + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 10

    tl = 0x4ee4b28c + w10l | 0;
    th = 0x243185be + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 11

    tl = 0xd5ffb4e2 + w11l | 0;
    th = 0x550c7dc3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 12

    tl = 0xf27b896f + w12l | 0;
    th = 0x72be5d74 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 13

    tl = 0x3b1696b1 + w13l | 0;
    th = 0x80deb1fe + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 14

    tl = 0x25c71235 + w14l | 0;
    th = 0x9bdc06a7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 15

    tl = 0xcf692694 + w15l | 0;
    th = 0xc19bf174 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 16

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9ef14ad2 + w0l | 0;
    th = 0xe49b69c1 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 17

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x384f25e3 + w1l | 0;
    th = 0xefbe4786 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 18

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x8b8cd5b5 + w2l | 0;
    th = 0xfc19dc6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 19

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x77ac9c65 + w3l | 0;
    th = 0x240ca1cc + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 20

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x592b0275 + w4l | 0;
    th = 0x2de92c6f + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 21

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x6ea6e483 + w5l | 0;
    th = 0x4a7484aa + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 22

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbd41fbd4 + w6l | 0;
    th = 0x5cb0a9dc + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 23

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x831153b5 + w7l | 0;
    th = 0x76f988da + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 24

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xee66dfab + w8l | 0;
    th = 0x983e5152 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 25

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x2db43210 + w9l | 0;
    th = 0xa831c66d + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 26

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x98fb213f + w10l | 0;
    th = 0xb00327c8 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 27

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbeef0ee4 + w11l | 0;
    th = 0xbf597fc7 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 28

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3da88fc2 + w12l | 0;
    th = 0xc6e00bf3 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 29

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x930aa725 + w13l | 0;
    th = 0xd5a79147 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 30

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe003826f + w14l | 0;
    th = 0x6ca6351 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 31

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa0e6e70 + w15l | 0;
    th = 0x14292967 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 32

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x46d22ffc + w0l | 0;
    th = 0x27b70a85 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 33

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5c26c926 + w1l | 0;
    th = 0x2e1b2138 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 34

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5ac42aed + w2l | 0;
    th = 0x4d2c6dfc + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 35

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9d95b3df + w3l | 0;
    th = 0x53380d13 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 36

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x8baf63de + w4l | 0;
    th = 0x650a7354 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 37

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3c77b2a8 + w5l | 0;
    th = 0x766a0abb + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 38

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x47edaee6 + w6l | 0;
    th = 0x81c2c92e + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 39

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x1482353b + w7l | 0;
    th = 0x92722c85 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 40

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x4cf10364 + w8l | 0;
    th = 0xa2bfe8a1 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 41

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbc423001 + w9l | 0;
    th = 0xa81a664b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 42

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd0f89791 + w10l | 0;
    th = 0xc24b8b70 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 43

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x654be30 + w11l | 0;
    th = 0xc76c51a3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 44

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd6ef5218 + w12l | 0;
    th = 0xd192e819 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 45

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5565a910 + w13l | 0;
    th = 0xd6990624 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 46

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5771202a + w14l | 0;
    th = 0xf40e3585 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 47

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x32bbd1b8 + w15l | 0;
    th = 0x106aa070 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 48

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xb8d2d0c8 + w0l | 0;
    th = 0x19a4c116 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 49

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5141ab53 + w1l | 0;
    th = 0x1e376c08 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 50

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xdf8eeb99 + w2l | 0;
    th = 0x2748774c + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 51

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe19b48a8 + w3l | 0;
    th = 0x34b0bcb5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 52

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xc5c95a63 + w4l | 0;
    th = 0x391c0cb3 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 53

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe3418acb + w5l | 0;
    th = 0x4ed8aa4a + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 54

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x7763e373 + w6l | 0;
    th = 0x5b9cca4f + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 55

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd6b2b8a3 + w7l | 0;
    th = 0x682e6ff3 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 56

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5defb2fc + w8l | 0;
    th = 0x748f82ee + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 57

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x43172f60 + w9l | 0;
    th = 0x78a5636f + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 58

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa1f0ab72 + w10l | 0;
    th = 0x84c87814 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 59

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x1a6439ec + w11l | 0;
    th = 0x8cc70208 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 60

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x23631e28 + w12l | 0;
    th = 0x90befffa + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 61

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xde82bde9 + w13l | 0;
    th = 0xa4506ceb + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 62

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xb2c67915 + w14l | 0;
    th = 0xbef9a3f7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 63

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe372532b + w15l | 0;
    th = 0xc67178f2 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 64

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xea26619c + w0l | 0;
    th = 0xca273ece + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 65

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x21c0c207 + w1l | 0;
    th = 0xd186b8c7 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 66

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xcde0eb1e + w2l | 0;
    th = 0xeada7dd6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 67

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xee6ed178 + w3l | 0;
    th = 0xf57d4f7f + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 68

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x72176fba + w4l | 0;
    th = 0x6f067aa + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 69

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa2c898a6 + w5l | 0;
    th = 0xa637dc5 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 70

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbef90dae + w6l | 0;
    th = 0x113f9804 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 71

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x131c471b + w7l | 0;
    th = 0x1b710b35 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 72

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x23047d84 + w8l | 0;
    th = 0x28db77f5 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 73

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x40c72493 + w9l | 0;
    th = 0x32caab7b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 74

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x15c9bebc + w10l | 0;
    th = 0x3c9ebe0a + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 75

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9c100d4c + w11l | 0;
    th = 0x431d67c4 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 76

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xcb3e42b6 + w12l | 0;
    th = 0x4cc5d4be + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 77

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xfc657e2a + w13l | 0;
    th = 0x597f299c + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 78

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3ad6faec + w14l | 0;
    th = 0x5fcb6fab + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 79

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x4a475817 + w15l | 0;
    th = 0x6c44198c + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    H0l = H0l + al | 0;
    H0h = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0) | 0;
    H1l = H1l + bl | 0;
    H1h = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0) | 0;
    H2l = H2l + cl | 0;
    H2h = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0) | 0;
    H3l = H3l + dl | 0;
    H3h = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    H4l = H4l + el | 0;
    H4h = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0) | 0;
    H5l = H5l + fl | 0;
    H5h = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0) | 0;
    H6l = H6l + gl | 0;
    H6h = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0) | 0;
    H7l = H7l + hl | 0;
    H7h = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0) | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63], HEAP[offset | 64] << 24 | HEAP[offset | 65] << 16 | HEAP[offset | 66] << 8 | HEAP[offset | 67], HEAP[offset | 68] << 24 | HEAP[offset | 69] << 16 | HEAP[offset | 70] << 8 | HEAP[offset | 71], HEAP[offset | 72] << 24 | HEAP[offset | 73] << 16 | HEAP[offset | 74] << 8 | HEAP[offset | 75], HEAP[offset | 76] << 24 | HEAP[offset | 77] << 16 | HEAP[offset | 78] << 8 | HEAP[offset | 79], HEAP[offset | 80] << 24 | HEAP[offset | 81] << 16 | HEAP[offset | 82] << 8 | HEAP[offset | 83], HEAP[offset | 84] << 24 | HEAP[offset | 85] << 16 | HEAP[offset | 86] << 8 | HEAP[offset | 87], HEAP[offset | 88] << 24 | HEAP[offset | 89] << 16 | HEAP[offset | 90] << 8 | HEAP[offset | 91], HEAP[offset | 92] << 24 | HEAP[offset | 93] << 16 | HEAP[offset | 94] << 8 | HEAP[offset | 95], HEAP[offset | 96] << 24 | HEAP[offset | 97] << 16 | HEAP[offset | 98] << 8 | HEAP[offset | 99], HEAP[offset | 100] << 24 | HEAP[offset | 101] << 16 | HEAP[offset | 102] << 8 | HEAP[offset | 103], HEAP[offset | 104] << 24 | HEAP[offset | 105] << 16 | HEAP[offset | 106] << 8 | HEAP[offset | 107], HEAP[offset | 108] << 24 | HEAP[offset | 109] << 16 | HEAP[offset | 110] << 8 | HEAP[offset | 111], HEAP[offset | 112] << 24 | HEAP[offset | 113] << 16 | HEAP[offset | 114] << 8 | HEAP[offset | 115], HEAP[offset | 116] << 24 | HEAP[offset | 117] << 16 | HEAP[offset | 118] << 8 | HEAP[offset | 119], HEAP[offset | 120] << 24 | HEAP[offset | 121] << 16 | HEAP[offset | 122] << 8 | HEAP[offset | 123], HEAP[offset | 124] << 24 | HEAP[offset | 125] << 16 | HEAP[offset | 126] << 8 | HEAP[offset | 127]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0h >>> 24;
    HEAP[output | 1] = H0h >>> 16 & 255;
    HEAP[output | 2] = H0h >>> 8 & 255;
    HEAP[output | 3] = H0h & 255;
    HEAP[output | 4] = H0l >>> 24;
    HEAP[output | 5] = H0l >>> 16 & 255;
    HEAP[output | 6] = H0l >>> 8 & 255;
    HEAP[output | 7] = H0l & 255;
    HEAP[output | 8] = H1h >>> 24;
    HEAP[output | 9] = H1h >>> 16 & 255;
    HEAP[output | 10] = H1h >>> 8 & 255;
    HEAP[output | 11] = H1h & 255;
    HEAP[output | 12] = H1l >>> 24;
    HEAP[output | 13] = H1l >>> 16 & 255;
    HEAP[output | 14] = H1l >>> 8 & 255;
    HEAP[output | 15] = H1l & 255;
    HEAP[output | 16] = H2h >>> 24;
    HEAP[output | 17] = H2h >>> 16 & 255;
    HEAP[output | 18] = H2h >>> 8 & 255;
    HEAP[output | 19] = H2h & 255;
    HEAP[output | 20] = H2l >>> 24;
    HEAP[output | 21] = H2l >>> 16 & 255;
    HEAP[output | 22] = H2l >>> 8 & 255;
    HEAP[output | 23] = H2l & 255;
    HEAP[output | 24] = H3h >>> 24;
    HEAP[output | 25] = H3h >>> 16 & 255;
    HEAP[output | 26] = H3h >>> 8 & 255;
    HEAP[output | 27] = H3h & 255;
    HEAP[output | 28] = H3l >>> 24;
    HEAP[output | 29] = H3l >>> 16 & 255;
    HEAP[output | 30] = H3l >>> 8 & 255;
    HEAP[output | 31] = H3l & 255;
    HEAP[output | 32] = H4h >>> 24;
    HEAP[output | 33] = H4h >>> 16 & 255;
    HEAP[output | 34] = H4h >>> 8 & 255;
    HEAP[output | 35] = H4h & 255;
    HEAP[output | 36] = H4l >>> 24;
    HEAP[output | 37] = H4l >>> 16 & 255;
    HEAP[output | 38] = H4l >>> 8 & 255;
    HEAP[output | 39] = H4l & 255;
    HEAP[output | 40] = H5h >>> 24;
    HEAP[output | 41] = H5h >>> 16 & 255;
    HEAP[output | 42] = H5h >>> 8 & 255;
    HEAP[output | 43] = H5h & 255;
    HEAP[output | 44] = H5l >>> 24;
    HEAP[output | 45] = H5l >>> 16 & 255;
    HEAP[output | 46] = H5l >>> 8 & 255;
    HEAP[output | 47] = H5l & 255;
    HEAP[output | 48] = H6h >>> 24;
    HEAP[output | 49] = H6h >>> 16 & 255;
    HEAP[output | 50] = H6h >>> 8 & 255;
    HEAP[output | 51] = H6h & 255;
    HEAP[output | 52] = H6l >>> 24;
    HEAP[output | 53] = H6l >>> 16 & 255;
    HEAP[output | 54] = H6l >>> 8 & 255;
    HEAP[output | 55] = H6l & 255;
    HEAP[output | 56] = H7h >>> 24;
    HEAP[output | 57] = H7h >>> 16 & 255;
    HEAP[output | 58] = H7h >>> 8 & 255;
    HEAP[output | 59] = H7h & 255;
    HEAP[output | 60] = H7l >>> 24;
    HEAP[output | 61] = H7l >>> 16 & 255;
    HEAP[output | 62] = H7l >>> 8 & 255;
    HEAP[output | 63] = H7l & 255;
  }

  function reset() {
    H0h = 0x6a09e667;
    H0l = 0xf3bcc908;
    H1h = 0xbb67ae85;
    H1l = 0x84caa73b;
    H2h = 0x3c6ef372;
    H2l = 0xfe94f82b;
    H3h = 0xa54ff53a;
    H3l = 0x5f1d36f1;
    H4h = 0x510e527f;
    H4l = 0xade682d1;
    H5h = 0x9b05688c;
    H5l = 0x2b3e6c1f;
    H6h = 0x1f83d9ab;
    H6l = 0xfb41bd6b;
    H7h = 0x5be0cd19;
    H7l = 0x137e2179;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0h, h0l, h1h, h1l, h2h, h2l, h3h, h3l, h4h, h4l, h5h, h5l, h6h, h6l, h7h, h7l, total0, total1) {
    h0h = h0h | 0;
    h0l = h0l | 0;
    h1h = h1h | 0;
    h1l = h1l | 0;
    h2h = h2h | 0;
    h2l = h2l | 0;
    h3h = h3h | 0;
    h3l = h3l | 0;
    h4h = h4h | 0;
    h4l = h4l | 0;
    h5h = h5h | 0;
    h5l = h5l | 0;
    h6h = h6h | 0;
    h6l = h6l | 0;
    h7h = h7h | 0;
    h7l = h7l | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0h = h0h;
    H0l = h0l;
    H1h = h1h;
    H1l = h1l;
    H2h = h2h;
    H2l = h2l;
    H3h = h3h;
    H3l = h3l;
    H4h = h4h;
    H4l = h4l;
    H5h = h5h;
    H5l = h5l;
    H6h = h6h;
    H6l = h6l;
    H7h = h7h;
    H7l = h7l;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 128


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 127) return -1;

    while ((length | 0) >= 128) {
      _core_heap(offset);

      offset = offset + 128 | 0;
      length = length - 128 | 0;
      hashed = hashed + 128 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 128
  // output — multiple of 64


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1;

    if ((length | 0) >= 128) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 112) {
      for (i = length + 1 | 0; (i | 0) < 128; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 123; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 120] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 121] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 122] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 123] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 124] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 125] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 126] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 127] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0h = I0h;
    H0l = I0l;
    H1h = I1h;
    H1l = I1l;
    H2h = I2h;
    H2l = I2l;
    H3h = I3h;
    H3l = I3l;
    H4h = I4h;
    H4l = I4l;
    H5h = I5h;
    H5l = I5l;
    H6h = I6h;
    H6l = I6l;
    H7h = I7h;
    H7l = I7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0h = O0h;
    H0l = O0l;
    H1h = O1h;
    H1l = O1l;
    H2h = O2h;
    H2l = O2l;
    H3h = O3h;
    H3l = O3l;
    H4h = O4h;
    H4l = O4l;
    H5h = O5h;
    H5l = O5l;
    H6h = O6h;
    H6l = O6l;
    H7h = O7h;
    H7l = O7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  }

  function hmac_init(p0h, p0l, p1h, p1l, p2h, p2l, p3h, p3l, p4h, p4l, p5h, p5l, p6h, p6l, p7h, p7l, p8h, p8l, p9h, p9l, p10h, p10l, p11h, p11l, p12h, p12l, p13h, p13l, p14h, p14l, p15h, p15l) {
    p0h = p0h | 0;
    p0l = p0l | 0;
    p1h = p1h | 0;
    p1l = p1l | 0;
    p2h = p2h | 0;
    p2l = p2l | 0;
    p3h = p3h | 0;
    p3l = p3l | 0;
    p4h = p4h | 0;
    p4l = p4l | 0;
    p5h = p5h | 0;
    p5l = p5l | 0;
    p6h = p6h | 0;
    p6l = p6l | 0;
    p7h = p7h | 0;
    p7l = p7l | 0;
    p8h = p8h | 0;
    p8l = p8l | 0;
    p9h = p9h | 0;
    p9l = p9l | 0;
    p10h = p10h | 0;
    p10l = p10l | 0;
    p11h = p11h | 0;
    p11l = p11l | 0;
    p12h = p12h | 0;
    p12l = p12l | 0;
    p13h = p13h | 0;
    p13l = p13l | 0;
    p14h = p14h | 0;
    p14l = p14l | 0;
    p15h = p15h | 0;
    p15l = p15l | 0; // opad

    reset();

    _core(p0h ^ 0x5c5c5c5c, p0l ^ 0x5c5c5c5c, p1h ^ 0x5c5c5c5c, p1l ^ 0x5c5c5c5c, p2h ^ 0x5c5c5c5c, p2l ^ 0x5c5c5c5c, p3h ^ 0x5c5c5c5c, p3l ^ 0x5c5c5c5c, p4h ^ 0x5c5c5c5c, p4l ^ 0x5c5c5c5c, p5h ^ 0x5c5c5c5c, p5l ^ 0x5c5c5c5c, p6h ^ 0x5c5c5c5c, p6l ^ 0x5c5c5c5c, p7h ^ 0x5c5c5c5c, p7l ^ 0x5c5c5c5c, p8h ^ 0x5c5c5c5c, p8l ^ 0x5c5c5c5c, p9h ^ 0x5c5c5c5c, p9l ^ 0x5c5c5c5c, p10h ^ 0x5c5c5c5c, p10l ^ 0x5c5c5c5c, p11h ^ 0x5c5c5c5c, p11l ^ 0x5c5c5c5c, p12h ^ 0x5c5c5c5c, p12l ^ 0x5c5c5c5c, p13h ^ 0x5c5c5c5c, p13l ^ 0x5c5c5c5c, p14h ^ 0x5c5c5c5c, p14l ^ 0x5c5c5c5c, p15h ^ 0x5c5c5c5c, p15l ^ 0x5c5c5c5c);

    O0h = H0h;
    O0l = H0l;
    O1h = H1h;
    O1l = H1l;
    O2h = H2h;
    O2l = H2l;
    O3h = H3h;
    O3l = H3l;
    O4h = H4h;
    O4l = H4l;
    O5h = H5h;
    O5l = H5l;
    O6h = H6h;
    O6l = H6l;
    O7h = H7h;
    O7l = H7l; // ipad

    reset();

    _core(p0h ^ 0x36363636, p0l ^ 0x36363636, p1h ^ 0x36363636, p1l ^ 0x36363636, p2h ^ 0x36363636, p2l ^ 0x36363636, p3h ^ 0x36363636, p3l ^ 0x36363636, p4h ^ 0x36363636, p4l ^ 0x36363636, p5h ^ 0x36363636, p5l ^ 0x36363636, p6h ^ 0x36363636, p6l ^ 0x36363636, p7h ^ 0x36363636, p7l ^ 0x36363636, p8h ^ 0x36363636, p8l ^ 0x36363636, p9h ^ 0x36363636, p9l ^ 0x36363636, p10h ^ 0x36363636, p10l ^ 0x36363636, p11h ^ 0x36363636, p11l ^ 0x36363636, p12h ^ 0x36363636, p12l ^ 0x36363636, p13h ^ 0x36363636, p13l ^ 0x36363636, p14h ^ 0x36363636, p14l ^ 0x36363636, p15h ^ 0x36363636, p15l ^ 0x36363636);

    I0h = H0h;
    I0l = H0l;
    I1h = H1h;
    I1l = H1l;
    I2h = H2h;
    I2l = H2l;
    I3h = H3h;
    I3l = H3l;
    I4h = H4h;
    I4l = H4l;
    I5h = H5h;
    I5l = H5l;
    I6h = H6h;
    I6l = H6l;
    I7h = H7h;
    I7l = H7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  } // offset — multiple of 128
  // output — multiple of 64


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0h = 0,
        t0l = 0,
        t1h = 0,
        t1l = 0,
        t2h = 0,
        t2l = 0,
        t3h = 0,
        t3l = 0,
        t4h = 0,
        t4l = 0,
        t5h = 0,
        t5l = 0,
        t6h = 0,
        t6l = 0,
        t7h = 0,
        t7l = 0,
        hashed = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0h = H0h;
    t0l = H0l;
    t1h = H1h;
    t1l = H1l;
    t2h = H2h;
    t2l = H2l;
    t3h = H3h;
    t3l = H3l;
    t4h = H4h;
    t4l = H4l;
    t5h = H5h;
    t5l = H5l;
    t6h = H6h;
    t6l = H6l;
    t7h = H7h;
    t7l = H7l;

    _hmac_opad();

    _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 128
  // output — multiple of 64


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0h = 0,
        h0l = 0,
        h1h = 0,
        h1l = 0,
        h2h = 0,
        h2l = 0,
        h3h = 0,
        h3l = 0,
        h4h = 0,
        h4l = 0,
        h5h = 0,
        h5l = 0,
        h6h = 0,
        h6l = 0,
        h7h = 0,
        h7l = 0,
        t0h = 0,
        t0l = 0,
        t1h = 0,
        t1l = 0,
        t2h = 0,
        t2l = 0,
        t3h = 0,
        t3l = 0,
        t4h = 0,
        t4l = 0,
        t5h = 0,
        t5l = 0,
        t6h = 0,
        t6l = 0,
        t7h = 0,
        t7l = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0h = t0h = H0h;
    h0l = t0l = H0l;
    h1h = t1h = H1h;
    h1l = t1l = H1l;
    h2h = t2h = H2h;
    h2l = t2l = H2l;
    h3h = t3h = H3h;
    h3l = t3l = H3l;
    h4h = t4h = H4h;
    h4l = t4l = H4l;
    h5h = t5h = H5h;
    h5l = t5l = H5l;
    h6h = t6h = H6h;
    h6l = t6l = H6l;
    h7h = t7h = H7h;
    h7l = t7l = H7l;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

      t0h = H0h;
      t0l = H0l;
      t1h = H1h;
      t1l = H1l;
      t2h = H2h;
      t2l = H2l;
      t3h = H3h;
      t3l = H3l;
      t4h = H4h;
      t4l = H4l;
      t5h = H5h;
      t5l = H5l;
      t6h = H6h;
      t6l = H6l;
      t7h = H7h;
      t7l = H7l;

      _hmac_opad();

      _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

      t0h = H0h;
      t0l = H0l;
      t1h = H1h;
      t1l = H1l;
      t2h = H2h;
      t2l = H2l;
      t3h = H3h;
      t3l = H3l;
      t4h = H4h;
      t4l = H4l;
      t5h = H5h;
      t5l = H5l;
      t6h = H6h;
      t6l = H6l;
      t7h = H7h;
      t7l = H7l;
      h0h = h0h ^ H0h;
      h0l = h0l ^ H0l;
      h1h = h1h ^ H1h;
      h1l = h1l ^ H1l;
      h2h = h2h ^ H2h;
      h2l = h2l ^ H2l;
      h3h = h3h ^ H3h;
      h3l = h3l ^ H3l;
      h4h = h4h ^ H4h;
      h4l = h4l ^ H4l;
      h5h = h5h ^ H5h;
      h5l = h5l ^ H5l;
      h6h = h6h ^ H6h;
      h6l = h6l ^ H6l;
      h7h = h7h ^ H7h;
      h7l = h7l ^ H7l;
      count = count - 1 | 0;
    }

    H0h = h0h;
    H0l = h0l;
    H1h = h1h;
    H1l = h1l;
    H2h = h2h;
    H2l = h2l;
    H3h = h3h;
    H3l = h3l;
    H4h = h4h;
    H4l = h4l;
    H5h = h5h;
    H5l = h5l;
    H6h = h6h;
    H6l = h6l;
    H7h = h7h;
    H7l = h7l;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA512
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA512
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA512
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var _sha512_block_size = 128;
var _sha512_hash_size = 64;

var Sha512 = /*#__PURE__*/function (_Hash3) {
  _inherits(Sha512, _Hash3);

  var _super14 = _createSuper(Sha512);

  function Sha512() {
    var _this8;

    _classCallCheck(this, Sha512);

    _this8 = _super14.call(this);
    _this8.NAME = 'sha512';
    _this8.BLOCK_SIZE = _sha512_block_size;
    _this8.HASH_SIZE = _sha512_hash_size;
    _this8.heap = _heap_init();
    _this8.asm = sha512_asm({
      Uint8Array: Uint8Array
    }, null, _this8.heap.buffer);

    _this8.reset();

    return _this8;
  }

  return _createClass(Sha512);
}(Hash);

Sha512.NAME = 'sha512';

var Hmac = /*#__PURE__*/function () {
  function Hmac(hash, password, verify) {
    _classCallCheck(this, Hmac);

    if (!hash.HASH_SIZE) throw new SyntaxError("option 'hash' supplied doesn't seem to be a valid hash function");
    this.hash = hash;
    this.BLOCK_SIZE = this.hash.BLOCK_SIZE;
    this.HMAC_SIZE = this.hash.HASH_SIZE;
    this.result = null;
    this.key = _hmac_key(this.hash, password);
    var ipad = new Uint8Array(this.key);

    for (var i = 0; i < ipad.length; ++i) {
      ipad[i] ^= 0x36;
    }

    this.hash.reset().process(ipad);

    if (verify !== undefined) {
      this._hmac_init_verify(verify);
    } else {
      this.verify = null;
    }
  }

  _createClass(Hmac, [{
    key: "process",
    value: function process(data) {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      this.hash.process(data);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var inner_result = this.hash.finish().result;
      var opad = new Uint8Array(this.key);

      for (var i = 0; i < opad.length; ++i) {
        opad[i] ^= 0x5c;
      }

      var verify = this.verify;
      var result = this.hash.reset().process(opad).process(inner_result).finish().result;

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var _i5 = 0; _i5 < verify.length; _i5++) {
            diff |= verify[_i5] ^ result[_i5];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      }

      this.result = result;
      return this;
    }
  }, {
    key: "_hmac_init_verify",
    value: function _hmac_init_verify(verify) {
      if (verify.length !== this.HMAC_SIZE) throw new IllegalArgumentError('illegal verification tag size');
      this.verify = verify;
    }
  }]);

  return Hmac;
}();

function _hmac_key(hash, password) {
  var key = new Uint8Array(hash.BLOCK_SIZE);

  if (password.length > hash.BLOCK_SIZE) {
    key.set(hash.reset().process(password).finish().result);
  } else {
    key.set(password);
  }

  return key;
}

var HmacSha1 = /*#__PURE__*/function (_Hmac) {
  _inherits(HmacSha1, _Hmac);

  var _super15 = _createSuper(HmacSha1);

  function HmacSha1(password, verify) {
    var _this9;

    _classCallCheck(this, HmacSha1);

    var hash = new Sha1(); // Calculate ipad, init the underlying engine, calculate this.key

    _this9 = _super15.call(this, hash, password, verify);

    _this9.reset();

    if (verify !== undefined) {
      _this9._hmac_init_verify(verify);
    } else {
      _this9.verify = null;
    }

    return _possibleConstructorReturn(_this9, _assertThisInitialized(_this9));
  }

  _createClass(HmacSha1, [{
    key: "reset",
    value: function reset() {
      this.result = null;
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha1_hash_size);
      result.set(heap.subarray(0, _sha1_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha1;
}(Hmac);

var HmacSha256 = /*#__PURE__*/function (_Hmac2) {
  _inherits(HmacSha256, _Hmac2);

  var _super16 = _createSuper(HmacSha256);

  function HmacSha256(password, verify) {
    var _this10;

    _classCallCheck(this, HmacSha256);

    var hash = new Sha256(); // Calculate ipad, init the underlying engine, calculate this.key

    _this10 = _super16.call(this, hash, password, verify);

    _this10.reset();

    if (verify !== undefined) {
      _this10._hmac_init_verify(verify);
    } else {
      _this10.verify = null;
    }

    return _possibleConstructorReturn(_this10, _assertThisInitialized(_this10));
  }

  _createClass(HmacSha256, [{
    key: "reset",
    value: function reset() {
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.key === null) throw new IllegalStateError('no key is associated with the instance');
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha256_hash_size);
      result.set(heap.subarray(0, _sha256_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha256;
}(Hmac);

var HmacSha512 = /*#__PURE__*/function (_Hmac3) {
  _inherits(HmacSha512, _Hmac3);

  var _super17 = _createSuper(HmacSha512);

  function HmacSha512(password, verify) {
    var _this11;

    _classCallCheck(this, HmacSha512);

    var hash = new Sha512(); // Calculate ipad, init the underlying engine, calculate this.key

    _this11 = _super17.call(this, hash, password, verify);

    _this11.reset();

    if (verify !== undefined) {
      _this11._hmac_init_verify(verify);
    } else {
      _this11.verify = null;
    }

    return _possibleConstructorReturn(_this11, _assertThisInitialized(_this11));
  }

  _createClass(HmacSha512, [{
    key: "reset",
    value: function reset() {
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63], key[64] << 24 | key[65] << 16 | key[66] << 8 | key[67], key[68] << 24 | key[69] << 16 | key[70] << 8 | key[71], key[72] << 24 | key[73] << 16 | key[74] << 8 | key[75], key[76] << 24 | key[77] << 16 | key[78] << 8 | key[79], key[80] << 24 | key[81] << 16 | key[82] << 8 | key[83], key[84] << 24 | key[85] << 16 | key[86] << 8 | key[87], key[88] << 24 | key[89] << 16 | key[90] << 8 | key[91], key[92] << 24 | key[93] << 16 | key[94] << 8 | key[95], key[96] << 24 | key[97] << 16 | key[98] << 8 | key[99], key[100] << 24 | key[101] << 16 | key[102] << 8 | key[103], key[104] << 24 | key[105] << 16 | key[106] << 8 | key[107], key[108] << 24 | key[109] << 16 | key[110] << 8 | key[111], key[112] << 24 | key[113] << 16 | key[114] << 8 | key[115], key[116] << 24 | key[117] << 16 | key[118] << 8 | key[119], key[120] << 24 | key[121] << 16 | key[122] << 8 | key[123], key[124] << 24 | key[125] << 16 | key[126] << 8 | key[127]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.key === null) throw new IllegalStateError('no key is associated with the instance');
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha512_hash_size);
      result.set(heap.subarray(0, _sha512_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha512;
}(Hmac);

function Pbkdf2HmacSha1(password, salt, count, length) {
  var hmac = new HmacSha1(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

function Pbkdf2HmacSha256(password, salt, count, length) {
  var hmac = new HmacSha256(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

function Pbkdf2HmacSha512(password, salt, count, length) {
  var hmac = new HmacSha512(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

var RSA = /*#__PURE__*/function () {
  function RSA(key) {
    _classCallCheck(this, RSA);

    var l = key.length;
    if (l !== 2 && l !== 3 && l !== 8) throw new SyntaxError('unexpected key type');
    var k0 = new Modulus(new BigNumber(key[0]));
    var k1 = new BigNumber(key[1]);
    this.key = {
      0: k0,
      1: k1
    };

    if (l > 2) {
      this.key[2] = new BigNumber(key[2]);
    }

    if (l > 3) {
      this.key[3] = new Modulus(new BigNumber(key[3]));
      this.key[4] = new Modulus(new BigNumber(key[4]));
      this.key[5] = new BigNumber(key[5]);
      this.key[6] = new BigNumber(key[6]);
      this.key[7] = new BigNumber(key[7]);
    }
  }

  _createClass(RSA, [{
    key: "encrypt",
    value: function encrypt(msg) {
      if (!this.key) throw new IllegalStateError('no key is associated with the instance');
      if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');
      var m = this.key[0];
      var e = this.key[1];
      var result = m.power(msg, e).toBytes();
      var bytelen = m.bitLength + 7 >> 3;

      if (result.length < bytelen) {
        var r = new Uint8Array(bytelen);
        r.set(result, bytelen - result.length);
        result = r;
      }

      this.result = result;
      return this;
    }
  }, {
    key: "decrypt",
    value: function decrypt(msg) {
      if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');
      var result;
      var m;

      if (this.key[3] !== undefined) {
        m = this.key[0];
        var p = this.key[3];
        var q = this.key[4];
        var dp = this.key[5];
        var dq = this.key[6];
        var u = this.key[7];
        var x = p.power(msg, dp);
        var y = q.power(msg, dq);
        var t = x.subtract(y);

        while (t.sign < 0) {
          t = t.add(p);
        }

        var h = p.reduce(u.multiply(t));
        result = h.multiply(q).add(y).clamp(m.bitLength).toBytes();
      } else {
        m = this.key[0];
        var d = this.key[2];
        result = m.power(msg, d).toBytes();
      }

      var bytelen = m.bitLength + 7 >> 3;

      if (result.length < bytelen) {
        var r = new Uint8Array(bytelen);
        r.set(result, bytelen - result.length);
        result = r;
      }

      this.result = result;
      return this;
    }
  }]);

  return RSA;
}();

var RSA_OAEP = /*#__PURE__*/function () {
  function RSA_OAEP(key, hash, label) {
    _classCallCheck(this, RSA_OAEP);

    this.rsa = new RSA(key);
    this.hash = hash;

    if (label !== undefined) {
      this.label = label.length > 0 ? label : null;
    } else {
      this.label = null;
    }
  }

  _createClass(RSA_OAEP, [{
    key: "encrypt",
    value: function encrypt(data, random) {
      var key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
      var hash_size = this.hash.HASH_SIZE;
      var data_length = data.byteLength || data.length || 0;
      var ps_length = key_size - data_length - 2 * hash_size - 2;
      if (data_length > key_size - 2 * this.hash.HASH_SIZE - 2) throw new IllegalArgumentError('data too large');
      var message = new Uint8Array(key_size);
      var seed = message.subarray(1, hash_size + 1);
      var data_block = message.subarray(hash_size + 1);
      data_block.set(data, hash_size + ps_length + 1);
      data_block.set(this.hash.process(this.label || new Uint8Array(0)).finish().result, 0);
      data_block[hash_size + ps_length] = 1;

      if (random !== undefined) {
        if (seed.length !== random.length) throw new IllegalArgumentError('random size must equal the hash size');
        seed.set(random);
      } else {
        getRandomValues(seed);
      }

      var data_block_mask = this.RSA_MGF1_generate(seed, data_block.length);

      for (var i = 0; i < data_block.length; i++) {
        data_block[i] ^= data_block_mask[i];
      }

      var seed_mask = this.RSA_MGF1_generate(data_block, seed.length);

      for (var _i6 = 0; _i6 < seed.length; _i6++) {
        seed[_i6] ^= seed_mask[_i6];
      }

      this.rsa.encrypt(new BigNumber(message));
      return new Uint8Array(this.rsa.result);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      if (!this.rsa.key) throw new IllegalStateError('no key is associated with the instance');
      var key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
      var hash_size = this.hash.HASH_SIZE;
      var data_length = data.byteLength || data.length || 0;
      if (data_length !== key_size) throw new IllegalArgumentError('bad data');
      this.rsa.decrypt(new BigNumber(data));
      var z = this.rsa.result[0];
      var seed = this.rsa.result.subarray(1, hash_size + 1);
      var data_block = this.rsa.result.subarray(hash_size + 1);
      if (z !== 0) throw new SecurityError('decryption failed');
      var seed_mask = this.RSA_MGF1_generate(data_block, seed.length);

      for (var i = 0; i < seed.length; i++) {
        seed[i] ^= seed_mask[i];
      }

      var data_block_mask = this.RSA_MGF1_generate(seed, data_block.length);

      for (var _i7 = 0; _i7 < data_block.length; _i7++) {
        data_block[_i7] ^= data_block_mask[_i7];
      }

      var lhash = this.hash.reset().process(this.label || new Uint8Array(0)).finish().result;

      for (var _i8 = 0; _i8 < hash_size; _i8++) {
        if (lhash[_i8] !== data_block[_i8]) throw new SecurityError('decryption failed');
      }

      var ps_end = hash_size;

      for (; ps_end < data_block.length; ps_end++) {
        var psz = data_block[ps_end];
        if (psz === 1) break;
        if (psz !== 0) throw new SecurityError('decryption failed');
      }

      if (ps_end === data_block.length) throw new SecurityError('decryption failed');
      this.rsa.result = data_block.subarray(ps_end + 1);
      return new Uint8Array(this.rsa.result);
    }
  }, {
    key: "RSA_MGF1_generate",
    value: function RSA_MGF1_generate(seed) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var hash_size = this.hash.HASH_SIZE; //    if ( length > (hash_size * 0x100000000) )
      //        throw new IllegalArgumentError("mask length too large");

      var mask = new Uint8Array(length);
      var counter = new Uint8Array(4);
      var chunks = Math.ceil(length / hash_size);

      for (var i = 0; i < chunks; i++) {
        counter[0] = i >>> 24, counter[1] = i >>> 16 & 255, counter[2] = i >>> 8 & 255, counter[3] = i & 255;
        var submask = mask.subarray(i * hash_size);
        var chunk = this.hash.reset().process(seed).process(counter).finish().result;
        if (chunk.length > submask.length) chunk = chunk.subarray(0, submask.length);
        submask.set(chunk);
      }

      return mask;
    }
  }]);

  return RSA_OAEP;
}();

var RSA_PSS = /*#__PURE__*/function () {
  function RSA_PSS(key, hash) {
    var saltLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;

    _classCallCheck(this, RSA_PSS);

    this.rsa = new RSA(key);
    this.hash = hash;
    this.saltLength = saltLength;
    if (this.saltLength < 0) throw new TypeError('saltLength should be a non-negative number');
    if (this.rsa.key !== null && Math.ceil((this.rsa.key[0].bitLength - 1) / 8) < this.hash.HASH_SIZE + this.saltLength + 2) throw new SyntaxError('saltLength is too large');
  }

  _createClass(RSA_PSS, [{
    key: "sign",
    value: function sign(data, random) {
      var key_bits = this.rsa.key[0].bitLength;
      var hash_size = this.hash.HASH_SIZE;
      var message_length = Math.ceil((key_bits - 1) / 8);
      var salt_length = this.saltLength;
      var ps_length = message_length - salt_length - hash_size - 2;
      var message = new Uint8Array(message_length);
      var h_block = message.subarray(message_length - hash_size - 1, message_length - 1);
      var d_block = message.subarray(0, message_length - hash_size - 1);
      var d_salt = d_block.subarray(ps_length + 1);
      var m_block = new Uint8Array(8 + hash_size + salt_length);
      var m_hash = m_block.subarray(8, 8 + hash_size);
      var m_salt = m_block.subarray(8 + hash_size);
      m_hash.set(this.hash.process(data).finish().result);

      if (salt_length > 0) {
        if (random !== undefined) {
          if (m_salt.length !== random.length) throw new IllegalArgumentError('random size must equal the salt size');
          m_salt.set(random);
        } else {
          getRandomValues(m_salt);
        }
      }

      d_block[ps_length] = 1;
      d_salt.set(m_salt);
      h_block.set(this.hash.reset().process(m_block).finish().result);
      var d_block_mask = this.RSA_MGF1_generate(h_block, d_block.length);

      for (var i = 0; i < d_block.length; i++) {
        d_block[i] ^= d_block_mask[i];
      }

      message[message_length - 1] = 0xbc;
      var zbits = 8 * message_length - key_bits + 1;
      if (zbits % 8) message[0] &= 0xff >>> zbits;
      this.rsa.decrypt(new BigNumber(message));
      return this.rsa.result;
    }
  }, {
    key: "verify",
    value: function verify(signature, data) {
      var key_bits = this.rsa.key[0].bitLength;
      var hash_size = this.hash.HASH_SIZE;
      var message_length = Math.ceil((key_bits - 1) / 8);
      var salt_length = this.saltLength;
      var ps_length = message_length - salt_length - hash_size - 2;
      this.rsa.encrypt(new BigNumber(signature));
      var message = this.rsa.result;
      if (message[message_length - 1] !== 0xbc) throw new SecurityError('bad signature');
      var h_block = message.subarray(message_length - hash_size - 1, message_length - 1);
      var d_block = message.subarray(0, message_length - hash_size - 1);
      var d_salt = d_block.subarray(ps_length + 1);
      var zbits = 8 * message_length - key_bits + 1;
      if (zbits % 8 && message[0] >>> 8 - zbits) throw new SecurityError('bad signature');
      var d_block_mask = this.RSA_MGF1_generate(h_block, d_block.length);

      for (var i = 0; i < d_block.length; i++) {
        d_block[i] ^= d_block_mask[i];
      }

      if (zbits % 8) message[0] &= 0xff >>> zbits;

      for (var _i9 = 0; _i9 < ps_length; _i9++) {
        if (d_block[_i9] !== 0) throw new SecurityError('bad signature');
      }

      if (d_block[ps_length] !== 1) throw new SecurityError('bad signature');
      var m_block = new Uint8Array(8 + hash_size + salt_length);
      var m_hash = m_block.subarray(8, 8 + hash_size);
      var m_salt = m_block.subarray(8 + hash_size);
      m_hash.set(this.hash.reset().process(data).finish().result);
      m_salt.set(d_salt);
      var h_block_verify = this.hash.reset().process(m_block).finish().result;

      for (var _i10 = 0; _i10 < hash_size; _i10++) {
        if (h_block[_i10] !== h_block_verify[_i10]) throw new SecurityError('bad signature');
      }
    }
  }, {
    key: "RSA_MGF1_generate",
    value: function RSA_MGF1_generate(seed) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var hash_size = this.hash.HASH_SIZE; //    if ( length > (hash_size * 0x100000000) )
      //        throw new IllegalArgumentError("mask length too large");

      var mask = new Uint8Array(length);
      var counter = new Uint8Array(4);
      var chunks = Math.ceil(length / hash_size);

      for (var i = 0; i < chunks; i++) {
        counter[0] = i >>> 24, counter[1] = i >>> 16 & 255, counter[2] = i >>> 8 & 255, counter[3] = i & 255;
        var submask = mask.subarray(i * hash_size);
        var chunk = this.hash.reset().process(seed).process(counter).finish().result;
        if (chunk.length > submask.length) chunk = chunk.subarray(0, submask.length);
        submask.set(chunk);
      }

      return mask;
    }
  }]);

  return RSA_PSS;
}();

var RSA_PKCS1_v1_5 = /*#__PURE__*/function () {
  function RSA_PKCS1_v1_5(key, hash) {
    _classCallCheck(this, RSA_PKCS1_v1_5);

    this.rsa = new RSA(key);
    this.hash = hash;
  }

  _createClass(RSA_PKCS1_v1_5, [{
    key: "sign",
    value: function sign(data) {
      if (!this.rsa.key) {
        throw new IllegalStateError('no key is associated with the instance');
      }

      var prefix = getHashPrefix(this.hash);
      var hash_size = this.hash.HASH_SIZE;
      var t_len = prefix.length + hash_size;
      var k = this.rsa.key[0].bitLength + 7 >> 3;

      if (k < t_len + 11) {
        throw new Error('Message too long');
      }

      var m_hash = new Uint8Array(hash_size);
      m_hash.set(this.hash.process(data).finish().result); // EM = 0x00 || 0x01 || PS || 0x00 || T

      var em = new Uint8Array(k);
      var i = 0;
      em[i++] = 0; // 0x00

      em[i++] = 1; // 0x01
      // PS

      for (i; i < k - t_len - 1; i++) {
        em[i] = 0xff;
      }

      em[i++] = 0;
      em.set(prefix, i); // 0x00
      // T

      em.set(m_hash, em.length - hash_size);
      this.rsa.decrypt(new BigNumber(em));
      return this.rsa.result;
    }
  }, {
    key: "verify",
    value: function verify(signature, data) {
      var prefix = getHashPrefix(this.hash);
      var hash_size = this.hash.HASH_SIZE;
      var t_len = prefix.length + hash_size;
      var k = this.rsa.key[0].bitLength + 7 >> 3;

      if (k < t_len + 11) {
        throw new SecurityError('Bad signature');
      }

      this.rsa.encrypt(new BigNumber(signature));
      var m_hash = new Uint8Array(hash_size);
      m_hash.set(this.hash.process(data).finish().result);
      var res = 1; // EM = 0x00 || 0x01 || PS || 0x00 || T

      var decryptedSignature = this.rsa.result;
      var i = 0;
      res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00

      res &= decryptedSignature[i++] === 1 ? 1 : 0; // 0x01
      // PS

      for (i; i < k - t_len - 1; i++) {
        res &= decryptedSignature[i] === 0xff ? 1 : 0;
      }

      res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00
      // T

      var j = 0;
      var n = i + prefix.length; // prefix

      for (i; i < n; i++) {
        res &= decryptedSignature[i] === prefix[j++] ? 1 : 0;
      }

      j = 0;
      n = i + m_hash.length; // hash

      for (i; i < n; i++) {
        res &= decryptedSignature[i] === m_hash[j++] ? 1 : 0;
      }

      if (!res) {
        throw new SecurityError('Bad signature');
      }
    }
  }]);

  return RSA_PKCS1_v1_5;
}();

var HASH_PREFIXES = {
  sha1: new Uint8Array([0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14]),
  sha256: new Uint8Array([0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20]),
  sha384: new Uint8Array([0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30]),
  sha512: new Uint8Array([0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40])
};

function getHashPrefix(hash) {
  var prefix = HASH_PREFIXES[hash.NAME];

  if (!prefix) {
    throw new Error("Cannot get hash prefix for hash algorithm '" + hash.NAME + "'");
  }

  return prefix;
}



/***/ }),

/***/ 1331:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Any": function() { return /* binding */ Any; },
  "BaseBlock": function() { return /* binding */ BaseBlock; },
  "BaseStringBlock": function() { return /* binding */ BaseStringBlock; },
  "BitString": function() { return /* binding */ BitString; },
  "BmpString": function() { return /* binding */ BmpString; },
  "Boolean": function() { return /* binding */ _Boolean; },
  "CharacterString": function() { return /* binding */ CharacterString; },
  "Choice": function() { return /* binding */ Choice; },
  "Constructed": function() { return /* binding */ Constructed; },
  "DATE": function() { return /* binding */ DATE; },
  "DateTime": function() { return /* binding */ DateTime; },
  "Duration": function() { return /* binding */ Duration; },
  "EndOfContent": function() { return /* binding */ EndOfContent; },
  "Enumerated": function() { return /* binding */ Enumerated; },
  "GeneralString": function() { return /* binding */ GeneralString; },
  "GeneralizedTime": function() { return /* binding */ GeneralizedTime; },
  "GraphicString": function() { return /* binding */ GraphicString; },
  "HexBlock": function() { return /* binding */ HexBlock; },
  "IA5String": function() { return /* binding */ IA5String; },
  "Integer": function() { return /* binding */ Integer; },
  "Null": function() { return /* binding */ Null; },
  "NumericString": function() { return /* binding */ NumericString; },
  "ObjectIdentifier": function() { return /* binding */ ObjectIdentifier; },
  "OctetString": function() { return /* binding */ OctetString; },
  "Primitive": function() { return /* binding */ Primitive; },
  "PrintableString": function() { return /* binding */ PrintableString; },
  "RawData": function() { return /* binding */ RawData; },
  "RelativeObjectIdentifier": function() { return /* binding */ RelativeObjectIdentifier; },
  "Repeated": function() { return /* binding */ Repeated; },
  "Sequence": function() { return /* binding */ Sequence; },
  "Set": function() { return /* binding */ Set; },
  "TIME": function() { return /* binding */ TIME; },
  "TeletexString": function() { return /* binding */ TeletexString; },
  "TimeOfDay": function() { return /* binding */ TimeOfDay; },
  "UTCTime": function() { return /* binding */ UTCTime; },
  "UniversalString": function() { return /* binding */ UniversalString; },
  "Utf8String": function() { return /* binding */ Utf8String; },
  "ValueBlock": function() { return /* binding */ ValueBlock; },
  "VideotexString": function() { return /* binding */ VideotexString; },
  "ViewWriter": function() { return /* binding */ ViewWriter; },
  "VisibleString": function() { return /* binding */ VisibleString; },
  "compareSchema": function() { return /* binding */ compareSchema; },
  "fromBER": function() { return /* binding */ fromBER; },
  "verifySchema": function() { return /* binding */ verifySchema; }
});

// EXTERNAL MODULE: ../library/node_modules/pvtsutils/build/index.js
var build = __webpack_require__(5774);
;// CONCATENATED MODULE: ../library/node_modules/pvutils/build/utils.es.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 Copyright (c) Peculiar Ventures, LLC
*/
function getUTCDate(date) {
  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
}

function getParametersValue(parameters, name, defaultValue) {
  var _a;

  if (parameters instanceof Object === false) {
    return defaultValue;
  }

  return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;
}

function bufferToHexCodes(inputBuffer) {
  var inputOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var inputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : inputBuffer.byteLength - inputOffset;
  var insertSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var result = "";

  var _iterator = _createForOfIteratorHelper(new Uint8Array(inputBuffer, inputOffset, inputLength)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      var str = item.toString(16).toUpperCase();

      if (str.length === 1) {
        result += "0";
      }

      result += str;

      if (insertSpace) {
        result += " ";
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result.trim();
}

function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof ArrayBuffer)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be \"ArrayBuffer\"";
    return false;
  }

  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }

  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }

  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }

  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }

  return true;
}

function utilFromBase(inputBuffer, inputBase) {
  var result = 0;

  if (inputBuffer.length === 1) {
    return inputBuffer[0];
  }

  for (var i = inputBuffer.length - 1; i >= 0; i--) {
    result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);
  }

  return result;
}

function utilToBase(value, base) {
  var reserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var internalReserved = reserved;
  var internalValue = value;
  var result = 0;
  var biggest = Math.pow(2, base);

  for (var i = 1; i < 8; i++) {
    if (value < biggest) {
      var retBuf = void 0;

      if (internalReserved < 0) {
        retBuf = new ArrayBuffer(i);
        result = i;
      } else {
        if (internalReserved < i) {
          return new ArrayBuffer(0);
        }

        retBuf = new ArrayBuffer(internalReserved);
        result = internalReserved;
      }

      var retView = new Uint8Array(retBuf);

      for (var j = i - 1; j >= 0; j--) {
        var basis = Math.pow(2, j * base);
        retView[result - j - 1] = Math.floor(internalValue / basis);
        internalValue -= retView[result - j - 1] * basis;
      }

      return retBuf;
    }

    biggest *= Math.pow(2, base);
  }

  return new ArrayBuffer(0);
}

function utilConcatBuf() {
  var outputLength = 0;
  var prevLength = 0;

  for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {
    buffers[_key] = arguments[_key];
  }

  for (var _i = 0, _buffers = buffers; _i < _buffers.length; _i++) {
    var buffer = _buffers[_i];
    outputLength += buffer.byteLength;
  }

  var retBuf = new ArrayBuffer(outputLength);
  var retView = new Uint8Array(retBuf);

  for (var _i2 = 0, _buffers2 = buffers; _i2 < _buffers2.length; _i2++) {
    var _buffer = _buffers2[_i2];
    retView.set(new Uint8Array(_buffer), prevLength);
    prevLength += _buffer.byteLength;
  }

  return retBuf;
}

function utilConcatView() {
  var outputLength = 0;
  var prevLength = 0;

  for (var _len2 = arguments.length, views = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    views[_key2] = arguments[_key2];
  }

  for (var _i3 = 0, _views = views; _i3 < _views.length; _i3++) {
    var view = _views[_i3];
    outputLength += view.length;
  }

  var retBuf = new ArrayBuffer(outputLength);
  var retView = new Uint8Array(retBuf);

  for (var _i4 = 0, _views2 = views; _i4 < _views2.length; _i4++) {
    var _view = _views2[_i4];
    retView.set(_view, prevLength);
    prevLength += _view.length;
  }

  return retView;
}

function utilDecodeTC() {
  var buf = new Uint8Array(this.valueHex);

  if (this.valueHex.byteLength >= 2) {
    var condition1 = buf[0] === 0xFF && buf[1] & 0x80;
    var condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;

    if (condition1 || condition2) {
      this.warnings.push("Needlessly long format");
    }
  }

  var bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  var bigIntView = new Uint8Array(bigIntBuffer);

  for (var i = 0; i < this.valueHex.byteLength; i++) {
    bigIntView[i] = 0;
  }

  bigIntView[0] = buf[0] & 0x80;
  var bigInt = utilFromBase(bigIntView, 8);
  var smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  var smallIntView = new Uint8Array(smallIntBuffer);

  for (var j = 0; j < this.valueHex.byteLength; j++) {
    smallIntView[j] = buf[j];
  }

  smallIntView[0] &= 0x7F;
  var smallInt = utilFromBase(smallIntView, 8);
  return smallInt - bigInt;
}

function utilEncodeTC(value) {
  var modValue = value < 0 ? value * -1 : value;
  var bigInt = 128;

  for (var i = 1; i < 8; i++) {
    if (modValue <= bigInt) {
      if (value < 0) {
        var smallInt = bigInt - modValue;

        var _retBuf = utilToBase(smallInt, 8, i);

        var _retView = new Uint8Array(_retBuf);

        _retView[0] |= 0x80;
        return _retBuf;
      }

      var retBuf = utilToBase(modValue, 8, i);
      var retView = new Uint8Array(retBuf);

      if (retView[0] & 0x80) {
        var tempBuf = retBuf.slice(0);
        var tempView = new Uint8Array(tempBuf);
        retBuf = new ArrayBuffer(retBuf.byteLength + 1);
        retView = new Uint8Array(retBuf);

        for (var k = 0; k < tempBuf.byteLength; k++) {
          retView[k + 1] = tempView[k];
        }

        retView[0] = 0x00;
      }

      return retBuf;
    }

    bigInt *= Math.pow(2, 8);
  }

  return new ArrayBuffer(0);
}

function isEqualBuffer(inputBuffer1, inputBuffer2) {
  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {
    return false;
  }

  var view1 = new Uint8Array(inputBuffer1);
  var view2 = new Uint8Array(inputBuffer2);

  for (var i = 0; i < view1.length; i++) {
    if (view1[i] !== view2[i]) {
      return false;
    }
  }

  return true;
}

function padNumber(inputNumber, fullLength) {
  var str = inputNumber.toString(10);

  if (fullLength < str.length) {
    return "";
  }

  var dif = fullLength - str.length;
  var padding = new Array(dif);

  for (var i = 0; i < dif; i++) {
    padding[i] = "0";
  }

  var paddingString = padding.join("");
  return paddingString.concat(str);
}

var base64Template = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var base64UrlTemplate = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";

function toBase64(input) {
  var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var skipPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var skipLeadingZeros = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var i = 0;
  var flag1 = 0;
  var flag2 = 0;
  var output = "";
  var template = useUrlTemplate ? base64UrlTemplate : base64Template;

  if (skipLeadingZeros) {
    var nonZeroPosition = 0;

    for (var _i5 = 0; _i5 < input.length; _i5++) {
      if (input.charCodeAt(_i5) !== 0) {
        nonZeroPosition = _i5;
        break;
      }
    }

    input = input.slice(nonZeroPosition);
  }

  while (i < input.length) {
    var chr1 = input.charCodeAt(i++);

    if (i >= input.length) {
      flag1 = 1;
    }

    var chr2 = input.charCodeAt(i++);

    if (i >= input.length) {
      flag2 = 1;
    }

    var chr3 = input.charCodeAt(i++);
    var enc1 = chr1 >> 2;
    var enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;
    var enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;
    var enc4 = chr3 & 0x3F;

    if (flag1 === 1) {
      enc3 = enc4 = 64;
    } else {
      if (flag2 === 1) {
        enc4 = 64;
      }
    }

    if (skipPadding) {
      if (enc3 === 64) {
        output += "".concat(template.charAt(enc1)).concat(template.charAt(enc2));
      } else {
        if (enc4 === 64) {
          output += "".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3));
        } else {
          output += "".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3)).concat(template.charAt(enc4));
        }
      }
    } else {
      output += "".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3)).concat(template.charAt(enc4));
    }
  }

  return output;
}

function fromBase64(input) {
  var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var cutTailZeros = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var template = useUrlTemplate ? base64UrlTemplate : base64Template;

  function indexOf(toSearch) {
    for (var _i6 = 0; _i6 < 64; _i6++) {
      if (template.charAt(_i6) === toSearch) return _i6;
    }

    return 64;
  }

  function test(incoming) {
    return incoming === 64 ? 0x00 : incoming;
  }

  var i = 0;
  var output = "";

  while (i < input.length) {
    var enc1 = indexOf(input.charAt(i++));
    var enc2 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    var enc3 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    var enc4 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    var chr1 = test(enc1) << 2 | test(enc2) >> 4;
    var chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;
    var chr3 = (test(enc3) & 0x03) << 6 | test(enc4);
    output += String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output += String.fromCharCode(chr2);
    }

    if (enc4 !== 64) {
      output += String.fromCharCode(chr3);
    }
  }

  if (cutTailZeros) {
    var outputLength = output.length;
    var nonZeroStart = -1;

    for (var _i7 = outputLength - 1; _i7 >= 0; _i7--) {
      if (output.charCodeAt(_i7) !== 0) {
        nonZeroStart = _i7;
        break;
      }
    }

    if (nonZeroStart !== -1) {
      output = output.slice(0, nonZeroStart + 1);
    } else {
      output = "";
    }
  }

  return output;
}

function arrayBufferToString(buffer) {
  var resultString = "";
  var view = new Uint8Array(buffer);

  var _iterator2 = _createForOfIteratorHelper(view),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var element = _step2.value;
      resultString += String.fromCharCode(element);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return resultString;
}

function stringToArrayBuffer(str) {
  var stringLength = str.length;
  var resultBuffer = new ArrayBuffer(stringLength);
  var resultView = new Uint8Array(resultBuffer);

  for (var i = 0; i < stringLength; i++) {
    resultView[i] = str.charCodeAt(i);
  }

  return resultBuffer;
}

var log2 = Math.log(2);

function nearestPowerOf2(length) {
  var base = Math.log(length) / log2;
  var floor = Math.floor(base);
  var round = Math.round(base);
  return floor === round ? floor : round;
}

function clearProps(object, propsArray) {
  var _iterator3 = _createForOfIteratorHelper(propsArray),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var prop = _step3.value;
      delete object[prop];
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}


;// CONCATENATED MODULE: ../library/node_modules/asn1js/build/index.es.js
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _excluded = ["name", "optional", "primitiveSchema"],
    _excluded2 = ["value"],
    _excluded3 = ["isHexOnly"],
    _excluded4 = ["value", "isIndefiniteForm"],
    _excluded5 = ["value"],
    _excluded6 = ["isConstructed"],
    _excluded7 = ["idBlock", "lenBlock"],
    _excluded8 = ["unusedBits", "isConstructed"],
    _excluded9 = ["idBlock", "lenBlock"],
    _excluded10 = ["value"],
    _excluded11 = ["valueDec", "isFirstSid"],
    _excluded12 = ["value"],
    _excluded13 = ["valueDec"],
    _excluded14 = ["value"],
    _excluded15 = ["value", "valueDate"],
    _excluded16 = ["value"],
    _excluded17 = ["value", "local"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function index_es_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = index_es_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function index_es_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return index_es_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return index_es_arrayLikeToArray(o, minLen); }

function index_es_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/*!
 * Copyright (c) 2014, GMO GlobalSign
 * Copyright (c) 2015-2022, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */



function assertBigInt() {
  if (typeof BigInt === "undefined") {
    throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
  }
}

function concat(buffers) {
  var outputLength = 0;
  var prevLength = 0;

  for (var i = 0; i < buffers.length; i++) {
    var buffer = buffers[i];
    outputLength += buffer.byteLength;
  }

  var retView = new Uint8Array(outputLength);

  for (var _i = 0; _i < buffers.length; _i++) {
    var _buffer = buffers[_i];
    retView.set(new Uint8Array(_buffer), prevLength);
    prevLength += _buffer.byteLength;
  }

  return retView.buffer;
}

function index_es_checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof Uint8Array)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
    return false;
  }

  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }

  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }

  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }

  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }

  return true;
}

var ViewWriter = /*#__PURE__*/function () {
  function ViewWriter() {
    _classCallCheck(this, ViewWriter);

    this.items = [];
  }

  _createClass(ViewWriter, [{
    key: "write",
    value: function write(buf) {
      this.items.push(buf);
    }
  }, {
    key: "final",
    value: function final() {
      return concat(this.items);
    }
  }]);

  return ViewWriter;
}();

var powers2 = [new Uint8Array([1])];
var digitsString = "0123456789";
var NAME = "name";
var VALUE_HEX_VIEW = "valueHexView";
var IS_HEX_ONLY = "isHexOnly";
var ID_BLOCK = "idBlock";
var TAG_CLASS = "tagClass";
var TAG_NUMBER = "tagNumber";
var IS_CONSTRUCTED = "isConstructed";
var FROM_BER = "fromBER";
var TO_BER = "toBER";
var LOCAL = "local";
var EMPTY_STRING = "";
var EMPTY_BUFFER = new ArrayBuffer(0);
var EMPTY_VIEW = new Uint8Array(0);
var END_OF_CONTENT_NAME = "EndOfContent";
var OCTET_STRING_NAME = "OCTET STRING";
var BIT_STRING_NAME = "BIT STRING";

function HexBlock(BaseClass) {
  var _a;

  return _a = /*#__PURE__*/function (_BaseClass) {
    _inherits(Some, _BaseClass);

    var _super = _createSuper(Some);

    function Some() {
      var _this;

      _classCallCheck(this, Some);

      var _a;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      var params = args[0] || {};
      _this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;
      _this.valueHexView = params.valueHex ? build.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;
      return _this;
    }

    _createClass(Some, [{
      key: "valueHex",
      get: function get() {
        return this.valueHexView.slice().buffer;
      },
      set: function set(value) {
        this.valueHexView = new Uint8Array(value);
      }
    }, {
      key: "fromBER",
      value: function fromBER(inputBuffer, inputOffset, inputLength) {
        var view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;

        if (!index_es_checkBufferParams(this, view, inputOffset, inputLength)) {
          return -1;
        }

        var endLength = inputOffset + inputLength;
        this.valueHexView = view.subarray(inputOffset, endLength);

        if (!this.valueHexView.length) {
          this.warnings.push("Zero buffer length");
          return inputOffset;
        }

        this.blockLength = inputLength;
        return endLength;
      }
    }, {
      key: "toBER",
      value: function toBER() {
        var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (!this.isHexOnly) {
          this.error = "Flag 'isHexOnly' is not set, abort";
          return EMPTY_BUFFER;
        }

        if (sizeOnly) {
          return new ArrayBuffer(this.valueHexView.byteLength);
        }

        return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(Some.prototype), "toJSON", this).call(this)), {}, {
          isHexOnly: this.isHexOnly,
          valueHex: build.Convert.ToHex(this.valueHexView)
        });
      }
    }]);

    return Some;
  }(BaseClass), _a.NAME = "hexBlock", _a;
}

var LocalBaseBlock = /*#__PURE__*/function () {
  function LocalBaseBlock() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$blockLength = _ref.blockLength,
        blockLength = _ref$blockLength === void 0 ? 0 : _ref$blockLength,
        _ref$error = _ref.error,
        error = _ref$error === void 0 ? EMPTY_STRING : _ref$error,
        _ref$warnings = _ref.warnings,
        warnings = _ref$warnings === void 0 ? [] : _ref$warnings,
        _ref$valueBeforeDecod = _ref.valueBeforeDecode,
        valueBeforeDecode = _ref$valueBeforeDecod === void 0 ? EMPTY_VIEW : _ref$valueBeforeDecod;

    _classCallCheck(this, LocalBaseBlock);

    this.blockLength = blockLength;
    this.error = error;
    this.warnings = warnings;
    this.valueBeforeDecodeView = build.BufferSourceConverter.toUint8Array(valueBeforeDecode);
  }

  _createClass(LocalBaseBlock, [{
    key: "valueBeforeDecode",
    get: function get() {
      return this.valueBeforeDecodeView.slice().buffer;
    },
    set: function set(value) {
      this.valueBeforeDecodeView = new Uint8Array(value);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        blockName: this.constructor.NAME,
        blockLength: this.blockLength,
        error: this.error,
        warnings: this.warnings,
        valueBeforeDecode: build.Convert.ToHex(this.valueBeforeDecodeView)
      };
    }
  }], [{
    key: "blockName",
    value: function blockName() {
      return this.NAME;
    }
  }]);

  return LocalBaseBlock;
}();

LocalBaseBlock.NAME = "baseBlock";

var ValueBlock = /*#__PURE__*/function (_LocalBaseBlock) {
  _inherits(ValueBlock, _LocalBaseBlock);

  var _super2 = _createSuper(ValueBlock);

  function ValueBlock() {
    _classCallCheck(this, ValueBlock);

    return _super2.apply(this, arguments);
  }

  _createClass(ValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
    }
  }]);

  return ValueBlock;
}(LocalBaseBlock);

ValueBlock.NAME = "valueBlock";

var LocalIdentificationBlock = /*#__PURE__*/function (_HexBlock) {
  _inherits(LocalIdentificationBlock, _HexBlock);

  var _super3 = _createSuper(LocalIdentificationBlock);

  function LocalIdentificationBlock() {
    var _this2;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$idBlock = _ref2.idBlock,
        idBlock = _ref2$idBlock === void 0 ? {} : _ref2$idBlock;

    _classCallCheck(this, LocalIdentificationBlock);

    var _a, _b, _c, _d;

    _this2 = _super3.call(this);

    if (idBlock) {
      _this2.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;
      _this2.valueHexView = idBlock.valueHex ? build.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;
      _this2.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
      _this2.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
      _this2.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
    } else {
      _this2.tagClass = -1;
      _this2.tagNumber = -1;
      _this2.isConstructed = false;
    }

    return _this2;
  }

  _createClass(LocalIdentificationBlock, [{
    key: "toBER",
    value: function toBER() {
      var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var firstOctet = 0;

      switch (this.tagClass) {
        case 1:
          firstOctet |= 0x00;
          break;

        case 2:
          firstOctet |= 0x40;
          break;

        case 3:
          firstOctet |= 0x80;
          break;

        case 4:
          firstOctet |= 0xC0;
          break;

        default:
          this.error = "Unknown tag class";
          return EMPTY_BUFFER;
      }

      if (this.isConstructed) firstOctet |= 0x20;

      if (this.tagNumber < 31 && !this.isHexOnly) {
        var _retView = new Uint8Array(1);

        if (!sizeOnly) {
          var number = this.tagNumber;
          number &= 0x1F;
          firstOctet |= number;
          _retView[0] = firstOctet;
        }

        return _retView.buffer;
      }

      if (!this.isHexOnly) {
        var encodedBuf = utilToBase(this.tagNumber, 7);
        var encodedView = new Uint8Array(encodedBuf);
        var size = encodedBuf.byteLength;

        var _retView2 = new Uint8Array(size + 1);

        _retView2[0] = firstOctet | 0x1F;

        if (!sizeOnly) {
          for (var i = 0; i < size - 1; i++) {
            _retView2[i + 1] = encodedView[i] | 0x80;
          }

          _retView2[size] = encodedView[size - 1];
        }

        return _retView2.buffer;
      }

      var retView = new Uint8Array(this.valueHexView.byteLength + 1);
      retView[0] = firstOctet | 0x1F;

      if (!sizeOnly) {
        var curView = this.valueHexView;

        for (var _i2 = 0; _i2 < curView.length - 1; _i2++) {
          retView[_i2 + 1] = curView[_i2] | 0x80;
        }

        retView[this.valueHexView.byteLength] = curView[curView.length - 1];
      }

      return retView.buffer;
    }
  }, {
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, inputView, inputOffset, inputLength)) {
        return -1;
      }

      var intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);

      if (intBuffer.length === 0) {
        this.error = "Zero buffer length";
        return -1;
      }

      var tagClassMask = intBuffer[0] & 0xC0;

      switch (tagClassMask) {
        case 0x00:
          this.tagClass = 1;
          break;

        case 0x40:
          this.tagClass = 2;
          break;

        case 0x80:
          this.tagClass = 3;
          break;

        case 0xC0:
          this.tagClass = 4;
          break;

        default:
          this.error = "Unknown tag class";
          return -1;
      }

      this.isConstructed = (intBuffer[0] & 0x20) === 0x20;
      this.isHexOnly = false;
      var tagNumberMask = intBuffer[0] & 0x1F;

      if (tagNumberMask !== 0x1F) {
        this.tagNumber = tagNumberMask;
        this.blockLength = 1;
      } else {
        var count = 1;
        var intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
        var tagNumberBufferMaxLength = 255;

        while (intBuffer[count] & 0x80) {
          intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
          count++;

          if (count >= intBuffer.length) {
            this.error = "End of input reached before message was fully decoded";
            return -1;
          }

          if (count === tagNumberBufferMaxLength) {
            tagNumberBufferMaxLength += 255;

            var _tempBufferView = new Uint8Array(tagNumberBufferMaxLength);

            for (var i = 0; i < intTagNumberBuffer.length; i++) {
              _tempBufferView[i] = intTagNumberBuffer[i];
            }

            intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
          }
        }

        this.blockLength = count + 1;
        intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
        var tempBufferView = new Uint8Array(count);

        for (var _i3 = 0; _i3 < count; _i3++) {
          tempBufferView[_i3] = intTagNumberBuffer[_i3];
        }

        intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
        intTagNumberBuffer.set(tempBufferView);
        if (this.blockLength <= 9) this.tagNumber = utilFromBase(intTagNumberBuffer, 7);else {
          this.isHexOnly = true;
          this.warnings.push("Tag too long, represented as hex-coded");
        }
      }

      if (this.tagClass === 1 && this.isConstructed) {
        switch (this.tagNumber) {
          case 1:
          case 2:
          case 5:
          case 6:
          case 9:
          case 13:
          case 14:
          case 23:
          case 24:
          case 31:
          case 32:
          case 33:
          case 34:
            this.error = "Constructed encoding used for primitive type";
            return -1;
        }
      }

      return inputOffset + this.blockLength;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalIdentificationBlock.prototype), "toJSON", this).call(this)), {}, {
        tagClass: this.tagClass,
        tagNumber: this.tagNumber,
        isConstructed: this.isConstructed
      });
    }
  }]);

  return LocalIdentificationBlock;
}(HexBlock(LocalBaseBlock));

LocalIdentificationBlock.NAME = "identificationBlock";

var LocalLengthBlock = /*#__PURE__*/function (_LocalBaseBlock2) {
  _inherits(LocalLengthBlock, _LocalBaseBlock2);

  var _super4 = _createSuper(LocalLengthBlock);

  function LocalLengthBlock() {
    var _this3;

    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$lenBlock = _ref3.lenBlock,
        lenBlock = _ref3$lenBlock === void 0 ? {} : _ref3$lenBlock;

    _classCallCheck(this, LocalLengthBlock);

    var _a, _b, _c;

    _this3 = _super4.call(this);
    _this3.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;
    _this3.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
    _this3.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
    return _this3;
  }

  _createClass(LocalLengthBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var view = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, view, inputOffset, inputLength)) {
        return -1;
      }

      var intBuffer = view.subarray(inputOffset, inputOffset + inputLength);

      if (intBuffer.length === 0) {
        this.error = "Zero buffer length";
        return -1;
      }

      if (intBuffer[0] === 0xFF) {
        this.error = "Length block 0xFF is reserved by standard";
        return -1;
      }

      this.isIndefiniteForm = intBuffer[0] === 0x80;

      if (this.isIndefiniteForm) {
        this.blockLength = 1;
        return inputOffset + this.blockLength;
      }

      this.longFormUsed = !!(intBuffer[0] & 0x80);

      if (this.longFormUsed === false) {
        this.length = intBuffer[0];
        this.blockLength = 1;
        return inputOffset + this.blockLength;
      }

      var count = intBuffer[0] & 0x7F;

      if (count > 8) {
        this.error = "Too big integer";
        return -1;
      }

      if (count + 1 > intBuffer.length) {
        this.error = "End of input reached before message was fully decoded";
        return -1;
      }

      var lenOffset = inputOffset + 1;
      var lengthBufferView = view.subarray(lenOffset, lenOffset + count);
      if (lengthBufferView[count - 1] === 0x00) this.warnings.push("Needlessly long encoded length");
      this.length = utilFromBase(lengthBufferView, 8);
      if (this.longFormUsed && this.length <= 127) this.warnings.push("Unnecessary usage of long length form");
      this.blockLength = count + 1;
      return inputOffset + this.blockLength;
    }
  }, {
    key: "toBER",
    value: function toBER() {
      var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var retBuf;
      var retView;
      if (this.length > 127) this.longFormUsed = true;

      if (this.isIndefiniteForm) {
        retBuf = new ArrayBuffer(1);

        if (sizeOnly === false) {
          retView = new Uint8Array(retBuf);
          retView[0] = 0x80;
        }

        return retBuf;
      }

      if (this.longFormUsed) {
        var encodedBuf = utilToBase(this.length, 8);

        if (encodedBuf.byteLength > 127) {
          this.error = "Too big length";
          return EMPTY_BUFFER;
        }

        retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
        if (sizeOnly) return retBuf;
        var encodedView = new Uint8Array(encodedBuf);
        retView = new Uint8Array(retBuf);
        retView[0] = encodedBuf.byteLength | 0x80;

        for (var i = 0; i < encodedBuf.byteLength; i++) {
          retView[i + 1] = encodedView[i];
        }

        return retBuf;
      }

      retBuf = new ArrayBuffer(1);

      if (sizeOnly === false) {
        retView = new Uint8Array(retBuf);
        retView[0] = this.length;
      }

      return retBuf;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalLengthBlock.prototype), "toJSON", this).call(this)), {}, {
        isIndefiniteForm: this.isIndefiniteForm,
        longFormUsed: this.longFormUsed,
        length: this.length
      });
    }
  }]);

  return LocalLengthBlock;
}(LocalBaseBlock);

LocalLengthBlock.NAME = "lengthBlock";
var typeStore = {};

var BaseBlock = /*#__PURE__*/function (_LocalBaseBlock3) {
  _inherits(BaseBlock, _LocalBaseBlock3);

  var _super5 = _createSuper(BaseBlock);

  function BaseBlock() {
    var _this4;

    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref4$name = _ref4.name,
        name = _ref4$name === void 0 ? EMPTY_STRING : _ref4$name,
        _ref4$optional = _ref4.optional,
        optional = _ref4$optional === void 0 ? false : _ref4$optional,
        primitiveSchema = _ref4.primitiveSchema,
        parameters = _objectWithoutProperties(_ref4, _excluded);

    var valueBlockType = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, BaseBlock);

    _this4 = _super5.call(this, parameters);
    _this4.name = name;
    _this4.optional = optional;

    if (primitiveSchema) {
      _this4.primitiveSchema = primitiveSchema;
    }

    _this4.idBlock = new LocalIdentificationBlock(parameters);
    _this4.lenBlock = new LocalLengthBlock(parameters);
    _this4.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);
    return _this4;
  }

  _createClass(BaseBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);

      if (resultOffset === -1) {
        this.error = this.valueBlock.error;
        return resultOffset;
      }

      if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
      if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
      if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
      return resultOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      var _writer = writer || new ViewWriter();

      if (!writer) {
        prepareIndefiniteForm(this);
      }

      var idBlockBuf = this.idBlock.toBER(sizeOnly);

      _writer.write(idBlockBuf);

      if (this.lenBlock.isIndefiniteForm) {
        _writer.write(new Uint8Array([0x80]).buffer);

        this.valueBlock.toBER(sizeOnly, _writer);

        _writer.write(new ArrayBuffer(2));
      } else {
        var valueBlockBuf = this.valueBlock.toBER(sizeOnly);
        this.lenBlock.length = valueBlockBuf.byteLength;
        var lenBlockBuf = this.lenBlock.toBER(sizeOnly);

        _writer.write(lenBlockBuf);

        _writer.write(valueBlockBuf);
      }

      if (!writer) {
        return _writer.final();
      }

      return EMPTY_BUFFER;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var object = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(BaseBlock.prototype), "toJSON", this).call(this)), {}, {
        idBlock: this.idBlock.toJSON(),
        lenBlock: this.lenBlock.toJSON(),
        valueBlock: this.valueBlock.toJSON(),
        name: this.name,
        optional: this.optional
      });

      if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();
      return object;
    }
  }, {
    key: "toString",
    value: function toString() {
      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ascii";

      if (encoding === "ascii") {
        return this.onAsciiEncoding();
      }

      return build.Convert.ToHex(this.toBER());
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(build.Convert.ToHex(this.valueBlock.valueBeforeDecodeView));
    }
  }, {
    key: "isEqual",
    value: function isEqual(other) {
      if (this === other) {
        return true;
      }

      if (!(other instanceof this.constructor)) {
        return false;
      }

      var thisRaw = this.toBER();
      var otherRaw = other.toBER();
      return isEqualBuffer(thisRaw, otherRaw);
    }
  }]);

  return BaseBlock;
}(LocalBaseBlock);

BaseBlock.NAME = "BaseBlock";

function prepareIndefiniteForm(baseBlock) {
  if (baseBlock instanceof typeStore.Constructed) {
    var _iterator = index_es_createForOfIteratorHelper(baseBlock.valueBlock.value),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (prepareIndefiniteForm(value)) {
          baseBlock.lenBlock.isIndefiniteForm = true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return !!baseBlock.lenBlock.isIndefiniteForm;
}

var BaseStringBlock = /*#__PURE__*/function (_BaseBlock) {
  _inherits(BaseStringBlock, _BaseBlock);

  var _super6 = _createSuper(BaseStringBlock);

  function BaseStringBlock() {
    var _this5;

    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$value = _ref5.value,
        value = _ref5$value === void 0 ? EMPTY_STRING : _ref5$value,
        parameters = _objectWithoutProperties(_ref5, _excluded2);

    var stringValueBlockType = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, BaseStringBlock);

    _this5 = _super6.call(this, parameters, stringValueBlockType);

    if (value) {
      _this5.fromString(value);
    }

    return _this5;
  }

  _createClass(BaseStringBlock, [{
    key: "getValue",
    value: function getValue() {
      return this.valueBlock.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.valueBlock.value = value;
    }
  }, {
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);

      if (resultOffset === -1) {
        this.error = this.valueBlock.error;
        return resultOffset;
      }

      this.fromBuffer(this.valueBlock.valueHexView);
      if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
      if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
      if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
      return resultOffset;
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : '").concat(this.valueBlock.value, "'");
    }
  }]);

  return BaseStringBlock;
}(BaseBlock);

BaseStringBlock.NAME = "BaseStringBlock";

var LocalPrimitiveValueBlock = /*#__PURE__*/function (_HexBlock2) {
  _inherits(LocalPrimitiveValueBlock, _HexBlock2);

  var _super7 = _createSuper(LocalPrimitiveValueBlock);

  function LocalPrimitiveValueBlock() {
    var _this6;

    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref6$isHexOnly = _ref6.isHexOnly,
        isHexOnly = _ref6$isHexOnly === void 0 ? true : _ref6$isHexOnly,
        parameters = _objectWithoutProperties(_ref6, _excluded3);

    _classCallCheck(this, LocalPrimitiveValueBlock);

    _this6 = _super7.call(this, parameters);
    _this6.isHexOnly = isHexOnly;
    return _this6;
  }

  return _createClass(LocalPrimitiveValueBlock);
}(HexBlock(ValueBlock));

LocalPrimitiveValueBlock.NAME = "PrimitiveValueBlock";

var _a$w;

var Primitive = /*#__PURE__*/function (_BaseBlock2) {
  _inherits(Primitive, _BaseBlock2);

  var _super8 = _createSuper(Primitive);

  function Primitive() {
    var _this7;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Primitive);

    _this7 = _super8.call(this, parameters, LocalPrimitiveValueBlock);
    _this7.idBlock.isConstructed = false;
    return _this7;
  }

  return _createClass(Primitive);
}(BaseBlock);

_a$w = Primitive;

(function () {
  typeStore.Primitive = _a$w;
})();

Primitive.NAME = "PRIMITIVE";

function localChangeType(inputObject, newType) {
  if (inputObject instanceof newType) {
    return inputObject;
  }

  var newObject = new newType();
  newObject.idBlock = inputObject.idBlock;
  newObject.lenBlock = inputObject.lenBlock;
  newObject.warnings = inputObject.warnings;
  newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
  return newObject;
}

function localFromBER(inputBuffer) {
  var inputOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var inputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : inputBuffer.length;
  var incomingOffset = inputOffset;
  var returnObject = new BaseBlock({}, ValueBlock);
  var baseBlock = new LocalBaseBlock();

  if (!index_es_checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {
    returnObject.error = baseBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }

  var intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);

  if (!intBuffer.length) {
    returnObject.error = "Zero buffer length";
    return {
      offset: -1,
      result: returnObject
    };
  }

  var resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);

  if (returnObject.idBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.idBlock.warnings);
  }

  if (resultOffset === -1) {
    returnObject.error = returnObject.idBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }

  inputOffset = resultOffset;
  inputLength -= returnObject.idBlock.blockLength;
  resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);

  if (returnObject.lenBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.lenBlock.warnings);
  }

  if (resultOffset === -1) {
    returnObject.error = returnObject.lenBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }

  inputOffset = resultOffset;
  inputLength -= returnObject.lenBlock.blockLength;

  if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {
    returnObject.error = "Indefinite length form used for primitive encoding form";
    return {
      offset: -1,
      result: returnObject
    };
  }

  var newASN1Type = BaseBlock;

  switch (returnObject.idBlock.tagClass) {
    case 1:
      if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
        returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
        return {
          offset: -1,
          result: returnObject
        };
      }

      switch (returnObject.idBlock.tagNumber) {
        case 0:
          if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {
            returnObject.error = "Type [UNIVERSAL 0] is reserved";
            return {
              offset: -1,
              result: returnObject
            };
          }

          newASN1Type = typeStore.EndOfContent;
          break;

        case 1:
          newASN1Type = typeStore.Boolean;
          break;

        case 2:
          newASN1Type = typeStore.Integer;
          break;

        case 3:
          newASN1Type = typeStore.BitString;
          break;

        case 4:
          newASN1Type = typeStore.OctetString;
          break;

        case 5:
          newASN1Type = typeStore.Null;
          break;

        case 6:
          newASN1Type = typeStore.ObjectIdentifier;
          break;

        case 10:
          newASN1Type = typeStore.Enumerated;
          break;

        case 12:
          newASN1Type = typeStore.Utf8String;
          break;

        case 13:
          newASN1Type = typeStore.RelativeObjectIdentifier;
          break;

        case 14:
          newASN1Type = typeStore.TIME;
          break;

        case 15:
          returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
          return {
            offset: -1,
            result: returnObject
          };

        case 16:
          newASN1Type = typeStore.Sequence;
          break;

        case 17:
          newASN1Type = typeStore.Set;
          break;

        case 18:
          newASN1Type = typeStore.NumericString;
          break;

        case 19:
          newASN1Type = typeStore.PrintableString;
          break;

        case 20:
          newASN1Type = typeStore.TeletexString;
          break;

        case 21:
          newASN1Type = typeStore.VideotexString;
          break;

        case 22:
          newASN1Type = typeStore.IA5String;
          break;

        case 23:
          newASN1Type = typeStore.UTCTime;
          break;

        case 24:
          newASN1Type = typeStore.GeneralizedTime;
          break;

        case 25:
          newASN1Type = typeStore.GraphicString;
          break;

        case 26:
          newASN1Type = typeStore.VisibleString;
          break;

        case 27:
          newASN1Type = typeStore.GeneralString;
          break;

        case 28:
          newASN1Type = typeStore.UniversalString;
          break;

        case 29:
          newASN1Type = typeStore.CharacterString;
          break;

        case 30:
          newASN1Type = typeStore.BmpString;
          break;

        case 31:
          newASN1Type = typeStore.DATE;
          break;

        case 32:
          newASN1Type = typeStore.TimeOfDay;
          break;

        case 33:
          newASN1Type = typeStore.DateTime;
          break;

        case 34:
          newASN1Type = typeStore.Duration;
          break;

        default:
          {
            var newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();
            newObject.idBlock = returnObject.idBlock;
            newObject.lenBlock = returnObject.lenBlock;
            newObject.warnings = returnObject.warnings;
            returnObject = newObject;
          }
      }

      break;

    case 2:
    case 3:
    case 4:
    default:
      {
        newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;
      }
  }

  returnObject = localChangeType(returnObject, newASN1Type);
  resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
  returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
  return {
    offset: resultOffset,
    result: returnObject
  };
}

function fromBER(inputBuffer) {
  if (!inputBuffer.byteLength) {
    var result = new BaseBlock({}, ValueBlock);
    result.error = "Input buffer has zero length";
    return {
      offset: -1,
      result: result
    };
  }

  return localFromBER(build.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
}

function checkLen(indefiniteLength, length) {
  if (indefiniteLength) {
    return 1;
  }

  return length;
}

var LocalConstructedValueBlock = /*#__PURE__*/function (_ValueBlock) {
  _inherits(LocalConstructedValueBlock, _ValueBlock);

  var _super9 = _createSuper(LocalConstructedValueBlock);

  function LocalConstructedValueBlock() {
    var _this8;

    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref7$value = _ref7.value,
        value = _ref7$value === void 0 ? [] : _ref7$value,
        _ref7$isIndefiniteFor = _ref7.isIndefiniteForm,
        isIndefiniteForm = _ref7$isIndefiniteFor === void 0 ? false : _ref7$isIndefiniteFor,
        parameters = _objectWithoutProperties(_ref7, _excluded4);

    _classCallCheck(this, LocalConstructedValueBlock);

    _this8 = _super9.call(this, parameters);
    _this8.value = value;
    _this8.isIndefiniteForm = isIndefiniteForm;
    return _this8;
  }

  _createClass(LocalConstructedValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var view = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, view, inputOffset, inputLength)) {
        return -1;
      }

      this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);

      if (this.valueBeforeDecodeView.length === 0) {
        this.warnings.push("Zero buffer length");
        return inputOffset;
      }

      var currentOffset = inputOffset;

      while (checkLen(this.isIndefiniteForm, inputLength) > 0) {
        var returnObject = localFromBER(view, currentOffset, inputLength);

        if (returnObject.offset === -1) {
          this.error = returnObject.result.error;
          this.warnings.concat(returnObject.result.warnings);
          return -1;
        }

        currentOffset = returnObject.offset;
        this.blockLength += returnObject.result.blockLength;
        inputLength -= returnObject.result.blockLength;
        this.value.push(returnObject.result);

        if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {
          break;
        }
      }

      if (this.isIndefiniteForm) {
        if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {
          this.value.pop();
        } else {
          this.warnings.push("No EndOfContent block encoded");
        }
      }

      return currentOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      var _writer = writer || new ViewWriter();

      for (var i = 0; i < this.value.length; i++) {
        this.value[i].toBER(sizeOnly, _writer);
      }

      if (!writer) {
        return _writer.final();
      }

      return EMPTY_BUFFER;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var object = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalConstructedValueBlock.prototype), "toJSON", this).call(this)), {}, {
        isIndefiniteForm: this.isIndefiniteForm,
        value: []
      });

      var _iterator2 = index_es_createForOfIteratorHelper(this.value),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var value = _step2.value;
          object.value.push(value.toJSON());
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return object;
    }
  }]);

  return LocalConstructedValueBlock;
}(ValueBlock);

LocalConstructedValueBlock.NAME = "ConstructedValueBlock";

var _a$v;

var Constructed = /*#__PURE__*/function (_BaseBlock3) {
  _inherits(Constructed, _BaseBlock3);

  var _super10 = _createSuper(Constructed);

  function Constructed() {
    var _this9;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Constructed);

    _this9 = _super10.call(this, parameters, LocalConstructedValueBlock);
    _this9.idBlock.isConstructed = true;
    return _this9;
  }

  _createClass(Constructed, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
      var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);

      if (resultOffset === -1) {
        this.error = this.valueBlock.error;
        return resultOffset;
      }

      if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
      if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
      if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
      return resultOffset;
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      var values = [];

      var _iterator3 = index_es_createForOfIteratorHelper(this.valueBlock.value),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var value = _step3.value;
          values.push(value.toString("ascii").split("\n").map(function (o) {
            return "  ".concat(o);
          }).join("\n"));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var blockName = this.idBlock.tagClass === 3 ? "[".concat(this.idBlock.tagNumber, "]") : this.constructor.NAME;
      return values.length ? "".concat(blockName, " :\n").concat(values.join("\n")) : "".concat(blockName, " :");
    }
  }]);

  return Constructed;
}(BaseBlock);

_a$v = Constructed;

(function () {
  typeStore.Constructed = _a$v;
})();

Constructed.NAME = "CONSTRUCTED";

var LocalEndOfContentValueBlock = /*#__PURE__*/function (_ValueBlock2) {
  _inherits(LocalEndOfContentValueBlock, _ValueBlock2);

  var _super11 = _createSuper(LocalEndOfContentValueBlock);

  function LocalEndOfContentValueBlock() {
    _classCallCheck(this, LocalEndOfContentValueBlock);

    return _super11.apply(this, arguments);
  }

  _createClass(LocalEndOfContentValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      return inputOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      return EMPTY_BUFFER;
    }
  }]);

  return LocalEndOfContentValueBlock;
}(ValueBlock);

LocalEndOfContentValueBlock.override = "EndOfContentValueBlock";

var _a$u;

var EndOfContent = /*#__PURE__*/function (_BaseBlock4) {
  _inherits(EndOfContent, _BaseBlock4);

  var _super12 = _createSuper(EndOfContent);

  function EndOfContent() {
    var _this10;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EndOfContent);

    _this10 = _super12.call(this, parameters, LocalEndOfContentValueBlock);
    _this10.idBlock.tagClass = 1;
    _this10.idBlock.tagNumber = 0;
    return _this10;
  }

  return _createClass(EndOfContent);
}(BaseBlock);

_a$u = EndOfContent;

(function () {
  typeStore.EndOfContent = _a$u;
})();

EndOfContent.NAME = END_OF_CONTENT_NAME;

var _a$t;

var Null = /*#__PURE__*/function (_BaseBlock5) {
  _inherits(Null, _BaseBlock5);

  var _super13 = _createSuper(Null);

  function Null() {
    var _this11;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Null);

    _this11 = _super13.call(this, parameters, ValueBlock);
    _this11.idBlock.tagClass = 1;
    _this11.idBlock.tagNumber = 5;
    return _this11;
  }

  _createClass(Null, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
      if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
      if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
      this.blockLength += inputLength;

      if (inputOffset + inputLength > inputBuffer.byteLength) {
        this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
        return -1;
      }

      return inputOffset + inputLength;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      var retBuf = new ArrayBuffer(2);

      if (!sizeOnly) {
        var retView = new Uint8Array(retBuf);
        retView[0] = 0x05;
        retView[1] = 0x00;
      }

      if (writer) {
        writer.write(retBuf);
      }

      return retBuf;
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME);
    }
  }]);

  return Null;
}(BaseBlock);

_a$t = Null;

(function () {
  typeStore.Null = _a$t;
})();

Null.NAME = "NULL";

var LocalBooleanValueBlock = /*#__PURE__*/function (_HexBlock3) {
  _inherits(LocalBooleanValueBlock, _HexBlock3);

  var _super14 = _createSuper(LocalBooleanValueBlock);

  function LocalBooleanValueBlock() {
    var _this12;

    var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        value = _ref8.value,
        parameters = _objectWithoutProperties(_ref8, _excluded5);

    _classCallCheck(this, LocalBooleanValueBlock);

    _this12 = _super14.call(this, parameters);

    if (parameters.valueHex) {
      _this12.valueHexView = build.BufferSourceConverter.toUint8Array(parameters.valueHex);
    } else {
      _this12.valueHexView = new Uint8Array(1);
    }

    if (value) {
      _this12.value = value;
    }

    return _this12;
  }

  _createClass(LocalBooleanValueBlock, [{
    key: "value",
    get: function get() {
      var _iterator4 = index_es_createForOfIteratorHelper(this.valueHexView),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var octet = _step4.value;

          if (octet > 0) {
            return true;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return false;
    },
    set: function set(value) {
      this.valueHexView[0] = value ? 0xFF : 0x00;
    }
  }, {
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, inputView, inputOffset, inputLength)) {
        return -1;
      }

      this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
      if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
      this.isHexOnly = true;
      utilDecodeTC.call(this);
      this.blockLength = inputLength;
      return inputOffset + inputLength;
    }
  }, {
    key: "toBER",
    value: function toBER() {
      return this.valueHexView.slice();
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalBooleanValueBlock.prototype), "toJSON", this).call(this)), {}, {
        value: this.value
      });
    }
  }]);

  return LocalBooleanValueBlock;
}(HexBlock(ValueBlock));

LocalBooleanValueBlock.NAME = "BooleanValueBlock";

var _a$s;

var _Boolean = /*#__PURE__*/function (_BaseBlock6) {
  _inherits(_Boolean, _BaseBlock6);

  var _super15 = _createSuper(_Boolean);

  function _Boolean() {
    var _this13;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _Boolean);

    _this13 = _super15.call(this, parameters, LocalBooleanValueBlock);
    _this13.idBlock.tagClass = 1;
    _this13.idBlock.tagNumber = 1;
    return _this13;
  }

  _createClass(_Boolean, [{
    key: "getValue",
    value: function getValue() {
      return this.valueBlock.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.valueBlock.value = value;
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(this.getValue);
    }
  }]);

  return _Boolean;
}(BaseBlock);

_a$s = _Boolean;

(function () {
  typeStore.Boolean = _a$s;
})();

_Boolean.NAME = "BOOLEAN";

var LocalOctetStringValueBlock = /*#__PURE__*/function (_HexBlock4) {
  _inherits(LocalOctetStringValueBlock, _HexBlock4);

  var _super16 = _createSuper(LocalOctetStringValueBlock);

  function LocalOctetStringValueBlock() {
    var _this14;

    var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref9$isConstructed = _ref9.isConstructed,
        isConstructed = _ref9$isConstructed === void 0 ? false : _ref9$isConstructed,
        parameters = _objectWithoutProperties(_ref9, _excluded6);

    _classCallCheck(this, LocalOctetStringValueBlock);

    _this14 = _super16.call(this, parameters);
    _this14.isConstructed = isConstructed;
    return _this14;
  }

  _createClass(LocalOctetStringValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = 0;

      if (this.isConstructed) {
        this.isHexOnly = false;
        resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
        if (resultOffset === -1) return resultOffset;

        for (var i = 0; i < this.value.length; i++) {
          var currentBlockName = this.value[i].constructor.NAME;

          if (currentBlockName === END_OF_CONTENT_NAME) {
            if (this.isIndefiniteForm) break;else {
              this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
              return -1;
            }
          }

          if (currentBlockName !== OCTET_STRING_NAME) {
            this.error = "OCTET STRING may consists of OCTET STRINGs only";
            return -1;
          }
        }
      } else {
        this.isHexOnly = true;
        resultOffset = _get(_getPrototypeOf(LocalOctetStringValueBlock.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
        this.blockLength = inputLength;
      }

      return resultOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
      return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalOctetStringValueBlock.prototype), "toJSON", this).call(this)), {}, {
        isConstructed: this.isConstructed
      });
    }
  }]);

  return LocalOctetStringValueBlock;
}(HexBlock(LocalConstructedValueBlock));

LocalOctetStringValueBlock.NAME = "OctetStringValueBlock";

var _a$r;

var OctetString = /*#__PURE__*/function (_BaseBlock7) {
  _inherits(OctetString, _BaseBlock7);

  var _super17 = _createSuper(OctetString);

  function OctetString() {
    var _this15;

    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref10$idBlock = _ref10.idBlock,
        idBlock = _ref10$idBlock === void 0 ? {} : _ref10$idBlock,
        _ref10$lenBlock = _ref10.lenBlock,
        lenBlock = _ref10$lenBlock === void 0 ? {} : _ref10$lenBlock,
        parameters = _objectWithoutProperties(_ref10, _excluded7);

    _classCallCheck(this, OctetString);

    var _b, _c;

    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    _this15 = _super17.call(this, _objectSpread({
      idBlock: _objectSpread({
        isConstructed: parameters.isConstructed
      }, idBlock),
      lenBlock: _objectSpread(_objectSpread({}, lenBlock), {}, {
        isIndefiniteForm: !!parameters.isIndefiniteForm
      })
    }, parameters), LocalOctetStringValueBlock);
    _this15.idBlock.tagClass = 1;
    _this15.idBlock.tagNumber = 4;
    return _this15;
  }

  _createClass(OctetString, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      this.valueBlock.isConstructed = this.idBlock.isConstructed;
      this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;

      if (inputLength === 0) {
        if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
        if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
        return inputOffset;
      }

      if (!this.valueBlock.isConstructed) {
        var view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
        var buf = view.subarray(inputOffset, inputOffset + inputLength);

        try {
          if (buf.byteLength) {
            var asn = localFromBER(buf, 0, buf.byteLength);

            if (asn.offset !== -1 && asn.offset === inputLength) {
              this.valueBlock.value = [asn.result];
            }
          }
        } catch (e) {}
      }

      return _get(_getPrototypeOf(OctetString.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
        return Constructed.prototype.onAsciiEncoding.call(this);
      }

      return "".concat(this.constructor.NAME, " : ").concat(build.Convert.ToHex(this.valueBlock.valueHexView));
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (!this.idBlock.isConstructed) {
        return this.valueBlock.valueHexView.slice().buffer;
      }

      var array = [];

      var _iterator5 = index_es_createForOfIteratorHelper(this.valueBlock.value),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var content = _step5.value;

          if (content instanceof OctetString) {
            array.push(content.valueBlock.valueHexView);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return build.BufferSourceConverter.concat(array);
    }
  }]);

  return OctetString;
}(BaseBlock);

_a$r = OctetString;

(function () {
  typeStore.OctetString = _a$r;
})();

OctetString.NAME = OCTET_STRING_NAME;

var LocalBitStringValueBlock = /*#__PURE__*/function (_HexBlock5) {
  _inherits(LocalBitStringValueBlock, _HexBlock5);

  var _super18 = _createSuper(LocalBitStringValueBlock);

  function LocalBitStringValueBlock() {
    var _this16;

    var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref11$unusedBits = _ref11.unusedBits,
        unusedBits = _ref11$unusedBits === void 0 ? 0 : _ref11$unusedBits,
        _ref11$isConstructed = _ref11.isConstructed,
        isConstructed = _ref11$isConstructed === void 0 ? false : _ref11$isConstructed,
        parameters = _objectWithoutProperties(_ref11, _excluded8);

    _classCallCheck(this, LocalBitStringValueBlock);

    _this16 = _super18.call(this, parameters);
    _this16.unusedBits = unusedBits;
    _this16.isConstructed = isConstructed;
    _this16.blockLength = _this16.valueHexView.byteLength;
    return _this16;
  }

  _createClass(LocalBitStringValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      if (!inputLength) {
        return inputOffset;
      }

      var resultOffset = -1;

      if (this.isConstructed) {
        resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
        if (resultOffset === -1) return resultOffset;

        var _iterator6 = index_es_createForOfIteratorHelper(this.value),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var value = _step6.value;
            var currentBlockName = value.constructor.NAME;

            if (currentBlockName === END_OF_CONTENT_NAME) {
              if (this.isIndefiniteForm) break;else {
                this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
                return -1;
              }
            }

            if (currentBlockName !== BIT_STRING_NAME) {
              this.error = "BIT STRING may consists of BIT STRINGs only";
              return -1;
            }

            var valueBlock = value.valueBlock;

            if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {
              this.error = "Using of \"unused bits\" inside constructive BIT STRING allowed for least one only";
              return -1;
            }

            this.unusedBits = valueBlock.unusedBits;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return resultOffset;
      }

      var inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, inputView, inputOffset, inputLength)) {
        return -1;
      }

      var intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
      this.unusedBits = intBuffer[0];

      if (this.unusedBits > 7) {
        this.error = "Unused bits for BitString must be in range 0-7";
        return -1;
      }

      if (!this.unusedBits) {
        var buf = intBuffer.subarray(1);

        try {
          if (buf.byteLength) {
            var asn = localFromBER(buf, 0, buf.byteLength);

            if (asn.offset !== -1 && asn.offset === inputLength - 1) {
              this.value = [asn.result];
            }
          }
        } catch (e) {}
      }

      this.valueHexView = intBuffer.subarray(1);
      this.blockLength = intBuffer.length;
      return inputOffset + inputLength;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      if (this.isConstructed) {
        return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
      }

      if (sizeOnly) {
        return new ArrayBuffer(this.valueHexView.byteLength + 1);
      }

      if (!this.valueHexView.byteLength) {
        return EMPTY_BUFFER;
      }

      var retView = new Uint8Array(this.valueHexView.length + 1);
      retView[0] = this.unusedBits;
      retView.set(this.valueHexView, 1);
      return retView.buffer;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalBitStringValueBlock.prototype), "toJSON", this).call(this)), {}, {
        unusedBits: this.unusedBits,
        isConstructed: this.isConstructed
      });
    }
  }]);

  return LocalBitStringValueBlock;
}(HexBlock(LocalConstructedValueBlock));

LocalBitStringValueBlock.NAME = "BitStringValueBlock";

var _a$q;

var BitString = /*#__PURE__*/function (_BaseBlock8) {
  _inherits(BitString, _BaseBlock8);

  var _super19 = _createSuper(BitString);

  function BitString() {
    var _this17;

    var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref12$idBlock = _ref12.idBlock,
        idBlock = _ref12$idBlock === void 0 ? {} : _ref12$idBlock,
        _ref12$lenBlock = _ref12.lenBlock,
        lenBlock = _ref12$lenBlock === void 0 ? {} : _ref12$lenBlock,
        parameters = _objectWithoutProperties(_ref12, _excluded9);

    _classCallCheck(this, BitString);

    var _b, _c;

    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    _this17 = _super19.call(this, _objectSpread({
      idBlock: _objectSpread({
        isConstructed: parameters.isConstructed
      }, idBlock),
      lenBlock: _objectSpread(_objectSpread({}, lenBlock), {}, {
        isIndefiniteForm: !!parameters.isIndefiniteForm
      })
    }, parameters), LocalBitStringValueBlock);
    _this17.idBlock.tagClass = 1;
    _this17.idBlock.tagNumber = 3;
    return _this17;
  }

  _createClass(BitString, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      this.valueBlock.isConstructed = this.idBlock.isConstructed;
      this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
      return _get(_getPrototypeOf(BitString.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
        return Constructed.prototype.onAsciiEncoding.call(this);
      } else {
        var bits = [];
        var valueHex = this.valueBlock.valueHexView;

        var _iterator7 = index_es_createForOfIteratorHelper(valueHex),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var byte = _step7.value;
            bits.push(byte.toString(2).padStart(8, "0"));
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        var bitsStr = bits.join("");
        return "".concat(this.constructor.NAME, " : ").concat(bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits));
      }
    }
  }]);

  return BitString;
}(BaseBlock);

_a$q = BitString;

(function () {
  typeStore.BitString = _a$q;
})();

BitString.NAME = BIT_STRING_NAME;

var _a$p;

function viewAdd(first, second) {
  var c = new Uint8Array([0]);
  var firstView = new Uint8Array(first);
  var secondView = new Uint8Array(second);
  var firstViewCopy = firstView.slice(0);
  var firstViewCopyLength = firstViewCopy.length - 1;
  var secondViewCopy = secondView.slice(0);
  var secondViewCopyLength = secondViewCopy.length - 1;
  var value = 0;
  var max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
  var counter = 0;

  for (var i = max; i >= 0; i--, counter++) {
    switch (true) {
      case counter < secondViewCopy.length:
        value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
        break;

      default:
        value = firstViewCopy[firstViewCopyLength - counter] + c[0];
    }

    c[0] = value / 10;

    switch (true) {
      case counter >= firstViewCopy.length:
        firstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);
        break;

      default:
        firstViewCopy[firstViewCopyLength - counter] = value % 10;
    }
  }

  if (c[0] > 0) firstViewCopy = utilConcatView(c, firstViewCopy);
  return firstViewCopy;
}

function power2(n) {
  if (n >= powers2.length) {
    for (var p = powers2.length; p <= n; p++) {
      var c = new Uint8Array([0]);
      var digits = powers2[p - 1].slice(0);

      for (var i = digits.length - 1; i >= 0; i--) {
        var newValue = new Uint8Array([(digits[i] << 1) + c[0]]);
        c[0] = newValue[0] / 10;
        digits[i] = newValue[0] % 10;
      }

      if (c[0] > 0) digits = utilConcatView(c, digits);
      powers2.push(digits);
    }
  }

  return powers2[n];
}

function viewSub(first, second) {
  var b = 0;
  var firstView = new Uint8Array(first);
  var secondView = new Uint8Array(second);
  var firstViewCopy = firstView.slice(0);
  var firstViewCopyLength = firstViewCopy.length - 1;
  var secondViewCopy = secondView.slice(0);
  var secondViewCopyLength = secondViewCopy.length - 1;
  var value;
  var counter = 0;

  for (var i = secondViewCopyLength; i >= 0; i--, counter++) {
    value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;

    switch (true) {
      case value < 0:
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
        break;

      default:
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
    }
  }

  if (b > 0) {
    for (var _i4 = firstViewCopyLength - secondViewCopyLength + 1; _i4 >= 0; _i4--, counter++) {
      value = firstViewCopy[firstViewCopyLength - counter] - b;

      if (value < 0) {
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
      } else {
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
        break;
      }
    }
  }

  return firstViewCopy.slice();
}

var LocalIntegerValueBlock = /*#__PURE__*/function (_HexBlock6) {
  _inherits(LocalIntegerValueBlock, _HexBlock6);

  var _super20 = _createSuper(LocalIntegerValueBlock);

  function LocalIntegerValueBlock() {
    var _this18;

    var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        value = _ref13.value,
        parameters = _objectWithoutProperties(_ref13, _excluded10);

    _classCallCheck(this, LocalIntegerValueBlock);

    _this18 = _super20.call(this, parameters);
    _this18._valueDec = 0;

    if (parameters.valueHex) {
      _this18.setValueHex();
    }

    if (value !== undefined) {
      _this18.valueDec = value;
    }

    return _this18;
  }

  _createClass(LocalIntegerValueBlock, [{
    key: "setValueHex",
    value: function setValueHex() {
      if (this.valueHexView.length >= 4) {
        this.warnings.push("Too big Integer for decoding, hex only");
        this.isHexOnly = true;
        this._valueDec = 0;
      } else {
        this.isHexOnly = false;

        if (this.valueHexView.length > 0) {
          this._valueDec = utilDecodeTC.call(this);
        }
      }
    }
  }, {
    key: "valueDec",
    get: function get() {
      return this._valueDec;
    },
    set: function set(v) {
      this._valueDec = v;
      this.isHexOnly = false;
      this.valueHexView = new Uint8Array(utilEncodeTC(v));
    }
  }, {
    key: "fromDER",
    value: function fromDER(inputBuffer, inputOffset, inputLength) {
      var expectedLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var offset = this.fromBER(inputBuffer, inputOffset, inputLength);
      if (offset === -1) return offset;
      var view = this.valueHexView;

      if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {
        this.valueHexView = view.subarray(1);
      } else {
        if (expectedLength !== 0) {
          if (view.length < expectedLength) {
            if (expectedLength - view.length > 1) expectedLength = view.length + 1;
            this.valueHexView = view.subarray(expectedLength - view.length);
          }
        }
      }

      return offset;
    }
  }, {
    key: "toDER",
    value: function toDER() {
      var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var view = this.valueHexView;

      switch (true) {
        case (view[0] & 0x80) !== 0:
          {
            var updatedView = new Uint8Array(this.valueHexView.length + 1);
            updatedView[0] = 0x00;
            updatedView.set(view, 1);
            this.valueHexView = updatedView;
          }
          break;

        case view[0] === 0x00 && (view[1] & 0x80) === 0:
          {
            this.valueHexView = this.valueHexView.subarray(1);
          }
          break;
      }

      return this.toBER(sizeOnly);
    }
  }, {
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = _get(_getPrototypeOf(LocalIntegerValueBlock.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);

      if (resultOffset === -1) {
        return resultOffset;
      }

      this.setValueHex();
      return resultOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalIntegerValueBlock.prototype), "toJSON", this).call(this)), {}, {
        valueDec: this.valueDec
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var firstBit = this.valueHexView.length * 8 - 1;
      var digits = new Uint8Array(this.valueHexView.length * 8 / 3);
      var bitNumber = 0;
      var currentByte;
      var asn1View = this.valueHexView;
      var result = "";
      var flag = false;

      for (var byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--) {
        currentByte = asn1View[byteNumber];

        for (var i = 0; i < 8; i++) {
          if ((currentByte & 1) === 1) {
            switch (bitNumber) {
              case firstBit:
                digits = viewSub(power2(bitNumber), digits);
                result = "-";
                break;

              default:
                digits = viewAdd(digits, power2(bitNumber));
            }
          }

          bitNumber++;
          currentByte >>= 1;
        }
      }

      for (var _i5 = 0; _i5 < digits.length; _i5++) {
        if (digits[_i5]) flag = true;
        if (flag) result += digitsString.charAt(digits[_i5]);
      }

      if (flag === false) result += digitsString.charAt(0);
      return result;
    }
  }]);

  return LocalIntegerValueBlock;
}(HexBlock(ValueBlock));

_a$p = LocalIntegerValueBlock;
LocalIntegerValueBlock.NAME = "IntegerValueBlock";

(function () {
  Object.defineProperty(_a$p.prototype, "valueHex", {
    set: function set(v) {
      this.valueHexView = new Uint8Array(v);
      this.setValueHex();
    },
    get: function get() {
      return this.valueHexView.slice().buffer;
    }
  });
})();

var _a$o;

var Integer = /*#__PURE__*/function (_BaseBlock9) {
  _inherits(Integer, _BaseBlock9);

  var _super21 = _createSuper(Integer);

  function Integer() {
    var _this19;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Integer);

    _this19 = _super21.call(this, parameters, LocalIntegerValueBlock);
    _this19.idBlock.tagClass = 1;
    _this19.idBlock.tagNumber = 2;
    return _this19;
  }

  _createClass(Integer, [{
    key: "toBigInt",
    value: function toBigInt() {
      assertBigInt();
      return BigInt(this.valueBlock.toString());
    }
  }, {
    key: "convertToDER",
    value: function convertToDER() {
      var integer = new Integer({
        valueHex: this.valueBlock.valueHexView
      });
      integer.valueBlock.toDER();
      return integer;
    }
  }, {
    key: "convertFromDER",
    value: function convertFromDER() {
      return new Integer({
        valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView
      });
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(this.valueBlock.toString());
    }
  }], [{
    key: "fromBigInt",
    value: function fromBigInt(value) {
      assertBigInt();
      var bigIntValue = BigInt(value);
      var writer = new ViewWriter();
      var hex = bigIntValue.toString(16).replace(/^-/, "");
      var view = new Uint8Array(build.Convert.FromHex(hex));

      if (bigIntValue < 0) {
        var first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));
        first[0] |= 0x80;
        var firstInt = BigInt("0x".concat(build.Convert.ToHex(first)));
        var secondInt = firstInt + bigIntValue;
        var second = build.BufferSourceConverter.toUint8Array(build.Convert.FromHex(secondInt.toString(16)));
        second[0] |= 0x80;
        writer.write(second);
      } else {
        if (view[0] & 0x80) {
          writer.write(new Uint8Array([0]));
        }

        writer.write(view);
      }

      var res = new Integer({
        valueHex: writer.final()
      });
      return res;
    }
  }]);

  return Integer;
}(BaseBlock);

_a$o = Integer;

(function () {
  typeStore.Integer = _a$o;
})();

Integer.NAME = "INTEGER";

var _a$n;

var Enumerated = /*#__PURE__*/function (_Integer) {
  _inherits(Enumerated, _Integer);

  var _super22 = _createSuper(Enumerated);

  function Enumerated() {
    var _this20;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Enumerated);

    _this20 = _super22.call(this, parameters);
    _this20.idBlock.tagClass = 1;
    _this20.idBlock.tagNumber = 10;
    return _this20;
  }

  return _createClass(Enumerated);
}(Integer);

_a$n = Enumerated;

(function () {
  typeStore.Enumerated = _a$n;
})();

Enumerated.NAME = "ENUMERATED";

var LocalSidValueBlock = /*#__PURE__*/function (_HexBlock7) {
  _inherits(LocalSidValueBlock, _HexBlock7);

  var _super23 = _createSuper(LocalSidValueBlock);

  function LocalSidValueBlock() {
    var _this21;

    var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref14$valueDec = _ref14.valueDec,
        valueDec = _ref14$valueDec === void 0 ? -1 : _ref14$valueDec,
        _ref14$isFirstSid = _ref14.isFirstSid,
        isFirstSid = _ref14$isFirstSid === void 0 ? false : _ref14$isFirstSid,
        parameters = _objectWithoutProperties(_ref14, _excluded11);

    _classCallCheck(this, LocalSidValueBlock);

    _this21 = _super23.call(this, parameters);
    _this21.valueDec = valueDec;
    _this21.isFirstSid = isFirstSid;
    return _this21;
  }

  _createClass(LocalSidValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      if (!inputLength) {
        return inputOffset;
      }

      var inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);

      if (!index_es_checkBufferParams(this, inputView, inputOffset, inputLength)) {
        return -1;
      }

      var intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
      this.valueHexView = new Uint8Array(inputLength);

      for (var i = 0; i < inputLength; i++) {
        this.valueHexView[i] = intBuffer[i] & 0x7F;
        this.blockLength++;
        if ((intBuffer[i] & 0x80) === 0x00) break;
      }

      var tempView = new Uint8Array(this.blockLength);

      for (var _i6 = 0; _i6 < this.blockLength; _i6++) {
        tempView[_i6] = this.valueHexView[_i6];
      }

      this.valueHexView = tempView;

      if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
        this.error = "End of input reached before message was fully decoded";
        return -1;
      }

      if (this.valueHexView[0] === 0x00) this.warnings.push("Needlessly long format of SID encoding");
      if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);else {
        this.isHexOnly = true;
        this.warnings.push("Too big SID for decoding, hex only");
      }
      return inputOffset + this.blockLength;
    }
  }, {
    key: "valueBigInt",
    set: function set(value) {
      assertBigInt();
      var bits = BigInt(value).toString(2);

      while (bits.length % 7) {
        bits = "0" + bits;
      }

      var bytes = new Uint8Array(bits.length / 7);

      for (var i = 0; i < bytes.length; i++) {
        bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);
      }

      this.fromBER(bytes.buffer, 0, bytes.length);
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      if (this.isHexOnly) {
        if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
        var curView = this.valueHexView;

        var _retView3 = new Uint8Array(this.blockLength);

        for (var i = 0; i < this.blockLength - 1; i++) {
          _retView3[i] = curView[i] | 0x80;
        }

        _retView3[this.blockLength - 1] = curView[this.blockLength - 1];
        return _retView3.buffer;
      }

      var encodedBuf = utilToBase(this.valueDec, 7);

      if (encodedBuf.byteLength === 0) {
        this.error = "Error during encoding SID value";
        return EMPTY_BUFFER;
      }

      var retView = new Uint8Array(encodedBuf.byteLength);

      if (!sizeOnly) {
        var encodedView = new Uint8Array(encodedBuf);
        var len = encodedBuf.byteLength - 1;

        for (var _i7 = 0; _i7 < len; _i7++) {
          retView[_i7] = encodedView[_i7] | 0x80;
        }

        retView[len] = encodedView[len];
      }

      return retView;
    }
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      if (this.isHexOnly) result = build.Convert.ToHex(this.valueHexView);else {
        if (this.isFirstSid) {
          var sidValue = this.valueDec;
          if (this.valueDec <= 39) result = "0.";else {
            if (this.valueDec <= 79) {
              result = "1.";
              sidValue -= 40;
            } else {
              result = "2.";
              sidValue -= 80;
            }
          }
          result += sidValue.toString();
        } else result = this.valueDec.toString();
      }
      return result;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalSidValueBlock.prototype), "toJSON", this).call(this)), {}, {
        valueDec: this.valueDec,
        isFirstSid: this.isFirstSid
      });
    }
  }]);

  return LocalSidValueBlock;
}(HexBlock(ValueBlock));

LocalSidValueBlock.NAME = "sidBlock";

var LocalObjectIdentifierValueBlock = /*#__PURE__*/function (_ValueBlock3) {
  _inherits(LocalObjectIdentifierValueBlock, _ValueBlock3);

  var _super24 = _createSuper(LocalObjectIdentifierValueBlock);

  function LocalObjectIdentifierValueBlock() {
    var _this22;

    var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref15$value = _ref15.value,
        value = _ref15$value === void 0 ? EMPTY_STRING : _ref15$value,
        parameters = _objectWithoutProperties(_ref15, _excluded12);

    _classCallCheck(this, LocalObjectIdentifierValueBlock);

    _this22 = _super24.call(this, parameters);
    _this22.value = [];

    if (value) {
      _this22.fromString(value);
    }

    return _this22;
  }

  _createClass(LocalObjectIdentifierValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = inputOffset;

      while (inputLength > 0) {
        var sidBlock = new LocalSidValueBlock();
        resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);

        if (resultOffset === -1) {
          this.blockLength = 0;
          this.error = sidBlock.error;
          return resultOffset;
        }

        if (this.value.length === 0) sidBlock.isFirstSid = true;
        this.blockLength += sidBlock.blockLength;
        inputLength -= sidBlock.blockLength;
        this.value.push(sidBlock);
      }

      return resultOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      var retBuffers = [];

      for (var i = 0; i < this.value.length; i++) {
        var valueBuf = this.value[i].toBER(sizeOnly);

        if (valueBuf.byteLength === 0) {
          this.error = this.value[i].error;
          return EMPTY_BUFFER;
        }

        retBuffers.push(valueBuf);
      }

      return concat(retBuffers);
    }
  }, {
    key: "fromString",
    value: function fromString(string) {
      this.value = [];
      var pos1 = 0;
      var pos2 = 0;
      var sid = "";
      var flag = false;

      do {
        pos2 = string.indexOf(".", pos1);
        if (pos2 === -1) sid = string.substring(pos1);else sid = string.substring(pos1, pos2);
        pos1 = pos2 + 1;

        if (flag) {
          var sidBlock = this.value[0];
          var plus = 0;

          switch (sidBlock.valueDec) {
            case 0:
              break;

            case 1:
              plus = 40;
              break;

            case 2:
              plus = 80;
              break;

            default:
              this.value = [];
              return;
          }

          var parsedSID = parseInt(sid, 10);
          if (isNaN(parsedSID)) return;
          sidBlock.valueDec = parsedSID + plus;
          flag = false;
        } else {
          var _sidBlock = new LocalSidValueBlock();

          if (sid > Number.MAX_SAFE_INTEGER) {
            assertBigInt();
            var sidValue = BigInt(sid);
            _sidBlock.valueBigInt = sidValue;
          } else {
            _sidBlock.valueDec = parseInt(sid, 10);
            if (isNaN(_sidBlock.valueDec)) return;
          }

          if (!this.value.length) {
            _sidBlock.isFirstSid = true;
            flag = true;
          }

          this.value.push(_sidBlock);
        }
      } while (pos2 !== -1);
    }
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      var isHexOnly = false;

      for (var i = 0; i < this.value.length; i++) {
        isHexOnly = this.value[i].isHexOnly;
        var sidStr = this.value[i].toString();
        if (i !== 0) result = "".concat(result, ".");

        if (isHexOnly) {
          sidStr = "{".concat(sidStr, "}");
          if (this.value[i].isFirstSid) result = "2.{".concat(sidStr, " - 80}");else result += sidStr;
        } else result += sidStr;
      }

      return result;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var object = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalObjectIdentifierValueBlock.prototype), "toJSON", this).call(this)), {}, {
        value: this.toString(),
        sidArray: []
      });

      for (var i = 0; i < this.value.length; i++) {
        object.sidArray.push(this.value[i].toJSON());
      }

      return object;
    }
  }]);

  return LocalObjectIdentifierValueBlock;
}(ValueBlock);

LocalObjectIdentifierValueBlock.NAME = "ObjectIdentifierValueBlock";

var _a$m;

var ObjectIdentifier = /*#__PURE__*/function (_BaseBlock10) {
  _inherits(ObjectIdentifier, _BaseBlock10);

  var _super25 = _createSuper(ObjectIdentifier);

  function ObjectIdentifier() {
    var _this23;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ObjectIdentifier);

    _this23 = _super25.call(this, parameters, LocalObjectIdentifierValueBlock);
    _this23.idBlock.tagClass = 1;
    _this23.idBlock.tagNumber = 6;
    return _this23;
  }

  _createClass(ObjectIdentifier, [{
    key: "getValue",
    value: function getValue() {
      return this.valueBlock.toString();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.valueBlock.fromString(value);
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(this.valueBlock.toString() || "empty");
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(ObjectIdentifier.prototype), "toJSON", this).call(this)), {}, {
        value: this.getValue()
      });
    }
  }]);

  return ObjectIdentifier;
}(BaseBlock);

_a$m = ObjectIdentifier;

(function () {
  typeStore.ObjectIdentifier = _a$m;
})();

ObjectIdentifier.NAME = "OBJECT IDENTIFIER";

var LocalRelativeSidValueBlock = /*#__PURE__*/function (_HexBlock8) {
  _inherits(LocalRelativeSidValueBlock, _HexBlock8);

  var _super26 = _createSuper(LocalRelativeSidValueBlock);

  function LocalRelativeSidValueBlock() {
    var _this24;

    var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref16$valueDec = _ref16.valueDec,
        valueDec = _ref16$valueDec === void 0 ? 0 : _ref16$valueDec,
        parameters = _objectWithoutProperties(_ref16, _excluded13);

    _classCallCheck(this, LocalRelativeSidValueBlock);

    _this24 = _super26.call(this, parameters);
    _this24.valueDec = valueDec;
    return _this24;
  }

  _createClass(LocalRelativeSidValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      if (inputLength === 0) return inputOffset;
      var inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
      if (!index_es_checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;
      var intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
      this.valueHexView = new Uint8Array(inputLength);

      for (var i = 0; i < inputLength; i++) {
        this.valueHexView[i] = intBuffer[i] & 0x7F;
        this.blockLength++;
        if ((intBuffer[i] & 0x80) === 0x00) break;
      }

      var tempView = new Uint8Array(this.blockLength);

      for (var _i8 = 0; _i8 < this.blockLength; _i8++) {
        tempView[_i8] = this.valueHexView[_i8];
      }

      this.valueHexView = tempView;

      if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
        this.error = "End of input reached before message was fully decoded";
        return -1;
      }

      if (this.valueHexView[0] === 0x00) this.warnings.push("Needlessly long format of SID encoding");
      if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);else {
        this.isHexOnly = true;
        this.warnings.push("Too big SID for decoding, hex only");
      }
      return inputOffset + this.blockLength;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      if (this.isHexOnly) {
        if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
        var curView = this.valueHexView;

        var _retView4 = new Uint8Array(this.blockLength);

        for (var i = 0; i < this.blockLength - 1; i++) {
          _retView4[i] = curView[i] | 0x80;
        }

        _retView4[this.blockLength - 1] = curView[this.blockLength - 1];
        return _retView4.buffer;
      }

      var encodedBuf = utilToBase(this.valueDec, 7);

      if (encodedBuf.byteLength === 0) {
        this.error = "Error during encoding SID value";
        return EMPTY_BUFFER;
      }

      var retView = new Uint8Array(encodedBuf.byteLength);

      if (!sizeOnly) {
        var encodedView = new Uint8Array(encodedBuf);
        var len = encodedBuf.byteLength - 1;

        for (var _i9 = 0; _i9 < len; _i9++) {
          retView[_i9] = encodedView[_i9] | 0x80;
        }

        retView[len] = encodedView[len];
      }

      return retView.buffer;
    }
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      if (this.isHexOnly) result = build.Convert.ToHex(this.valueHexView);else {
        result = this.valueDec.toString();
      }
      return result;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalRelativeSidValueBlock.prototype), "toJSON", this).call(this)), {}, {
        valueDec: this.valueDec
      });
    }
  }]);

  return LocalRelativeSidValueBlock;
}(HexBlock(LocalBaseBlock));

LocalRelativeSidValueBlock.NAME = "relativeSidBlock";

var LocalRelativeObjectIdentifierValueBlock = /*#__PURE__*/function (_ValueBlock4) {
  _inherits(LocalRelativeObjectIdentifierValueBlock, _ValueBlock4);

  var _super27 = _createSuper(LocalRelativeObjectIdentifierValueBlock);

  function LocalRelativeObjectIdentifierValueBlock() {
    var _this25;

    var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref17$value = _ref17.value,
        value = _ref17$value === void 0 ? EMPTY_STRING : _ref17$value,
        parameters = _objectWithoutProperties(_ref17, _excluded14);

    _classCallCheck(this, LocalRelativeObjectIdentifierValueBlock);

    _this25 = _super27.call(this, parameters);
    _this25.value = [];

    if (value) {
      _this25.fromString(value);
    }

    return _this25;
  }

  _createClass(LocalRelativeObjectIdentifierValueBlock, [{
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var resultOffset = inputOffset;

      while (inputLength > 0) {
        var sidBlock = new LocalRelativeSidValueBlock();
        resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);

        if (resultOffset === -1) {
          this.blockLength = 0;
          this.error = sidBlock.error;
          return resultOffset;
        }

        this.blockLength += sidBlock.blockLength;
        inputLength -= sidBlock.blockLength;
        this.value.push(sidBlock);
      }

      return resultOffset;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly, writer) {
      var retBuffers = [];

      for (var i = 0; i < this.value.length; i++) {
        var valueBuf = this.value[i].toBER(sizeOnly);

        if (valueBuf.byteLength === 0) {
          this.error = this.value[i].error;
          return EMPTY_BUFFER;
        }

        retBuffers.push(valueBuf);
      }

      return concat(retBuffers);
    }
  }, {
    key: "fromString",
    value: function fromString(string) {
      this.value = [];
      var pos1 = 0;
      var pos2 = 0;
      var sid = "";

      do {
        pos2 = string.indexOf(".", pos1);
        if (pos2 === -1) sid = string.substring(pos1);else sid = string.substring(pos1, pos2);
        pos1 = pos2 + 1;
        var sidBlock = new LocalRelativeSidValueBlock();
        sidBlock.valueDec = parseInt(sid, 10);
        if (isNaN(sidBlock.valueDec)) return true;
        this.value.push(sidBlock);
      } while (pos2 !== -1);

      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      var isHexOnly = false;

      for (var i = 0; i < this.value.length; i++) {
        isHexOnly = this.value[i].isHexOnly;
        var sidStr = this.value[i].toString();
        if (i !== 0) result = "".concat(result, ".");

        if (isHexOnly) {
          sidStr = "{".concat(sidStr, "}");
          result += sidStr;
        } else result += sidStr;
      }

      return result;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var object = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalRelativeObjectIdentifierValueBlock.prototype), "toJSON", this).call(this)), {}, {
        value: this.toString(),
        sidArray: []
      });

      for (var i = 0; i < this.value.length; i++) {
        object.sidArray.push(this.value[i].toJSON());
      }

      return object;
    }
  }]);

  return LocalRelativeObjectIdentifierValueBlock;
}(ValueBlock);

LocalRelativeObjectIdentifierValueBlock.NAME = "RelativeObjectIdentifierValueBlock";

var _a$l;

var RelativeObjectIdentifier = /*#__PURE__*/function (_BaseBlock11) {
  _inherits(RelativeObjectIdentifier, _BaseBlock11);

  var _super28 = _createSuper(RelativeObjectIdentifier);

  function RelativeObjectIdentifier() {
    var _this26;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RelativeObjectIdentifier);

    _this26 = _super28.call(this, parameters, LocalRelativeObjectIdentifierValueBlock);
    _this26.idBlock.tagClass = 1;
    _this26.idBlock.tagNumber = 13;
    return _this26;
  }

  _createClass(RelativeObjectIdentifier, [{
    key: "getValue",
    value: function getValue() {
      return this.valueBlock.toString();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.valueBlock.fromString(value);
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(this.valueBlock.toString() || "empty");
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(RelativeObjectIdentifier.prototype), "toJSON", this).call(this)), {}, {
        value: this.getValue()
      });
    }
  }]);

  return RelativeObjectIdentifier;
}(BaseBlock);

_a$l = RelativeObjectIdentifier;

(function () {
  typeStore.RelativeObjectIdentifier = _a$l;
})();

RelativeObjectIdentifier.NAME = "RelativeObjectIdentifier";

var _a$k;

var Sequence = /*#__PURE__*/function (_Constructed) {
  _inherits(Sequence, _Constructed);

  var _super29 = _createSuper(Sequence);

  function Sequence() {
    var _this27;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Sequence);

    _this27 = _super29.call(this, parameters);
    _this27.idBlock.tagClass = 1;
    _this27.idBlock.tagNumber = 16;
    return _this27;
  }

  return _createClass(Sequence);
}(Constructed);

_a$k = Sequence;

(function () {
  typeStore.Sequence = _a$k;
})();

Sequence.NAME = "SEQUENCE";

var _a$j;

var Set = /*#__PURE__*/function (_Constructed2) {
  _inherits(Set, _Constructed2);

  var _super30 = _createSuper(Set);

  function Set() {
    var _this28;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Set);

    _this28 = _super30.call(this, parameters);
    _this28.idBlock.tagClass = 1;
    _this28.idBlock.tagNumber = 17;
    return _this28;
  }

  return _createClass(Set);
}(Constructed);

_a$j = Set;

(function () {
  typeStore.Set = _a$j;
})();

Set.NAME = "SET";

var LocalStringValueBlock = /*#__PURE__*/function (_HexBlock9) {
  _inherits(LocalStringValueBlock, _HexBlock9);

  var _super31 = _createSuper(LocalStringValueBlock);

  function LocalStringValueBlock() {
    var _this29;

    var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        parameters = _extends({}, _ref18);

    _classCallCheck(this, LocalStringValueBlock);

    _this29 = _super31.call(this, parameters);
    _this29.isHexOnly = true;
    _this29.value = EMPTY_STRING;
    return _this29;
  }

  _createClass(LocalStringValueBlock, [{
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LocalStringValueBlock.prototype), "toJSON", this).call(this)), {}, {
        value: this.value
      });
    }
  }]);

  return LocalStringValueBlock;
}(HexBlock(ValueBlock));

LocalStringValueBlock.NAME = "StringValueBlock";

var LocalSimpleStringValueBlock = /*#__PURE__*/function (_LocalStringValueBloc) {
  _inherits(LocalSimpleStringValueBlock, _LocalStringValueBloc);

  var _super32 = _createSuper(LocalSimpleStringValueBlock);

  function LocalSimpleStringValueBlock() {
    _classCallCheck(this, LocalSimpleStringValueBlock);

    return _super32.apply(this, arguments);
  }

  return _createClass(LocalSimpleStringValueBlock);
}(LocalStringValueBlock);

LocalSimpleStringValueBlock.NAME = "SimpleStringValueBlock";

var LocalSimpleStringBlock = /*#__PURE__*/function (_BaseStringBlock) {
  _inherits(LocalSimpleStringBlock, _BaseStringBlock);

  var _super33 = _createSuper(LocalSimpleStringBlock);

  function LocalSimpleStringBlock() {
    var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        parameters = _extends({}, _ref19);

    _classCallCheck(this, LocalSimpleStringBlock);

    return _super33.call(this, parameters, LocalSimpleStringValueBlock);
  }

  _createClass(LocalSimpleStringBlock, [{
    key: "fromBuffer",
    value: function fromBuffer(inputBuffer) {
      this.valueBlock.value = String.fromCharCode.apply(null, build.BufferSourceConverter.toUint8Array(inputBuffer));
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      var strLen = inputString.length;
      var view = this.valueBlock.valueHexView = new Uint8Array(strLen);

      for (var i = 0; i < strLen; i++) {
        view[i] = inputString.charCodeAt(i);
      }

      this.valueBlock.value = inputString;
    }
  }]);

  return LocalSimpleStringBlock;
}(BaseStringBlock);

LocalSimpleStringBlock.NAME = "SIMPLE STRING";

var LocalUtf8StringValueBlock = /*#__PURE__*/function (_LocalSimpleStringBlo) {
  _inherits(LocalUtf8StringValueBlock, _LocalSimpleStringBlo);

  var _super34 = _createSuper(LocalUtf8StringValueBlock);

  function LocalUtf8StringValueBlock() {
    _classCallCheck(this, LocalUtf8StringValueBlock);

    return _super34.apply(this, arguments);
  }

  _createClass(LocalUtf8StringValueBlock, [{
    key: "fromBuffer",
    value: function fromBuffer(inputBuffer) {
      this.valueBlock.valueHexView = build.BufferSourceConverter.toUint8Array(inputBuffer);

      try {
        this.valueBlock.value = build.Convert.ToUtf8String(inputBuffer);
      } catch (ex) {
        this.warnings.push("Error during \"decodeURIComponent\": ".concat(ex, ", using raw string"));
        this.valueBlock.value = build.Convert.ToBinary(inputBuffer);
      }
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      this.valueBlock.valueHexView = new Uint8Array(build.Convert.FromUtf8String(inputString));
      this.valueBlock.value = inputString;
    }
  }]);

  return LocalUtf8StringValueBlock;
}(LocalSimpleStringBlock);

LocalUtf8StringValueBlock.NAME = "Utf8StringValueBlock";

var _a$i;

var Utf8String = /*#__PURE__*/function (_LocalUtf8StringValue) {
  _inherits(Utf8String, _LocalUtf8StringValue);

  var _super35 = _createSuper(Utf8String);

  function Utf8String() {
    var _this30;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Utf8String);

    _this30 = _super35.call(this, parameters);
    _this30.idBlock.tagClass = 1;
    _this30.idBlock.tagNumber = 12;
    return _this30;
  }

  return _createClass(Utf8String);
}(LocalUtf8StringValueBlock);

_a$i = Utf8String;

(function () {
  typeStore.Utf8String = _a$i;
})();

Utf8String.NAME = "UTF8String";

var LocalBmpStringValueBlock = /*#__PURE__*/function (_LocalSimpleStringBlo2) {
  _inherits(LocalBmpStringValueBlock, _LocalSimpleStringBlo2);

  var _super36 = _createSuper(LocalBmpStringValueBlock);

  function LocalBmpStringValueBlock() {
    _classCallCheck(this, LocalBmpStringValueBlock);

    return _super36.apply(this, arguments);
  }

  _createClass(LocalBmpStringValueBlock, [{
    key: "fromBuffer",
    value: function fromBuffer(inputBuffer) {
      this.valueBlock.value = build.Convert.ToUtf16String(inputBuffer);
      this.valueBlock.valueHexView = build.BufferSourceConverter.toUint8Array(inputBuffer);
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      this.valueBlock.value = inputString;
      this.valueBlock.valueHexView = new Uint8Array(build.Convert.FromUtf16String(inputString));
    }
  }]);

  return LocalBmpStringValueBlock;
}(LocalSimpleStringBlock);

LocalBmpStringValueBlock.NAME = "BmpStringValueBlock";

var _a$h;

var BmpString = /*#__PURE__*/function (_LocalBmpStringValueB) {
  _inherits(BmpString, _LocalBmpStringValueB);

  var _super37 = _createSuper(BmpString);

  function BmpString() {
    var _this31;

    var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        parameters = _extends({}, _ref20);

    _classCallCheck(this, BmpString);

    _this31 = _super37.call(this, parameters);
    _this31.idBlock.tagClass = 1;
    _this31.idBlock.tagNumber = 30;
    return _this31;
  }

  return _createClass(BmpString);
}(LocalBmpStringValueBlock);

_a$h = BmpString;

(function () {
  typeStore.BmpString = _a$h;
})();

BmpString.NAME = "BMPString";

var LocalUniversalStringValueBlock = /*#__PURE__*/function (_LocalSimpleStringBlo3) {
  _inherits(LocalUniversalStringValueBlock, _LocalSimpleStringBlo3);

  var _super38 = _createSuper(LocalUniversalStringValueBlock);

  function LocalUniversalStringValueBlock() {
    _classCallCheck(this, LocalUniversalStringValueBlock);

    return _super38.apply(this, arguments);
  }

  _createClass(LocalUniversalStringValueBlock, [{
    key: "fromBuffer",
    value: function fromBuffer(inputBuffer) {
      var copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
      var valueView = new Uint8Array(copyBuffer);

      for (var i = 0; i < valueView.length; i += 4) {
        valueView[i] = valueView[i + 3];
        valueView[i + 1] = valueView[i + 2];
        valueView[i + 2] = 0x00;
        valueView[i + 3] = 0x00;
      }

      this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      var strLength = inputString.length;
      var valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);

      for (var i = 0; i < strLength; i++) {
        var codeBuf = utilToBase(inputString.charCodeAt(i), 8);
        var codeView = new Uint8Array(codeBuf);
        if (codeView.length > 4) continue;
        var dif = 4 - codeView.length;

        for (var j = codeView.length - 1; j >= 0; j--) {
          valueHexView[i * 4 + j + dif] = codeView[j];
        }
      }

      this.valueBlock.value = inputString;
    }
  }]);

  return LocalUniversalStringValueBlock;
}(LocalSimpleStringBlock);

LocalUniversalStringValueBlock.NAME = "UniversalStringValueBlock";

var _a$g;

var UniversalString = /*#__PURE__*/function (_LocalUniversalString) {
  _inherits(UniversalString, _LocalUniversalString);

  var _super39 = _createSuper(UniversalString);

  function UniversalString() {
    var _this32;

    var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        parameters = _extends({}, _ref21);

    _classCallCheck(this, UniversalString);

    _this32 = _super39.call(this, parameters);
    _this32.idBlock.tagClass = 1;
    _this32.idBlock.tagNumber = 28;
    return _this32;
  }

  return _createClass(UniversalString);
}(LocalUniversalStringValueBlock);

_a$g = UniversalString;

(function () {
  typeStore.UniversalString = _a$g;
})();

UniversalString.NAME = "UniversalString";

var _a$f;

var NumericString = /*#__PURE__*/function (_LocalSimpleStringBlo4) {
  _inherits(NumericString, _LocalSimpleStringBlo4);

  var _super40 = _createSuper(NumericString);

  function NumericString() {
    var _this33;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NumericString);

    _this33 = _super40.call(this, parameters);
    _this33.idBlock.tagClass = 1;
    _this33.idBlock.tagNumber = 18;
    return _this33;
  }

  return _createClass(NumericString);
}(LocalSimpleStringBlock);

_a$f = NumericString;

(function () {
  typeStore.NumericString = _a$f;
})();

NumericString.NAME = "NumericString";

var _a$e;

var PrintableString = /*#__PURE__*/function (_LocalSimpleStringBlo5) {
  _inherits(PrintableString, _LocalSimpleStringBlo5);

  var _super41 = _createSuper(PrintableString);

  function PrintableString() {
    var _this34;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PrintableString);

    _this34 = _super41.call(this, parameters);
    _this34.idBlock.tagClass = 1;
    _this34.idBlock.tagNumber = 19;
    return _this34;
  }

  return _createClass(PrintableString);
}(LocalSimpleStringBlock);

_a$e = PrintableString;

(function () {
  typeStore.PrintableString = _a$e;
})();

PrintableString.NAME = "PrintableString";

var _a$d;

var TeletexString = /*#__PURE__*/function (_LocalSimpleStringBlo6) {
  _inherits(TeletexString, _LocalSimpleStringBlo6);

  var _super42 = _createSuper(TeletexString);

  function TeletexString() {
    var _this35;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TeletexString);

    _this35 = _super42.call(this, parameters);
    _this35.idBlock.tagClass = 1;
    _this35.idBlock.tagNumber = 20;
    return _this35;
  }

  return _createClass(TeletexString);
}(LocalSimpleStringBlock);

_a$d = TeletexString;

(function () {
  typeStore.TeletexString = _a$d;
})();

TeletexString.NAME = "TeletexString";

var _a$c;

var VideotexString = /*#__PURE__*/function (_LocalSimpleStringBlo7) {
  _inherits(VideotexString, _LocalSimpleStringBlo7);

  var _super43 = _createSuper(VideotexString);

  function VideotexString() {
    var _this36;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VideotexString);

    _this36 = _super43.call(this, parameters);
    _this36.idBlock.tagClass = 1;
    _this36.idBlock.tagNumber = 21;
    return _this36;
  }

  return _createClass(VideotexString);
}(LocalSimpleStringBlock);

_a$c = VideotexString;

(function () {
  typeStore.VideotexString = _a$c;
})();

VideotexString.NAME = "VideotexString";

var _a$b;

var IA5String = /*#__PURE__*/function (_LocalSimpleStringBlo8) {
  _inherits(IA5String, _LocalSimpleStringBlo8);

  var _super44 = _createSuper(IA5String);

  function IA5String() {
    var _this37;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, IA5String);

    _this37 = _super44.call(this, parameters);
    _this37.idBlock.tagClass = 1;
    _this37.idBlock.tagNumber = 22;
    return _this37;
  }

  return _createClass(IA5String);
}(LocalSimpleStringBlock);

_a$b = IA5String;

(function () {
  typeStore.IA5String = _a$b;
})();

IA5String.NAME = "IA5String";

var _a$a;

var GraphicString = /*#__PURE__*/function (_LocalSimpleStringBlo9) {
  _inherits(GraphicString, _LocalSimpleStringBlo9);

  var _super45 = _createSuper(GraphicString);

  function GraphicString() {
    var _this38;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GraphicString);

    _this38 = _super45.call(this, parameters);
    _this38.idBlock.tagClass = 1;
    _this38.idBlock.tagNumber = 25;
    return _this38;
  }

  return _createClass(GraphicString);
}(LocalSimpleStringBlock);

_a$a = GraphicString;

(function () {
  typeStore.GraphicString = _a$a;
})();

GraphicString.NAME = "GraphicString";

var _a$9;

var VisibleString = /*#__PURE__*/function (_LocalSimpleStringBlo10) {
  _inherits(VisibleString, _LocalSimpleStringBlo10);

  var _super46 = _createSuper(VisibleString);

  function VisibleString() {
    var _this39;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VisibleString);

    _this39 = _super46.call(this, parameters);
    _this39.idBlock.tagClass = 1;
    _this39.idBlock.tagNumber = 26;
    return _this39;
  }

  return _createClass(VisibleString);
}(LocalSimpleStringBlock);

_a$9 = VisibleString;

(function () {
  typeStore.VisibleString = _a$9;
})();

VisibleString.NAME = "VisibleString";

var _a$8;

var GeneralString = /*#__PURE__*/function (_LocalSimpleStringBlo11) {
  _inherits(GeneralString, _LocalSimpleStringBlo11);

  var _super47 = _createSuper(GeneralString);

  function GeneralString() {
    var _this40;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GeneralString);

    _this40 = _super47.call(this, parameters);
    _this40.idBlock.tagClass = 1;
    _this40.idBlock.tagNumber = 27;
    return _this40;
  }

  return _createClass(GeneralString);
}(LocalSimpleStringBlock);

_a$8 = GeneralString;

(function () {
  typeStore.GeneralString = _a$8;
})();

GeneralString.NAME = "GeneralString";

var _a$7;

var CharacterString = /*#__PURE__*/function (_LocalSimpleStringBlo12) {
  _inherits(CharacterString, _LocalSimpleStringBlo12);

  var _super48 = _createSuper(CharacterString);

  function CharacterString() {
    var _this41;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CharacterString);

    _this41 = _super48.call(this, parameters);
    _this41.idBlock.tagClass = 1;
    _this41.idBlock.tagNumber = 29;
    return _this41;
  }

  return _createClass(CharacterString);
}(LocalSimpleStringBlock);

_a$7 = CharacterString;

(function () {
  typeStore.CharacterString = _a$7;
})();

CharacterString.NAME = "CharacterString";

var _a$6;

var UTCTime = /*#__PURE__*/function (_VisibleString) {
  _inherits(UTCTime, _VisibleString);

  var _super49 = _createSuper(UTCTime);

  function UTCTime() {
    var _this42;

    var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        value = _ref22.value,
        valueDate = _ref22.valueDate,
        parameters = _objectWithoutProperties(_ref22, _excluded15);

    _classCallCheck(this, UTCTime);

    _this42 = _super49.call(this, parameters);
    _this42.year = 0;
    _this42.month = 0;
    _this42.day = 0;
    _this42.hour = 0;
    _this42.minute = 0;
    _this42.second = 0;

    if (value) {
      _this42.fromString(value);

      _this42.valueBlock.valueHexView = new Uint8Array(value.length);

      for (var i = 0; i < value.length; i++) {
        _this42.valueBlock.valueHexView[i] = value.charCodeAt(i);
      }
    }

    if (valueDate) {
      _this42.fromDate(valueDate);

      _this42.valueBlock.valueHexView = new Uint8Array(_this42.toBuffer());
    }

    _this42.idBlock.tagClass = 1;
    _this42.idBlock.tagNumber = 23;
    return _this42;
  }

  _createClass(UTCTime, [{
    key: "fromBuffer",
    value: function fromBuffer(inputBuffer) {
      this.fromString(String.fromCharCode.apply(null, build.BufferSourceConverter.toUint8Array(inputBuffer)));
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      var str = this.toString();
      var buffer = new ArrayBuffer(str.length);
      var view = new Uint8Array(buffer);

      for (var i = 0; i < str.length; i++) {
        view[i] = str.charCodeAt(i);
      }

      return buffer;
    }
  }, {
    key: "fromDate",
    value: function fromDate(inputDate) {
      this.year = inputDate.getUTCFullYear();
      this.month = inputDate.getUTCMonth() + 1;
      this.day = inputDate.getUTCDate();
      this.hour = inputDate.getUTCHours();
      this.minute = inputDate.getUTCMinutes();
      this.second = inputDate.getUTCSeconds();
    }
  }, {
    key: "toDate",
    value: function toDate() {
      return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      var parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
      var parserArray = parser.exec(inputString);

      if (parserArray === null) {
        this.error = "Wrong input string for conversion";
        return;
      }

      var year = parseInt(parserArray[1], 10);
      if (year >= 50) this.year = 1900 + year;else this.year = 2000 + year;
      this.month = parseInt(parserArray[2], 10);
      this.day = parseInt(parserArray[3], 10);
      this.hour = parseInt(parserArray[4], 10);
      this.minute = parseInt(parserArray[5], 10);
      this.second = parseInt(parserArray[6], 10);
    }
  }, {
    key: "toString",
    value: function toString() {
      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "iso";

      if (encoding === "iso") {
        var outputArray = new Array(7);
        outputArray[0] = padNumber(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);
        outputArray[1] = padNumber(this.month, 2);
        outputArray[2] = padNumber(this.day, 2);
        outputArray[3] = padNumber(this.hour, 2);
        outputArray[4] = padNumber(this.minute, 2);
        outputArray[5] = padNumber(this.second, 2);
        outputArray[6] = "Z";
        return outputArray.join("");
      }

      return _get(_getPrototypeOf(UTCTime.prototype), "toString", this).call(this, encoding);
    }
  }, {
    key: "onAsciiEncoding",
    value: function onAsciiEncoding() {
      return "".concat(this.constructor.NAME, " : ").concat(this.toDate().toISOString());
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(UTCTime.prototype), "toJSON", this).call(this)), {}, {
        year: this.year,
        month: this.month,
        day: this.day,
        hour: this.hour,
        minute: this.minute,
        second: this.second
      });
    }
  }]);

  return UTCTime;
}(VisibleString);

_a$6 = UTCTime;

(function () {
  typeStore.UTCTime = _a$6;
})();

UTCTime.NAME = "UTCTime";

var _a$5;

var GeneralizedTime = /*#__PURE__*/function (_UTCTime) {
  _inherits(GeneralizedTime, _UTCTime);

  var _super50 = _createSuper(GeneralizedTime);

  function GeneralizedTime() {
    var _this43;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GeneralizedTime);

    var _b;

    _this43 = _super50.call(this, parameters);
    (_b = _this43.millisecond) !== null && _b !== void 0 ? _b : _this43.millisecond = 0;
    _this43.idBlock.tagClass = 1;
    _this43.idBlock.tagNumber = 24;
    return _this43;
  }

  _createClass(GeneralizedTime, [{
    key: "fromDate",
    value: function fromDate(inputDate) {
      _get(_getPrototypeOf(GeneralizedTime.prototype), "fromDate", this).call(this, inputDate);

      this.millisecond = inputDate.getUTCMilliseconds();
    }
  }, {
    key: "toDate",
    value: function toDate() {
      return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
    }
  }, {
    key: "fromString",
    value: function fromString(inputString) {
      var isUTC = false;
      var timeString = "";
      var dateTimeString = "";
      var fractionPart = 0;
      var parser;
      var hourDifference = 0;
      var minuteDifference = 0;

      if (inputString[inputString.length - 1] === "Z") {
        timeString = inputString.substring(0, inputString.length - 1);
        isUTC = true;
      } else {
        var number = new Number(inputString[inputString.length - 1]);
        if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
        timeString = inputString;
      }

      if (isUTC) {
        if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for conversion");
        if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for conversion");
      } else {
        var multiplier = 1;
        var differencePosition = timeString.indexOf("+");
        var differenceString = "";

        if (differencePosition === -1) {
          differencePosition = timeString.indexOf("-");
          multiplier = -1;
        }

        if (differencePosition !== -1) {
          differenceString = timeString.substring(differencePosition + 1);
          timeString = timeString.substring(0, differencePosition);
          if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for conversion");

          var _number = parseInt(differenceString.substring(0, 2), 10);

          if (isNaN(_number.valueOf())) throw new Error("Wrong input string for conversion");
          hourDifference = multiplier * _number;

          if (differenceString.length === 4) {
            _number = parseInt(differenceString.substring(2, 4), 10);
            if (isNaN(_number.valueOf())) throw new Error("Wrong input string for conversion");
            minuteDifference = multiplier * _number;
          }
        }
      }

      var fractionPointPosition = timeString.indexOf(".");
      if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(",");

      if (fractionPointPosition !== -1) {
        var fractionPartCheck = new Number("0".concat(timeString.substring(fractionPointPosition)));
        if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for conversion");
        fractionPart = fractionPartCheck.valueOf();
        dateTimeString = timeString.substring(0, fractionPointPosition);
      } else dateTimeString = timeString;

      switch (true) {
        case dateTimeString.length === 8:
          parser = /(\d{4})(\d{2})(\d{2})/ig;
          if (fractionPointPosition !== -1) throw new Error("Wrong input string for conversion");
          break;

        case dateTimeString.length === 10:
          parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;

          if (fractionPointPosition !== -1) {
            var fractionResult = 60 * fractionPart;
            this.minute = Math.floor(fractionResult);
            fractionResult = 60 * (fractionResult - this.minute);
            this.second = Math.floor(fractionResult);
            fractionResult = 1000 * (fractionResult - this.second);
            this.millisecond = Math.floor(fractionResult);
          }

          break;

        case dateTimeString.length === 12:
          parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;

          if (fractionPointPosition !== -1) {
            var _fractionResult = 60 * fractionPart;

            this.second = Math.floor(_fractionResult);
            _fractionResult = 1000 * (_fractionResult - this.second);
            this.millisecond = Math.floor(_fractionResult);
          }

          break;

        case dateTimeString.length === 14:
          parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;

          if (fractionPointPosition !== -1) {
            var _fractionResult2 = 1000 * fractionPart;

            this.millisecond = Math.floor(_fractionResult2);
          }

          break;

        default:
          throw new Error("Wrong input string for conversion");
      }

      var parserArray = parser.exec(dateTimeString);
      if (parserArray === null) throw new Error("Wrong input string for conversion");

      for (var j = 1; j < parserArray.length; j++) {
        switch (j) {
          case 1:
            this.year = parseInt(parserArray[j], 10);
            break;

          case 2:
            this.month = parseInt(parserArray[j], 10);
            break;

          case 3:
            this.day = parseInt(parserArray[j], 10);
            break;

          case 4:
            this.hour = parseInt(parserArray[j], 10) + hourDifference;
            break;

          case 5:
            this.minute = parseInt(parserArray[j], 10) + minuteDifference;
            break;

          case 6:
            this.second = parseInt(parserArray[j], 10);
            break;

          default:
            throw new Error("Wrong input string for conversion");
        }
      }

      if (isUTC === false) {
        var tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        this.year = tempDate.getUTCFullYear();
        this.month = tempDate.getUTCMonth();
        this.day = tempDate.getUTCDay();
        this.hour = tempDate.getUTCHours();
        this.minute = tempDate.getUTCMinutes();
        this.second = tempDate.getUTCSeconds();
        this.millisecond = tempDate.getUTCMilliseconds();
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "iso";

      if (encoding === "iso") {
        var outputArray = [];
        outputArray.push(padNumber(this.year, 4));
        outputArray.push(padNumber(this.month, 2));
        outputArray.push(padNumber(this.day, 2));
        outputArray.push(padNumber(this.hour, 2));
        outputArray.push(padNumber(this.minute, 2));
        outputArray.push(padNumber(this.second, 2));

        if (this.millisecond !== 0) {
          outputArray.push(".");
          outputArray.push(padNumber(this.millisecond, 3));
        }

        outputArray.push("Z");
        return outputArray.join("");
      }

      return _get(_getPrototypeOf(GeneralizedTime.prototype), "toString", this).call(this, encoding);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(GeneralizedTime.prototype), "toJSON", this).call(this)), {}, {
        millisecond: this.millisecond
      });
    }
  }]);

  return GeneralizedTime;
}(UTCTime);

_a$5 = GeneralizedTime;

(function () {
  typeStore.GeneralizedTime = _a$5;
})();

GeneralizedTime.NAME = "GeneralizedTime";

var _a$4;

var DATE = /*#__PURE__*/function (_Utf8String) {
  _inherits(DATE, _Utf8String);

  var _super51 = _createSuper(DATE);

  function DATE() {
    var _this44;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DATE);

    _this44 = _super51.call(this, parameters);
    _this44.idBlock.tagClass = 1;
    _this44.idBlock.tagNumber = 31;
    return _this44;
  }

  return _createClass(DATE);
}(Utf8String);

_a$4 = DATE;

(function () {
  typeStore.DATE = _a$4;
})();

DATE.NAME = "DATE";

var _a$3;

var TimeOfDay = /*#__PURE__*/function (_Utf8String2) {
  _inherits(TimeOfDay, _Utf8String2);

  var _super52 = _createSuper(TimeOfDay);

  function TimeOfDay() {
    var _this45;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TimeOfDay);

    _this45 = _super52.call(this, parameters);
    _this45.idBlock.tagClass = 1;
    _this45.idBlock.tagNumber = 32;
    return _this45;
  }

  return _createClass(TimeOfDay);
}(Utf8String);

_a$3 = TimeOfDay;

(function () {
  typeStore.TimeOfDay = _a$3;
})();

TimeOfDay.NAME = "TimeOfDay";

var _a$2;

var DateTime = /*#__PURE__*/function (_Utf8String3) {
  _inherits(DateTime, _Utf8String3);

  var _super53 = _createSuper(DateTime);

  function DateTime() {
    var _this46;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DateTime);

    _this46 = _super53.call(this, parameters);
    _this46.idBlock.tagClass = 1;
    _this46.idBlock.tagNumber = 33;
    return _this46;
  }

  return _createClass(DateTime);
}(Utf8String);

_a$2 = DateTime;

(function () {
  typeStore.DateTime = _a$2;
})();

DateTime.NAME = "DateTime";

var _a$1;

var Duration = /*#__PURE__*/function (_Utf8String4) {
  _inherits(Duration, _Utf8String4);

  var _super54 = _createSuper(Duration);

  function Duration() {
    var _this47;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Duration);

    _this47 = _super54.call(this, parameters);
    _this47.idBlock.tagClass = 1;
    _this47.idBlock.tagNumber = 34;
    return _this47;
  }

  return _createClass(Duration);
}(Utf8String);

_a$1 = Duration;

(function () {
  typeStore.Duration = _a$1;
})();

Duration.NAME = "Duration";

var _a;

var TIME = /*#__PURE__*/function (_Utf8String5) {
  _inherits(TIME, _Utf8String5);

  var _super55 = _createSuper(TIME);

  function TIME() {
    var _this48;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TIME);

    _this48 = _super55.call(this, parameters);
    _this48.idBlock.tagClass = 1;
    _this48.idBlock.tagNumber = 14;
    return _this48;
  }

  return _createClass(TIME);
}(Utf8String);

_a = TIME;

(function () {
  typeStore.TIME = _a;
})();

TIME.NAME = "TIME";

var Any = /*#__PURE__*/_createClass(function Any() {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref23$name = _ref23.name,
      name = _ref23$name === void 0 ? EMPTY_STRING : _ref23$name,
      _ref23$optional = _ref23.optional,
      optional = _ref23$optional === void 0 ? false : _ref23$optional;

  _classCallCheck(this, Any);

  this.name = name;
  this.optional = optional;
});

var Choice = /*#__PURE__*/function (_Any) {
  _inherits(Choice, _Any);

  var _super56 = _createSuper(Choice);

  function Choice() {
    var _this49;

    var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref24$value = _ref24.value,
        value = _ref24$value === void 0 ? [] : _ref24$value,
        parameters = _objectWithoutProperties(_ref24, _excluded16);

    _classCallCheck(this, Choice);

    _this49 = _super56.call(this, parameters);
    _this49.value = value;
    return _this49;
  }

  return _createClass(Choice);
}(Any);

var Repeated = /*#__PURE__*/function (_Any2) {
  _inherits(Repeated, _Any2);

  var _super57 = _createSuper(Repeated);

  function Repeated() {
    var _this50;

    var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref25$value = _ref25.value,
        value = _ref25$value === void 0 ? new Any() : _ref25$value,
        _ref25$local = _ref25.local,
        local = _ref25$local === void 0 ? false : _ref25$local,
        parameters = _objectWithoutProperties(_ref25, _excluded17);

    _classCallCheck(this, Repeated);

    _this50 = _super57.call(this, parameters);
    _this50.value = value;
    _this50.local = local;
    return _this50;
  }

  return _createClass(Repeated);
}(Any);

var RawData = /*#__PURE__*/function () {
  function RawData() {
    var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref26$data = _ref26.data,
        data = _ref26$data === void 0 ? EMPTY_VIEW : _ref26$data;

    _classCallCheck(this, RawData);

    this.dataView = build.BufferSourceConverter.toUint8Array(data);
  }

  _createClass(RawData, [{
    key: "data",
    get: function get() {
      return this.dataView.slice().buffer;
    },
    set: function set(value) {
      this.dataView = build.BufferSourceConverter.toUint8Array(value);
    }
  }, {
    key: "fromBER",
    value: function fromBER(inputBuffer, inputOffset, inputLength) {
      var endLength = inputOffset + inputLength;
      this.dataView = build.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);
      return endLength;
    }
  }, {
    key: "toBER",
    value: function toBER(sizeOnly) {
      return this.dataView.slice().buffer;
    }
  }]);

  return RawData;
}();

function compareSchema(root, inputData, inputSchema) {
  if (inputSchema instanceof Choice) {
    for (var j = 0; j < inputSchema.value.length; j++) {
      var result = compareSchema(root, inputData, inputSchema.value[j]);

      if (result.verified) {
        return {
          verified: true,
          result: root
        };
      }
    }

    {
      var _result = {
        verified: false,
        result: {
          error: "Wrong values for Choice type"
        }
      };
      if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;
      return _result;
    }
  }

  if (inputSchema instanceof Any) {
    if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;
    return {
      verified: true,
      result: root
    };
  }

  if (root instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong root object"
      }
    };
  }

  if (inputData instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 data"
      }
    };
  }

  if (inputSchema instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (ID_BLOCK in inputSchema === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (FROM_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (TO_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  var encodedId = inputSchema.idBlock.toBER(false);

  if (encodedId.byteLength === 0) {
    return {
      verified: false,
      result: {
        error: "Error encoding idBlock for ASN.1 schema"
      }
    };
  }

  var decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);

  if (decodedOffset === -1) {
    return {
      verified: false,
      result: {
        error: "Error decoding idBlock for ASN.1 schema"
      }
    };
  }

  if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
    return {
      verified: false,
      result: root
    };
  }

  if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
    return {
      verified: false,
      result: root
    };
  }

  if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
    return {
      verified: false,
      result: root
    };
  }

  if (!(IS_HEX_ONLY in inputSchema.idBlock)) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }

  if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
    return {
      verified: false,
      result: root
    };
  }

  if (inputSchema.idBlock.isHexOnly) {
    if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {
      return {
        verified: false,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
    }

    var schemaView = inputSchema.idBlock.valueHexView;
    var asn1View = inputData.idBlock.valueHexView;

    if (schemaView.length !== asn1View.length) {
      return {
        verified: false,
        result: root
      };
    }

    for (var i = 0; i < schemaView.length; i++) {
      if (schemaView[i] !== asn1View[1]) {
        return {
          verified: false,
          result: root
        };
      }
    }
  }

  if (inputSchema.name) {
    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
    if (inputSchema.name) root[inputSchema.name] = inputData;
  }

  if (inputSchema instanceof typeStore.Constructed) {
    var admission = 0;
    var _result2 = {
      verified: false,
      result: {
        error: "Unknown error"
      }
    };
    var maxLength = inputSchema.valueBlock.value.length;

    if (maxLength > 0) {
      if (inputSchema.valueBlock.value[0] instanceof Repeated) {
        maxLength = inputData.valueBlock.value.length;
      }
    }

    if (maxLength === 0) {
      return {
        verified: true,
        result: root
      };
    }

    if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {
      var _optional = true;

      for (var _i10 = 0; _i10 < inputSchema.valueBlock.value.length; _i10++) {
        _optional = _optional && (inputSchema.valueBlock.value[_i10].optional || false);
      }

      if (_optional) {
        return {
          verified: true,
          result: root
        };
      }

      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) delete root[inputSchema.name];
      }

      root.error = "Inconsistent object length";
      return {
        verified: false,
        result: root
      };
    }

    for (var _i11 = 0; _i11 < maxLength; _i11++) {
      if (_i11 - admission >= inputData.valueBlock.value.length) {
        if (inputSchema.valueBlock.value[_i11].optional === false) {
          var _result3 = {
            verified: false,
            result: root
          };
          root.error = "Inconsistent length between ASN.1 data and schema";

          if (inputSchema.name) {
            inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);

            if (inputSchema.name) {
              delete root[inputSchema.name];
              _result3.name = inputSchema.name;
            }
          }

          return _result3;
        }
      } else {
        if (inputSchema.valueBlock.value[0] instanceof Repeated) {
          _result2 = compareSchema(root, inputData.valueBlock.value[_i11], inputSchema.valueBlock.value[0].value);

          if (_result2.verified === false) {
            if (inputSchema.valueBlock.value[0].optional) admission++;else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }

              return _result2;
            }
          }

          if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {
            var arrayRoot = {};
            if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;else arrayRoot = root;
            if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined") arrayRoot[inputSchema.valueBlock.value[0].name] = [];
            arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[_i11]);
          }
        } else {
          _result2 = compareSchema(root, inputData.valueBlock.value[_i11 - admission], inputSchema.valueBlock.value[_i11]);

          if (_result2.verified === false) {
            if (inputSchema.valueBlock.value[_i11].optional) admission++;else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }

              return _result2;
            }
          }
        }
      }
    }

    if (_result2.verified === false) {
      var _result4 = {
        verified: false,
        result: root
      };

      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);

        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result4.name = inputSchema.name;
        }
      }

      return _result4;
    }

    return {
      verified: true,
      result: root
    };
  }

  if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {
    var asn1 = localFromBER(inputData.valueBlock.valueHexView);

    if (asn1.offset === -1) {
      var _result5 = {
        verified: false,
        result: asn1.result
      };

      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);

        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result5.name = inputSchema.name;
        }
      }

      return _result5;
    }

    return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
  }

  return {
    verified: true,
    result: root
  };
}

function verifySchema(inputBuffer, inputSchema) {
  if (inputSchema instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema type"
      }
    };
  }

  var asn1 = localFromBER(build.BufferSourceConverter.toUint8Array(inputBuffer));

  if (asn1.offset === -1) {
    return {
      verified: false,
      result: asn1.result
    };
  }

  return compareSchema(asn1.result, asn1.result, inputSchema);
}



/***/ }),

/***/ 4230:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (module, exports) {
  'use strict'; // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  } // Could use `inherits` module, but don't want to move from single file
  // architecture yet.


  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  } // BN


  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0; // Reduction context

    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }

  if (_typeof(module) === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;
  var Buffer;

  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__(5262).Buffer);
    }
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (_typeof(number) === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }

    assert(base === (base | 0) && base >= 2 && base <= 36);
    number = number.toString().replace(/\s+/g, '');
    var start = 0;

    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);

        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }

    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return; // Reverse the bytes

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');

    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;

    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }

    return this.strip();
  };

  function parseHex4Bits(string, index) {
    var c = string.charCodeAt(index); // 'A' - 'F'

    if (c >= 65 && c <= 70) {
      return c - 55; // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87; // '0' - '9'
    } else {
      return c - 48 & 0xf;
    }
  }

  function parseHexByte(string, lowerBound, index) {
    var r = parseHex4Bits(string, index);

    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }

    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    } // 24-bits chunks


    var off = 0;
    var j = 0;
    var w;

    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;

        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;

      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;

        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r *= mul; // 'a'

      if (c >= 49) {
        r += c - 49 + 0xa; // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa; // '0' - '9'
      } else {
        r += c;
      }
    }

    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1; // Find length of limb in base

    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }

    limbLen--;
    limbPow = limbPow / base | 0;
    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;
    var word = 0;

    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);
      this.imuln(limbPow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }

    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }

    return this;
  }; // Remove leading `0` from `this`


  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }

    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }

    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };
  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */


  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;
    var out;

    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;

        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }

        off += 2;

        if (off >= 26) {
          off -= 26;
          i--;
        }
      }

      if (carry !== 0) {
        out = carry.toString(16) + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;

      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }

      if (this.isZero()) {
        out = '0' + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];

    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }

    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');
    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);
    var b, i;
    var q = this.clone();

    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;

      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }

      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }

      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }

      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }

      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;
    var t = w;
    var r = 0;

    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }

    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }

    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }

    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }

    if ((t & 0x1) === 0) {
      r++;
    }

    return r;
  }; // Return number of used bits in a BN


  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];

    var hi = this._countBits(w);

    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  } // Number of trailing zero bits


  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;
    var r = 0;

    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);

      r += b;
      if (b !== 26) break;
    }

    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }

    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }

    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  }; // Return negative clone of `this`


  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  }; // Or `num` with `this` in-place


  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  }; // Or `num` with `this`


  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  }; // And `num` with `this` in-place


  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;

    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;
    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  }; // And `num` with `this`


  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  }; // Xor `num` with `this` in-place


  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;
    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  }; // Xor `num` with `this`


  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  }; // Not ``this`` with ``width`` bitwidth


  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);
    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26; // Extend the buffer with leading zeroes

    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    } // Handle complete words


    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    } // Handle the residue


    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    } // And remove leading zeroes


    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  }; // Set `bit` of `this`


  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);
    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  }; // Add `num` to `this` in-place


  BN.prototype.iadd = function iadd(num) {
    var r; // negative + positive

    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign(); // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    } // a.length > b.length


    var a, b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++; // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  }; // Add `num` to `this`


  BN.prototype.add = function add(num) {
    var res;

    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);
    return num.clone().iadd(this);
  }; // Subtract `num` from `this` in-place


  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign(); // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    } // At this point both numbers are positive


    var cmp = this.cmp(num); // Optimization - zeroify

    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    } // a > b


    var a, b;

    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    } // Copy rest of the words


    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  }; // Subtract `num` from `this`


  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;
    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }

      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }

    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  } // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).


  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;
    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */

    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */

    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */

    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */

    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */

    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */

    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */

    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */

    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */

    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */

    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */

    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */

    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */

    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */

    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */

    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */

    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */

    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */

    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */

    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;

    if (c !== 0) {
      o[19] = c;
      out.length++;
    }

    return out;
  }; // Polyfill comb


  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;
    var carry = 0;
    var hncarry = 0;

    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;
        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }

      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }

    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;

    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  }; // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion


  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;

    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  }; // Returns binary-reversed representation of `x`


  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;
    var rb = 0;

    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  }; // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm


  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;
      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];
          var ro = rtws[p + j + s];
          var io = itws[p + j + s];
          var rx = rtwdf_ * ro - itwdf_ * io;
          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;
          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;
          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;
          /* jshint maxdepth : false */

          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;

    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];
      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;
      t = iws[i];
      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;

    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;

    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);
      rws[2 * i] = carry & 0x1fff;
      carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;
      carry = carry >>> 13;
    } // Pad with zeroes


    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);

    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);
    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);
    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);
    var rmws = out.words;
    rmws.length = N;
    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);
    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);
    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  }; // Multiply `this` by `num`


  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  }; // Multiply employing FFT


  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  }; // In-place Multiplication


  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000); // Carry

    var carry = 0;

    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  }; // `this` * `this`


  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  }; // `this` * `this` in-place


  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  }; // Math.pow(`this`, `num`)


  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1); // Skip leading zeroes

    var res = this;

    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;
        res = res.mul(q);
      }
    }

    return res;
  }; // Shift-left in-place


  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  }; // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits


  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;

    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;
    h -= s;
    h = Math.max(0, h); // Extended mode, copy masked part

    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }

      maskedWords.length = s;
    }

    if (s === 0) {// No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;

      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;

    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    } // Push carried bits as a mask


    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  }; // Shift-left


  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  }; // Shift-right


  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  }; // Test if n bit is set


  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) return false; // Check bit and return

    var w = this.words[s];
    return !!(w & q);
  }; // Return only lowers bits of number (in-place)


  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }

    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  }; // Return only lowers bits of number


  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  }; // Add plain number `num` to `this`


  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num); // Possible sign change

    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    } // Add without checks


    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num; // Carry

    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;

      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }

    this.length = Math.max(this.length, i + 1);
    return this;
  }; // Subtract plain number `num` from `this`


  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;
    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;

    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip(); // Subtraction overflow

    assert(carry === -1);
    carry = 0;

    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;
    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;
    var a = this.clone();
    var b = num; // Normalize

    var bhi = b.words[b.length - 1] | 0;

    var bhiBits = this._countBits(bhi);

    shift = 26 - bhiBits;

    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    } // Initialize quotient


    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);

    if (diff.negative === 0) {
      a = diff;

      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)

      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj--;
        a.negative = 0;

        a._ishlnsubmul(b, 1, j);

        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }

      if (q) {
        q.words[j] = qj;
      }
    }

    if (q) {
      q.strip();
    }

    a.strip(); // Denormalize

    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested


  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;

    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    } // Both numbers are positive at this point
    // Strip both numbers to approximate shift value


    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    } // Very short reduction


    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  }; // Find `this` / `num`


  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  }; // Find `this` % `num`


  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  }; // Find Round(`this` / `num`)


  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num); // Fast case - exact division

    if (dm.mod.isZero()) return dm.div;
    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half); // Round down

    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;
    var acc = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  }; // In-place division by number


  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);
    var carry = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    } // A * x + B * y = x


    var A = new BN(1);
    var B = new BN(0); // C * x + D * y = y

    var C = new BN(0);
    var D = new BN(1);
    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        ;
      }

      if (i > 0) {
        x.iushrn(i);

        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        ;
      }

      if (j > 0) {
        y.iushrn(j);

        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  }; // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed


  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);
    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        ;
      }

      if (i > 0) {
        a.iushrn(i);

        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        ;
      }

      if (j > 0) {
        b.iushrn(j);

        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;

    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();
    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0; // Remove common factor of two

    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }

      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);

      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  }; // Invert number in the field F(num)


  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  }; // And first word and num


  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  }; // Increment at the bit position in-line


  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) {
      this._expand(s + 1);

      this.words[s] |= q;
      return this;
    } // Add bit and propagate, if needed


    var carry = q;

    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;
    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;
    this.strip();
    var res;

    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');
      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }

    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`


  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;
    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Unsigned comparison


  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;
    var res = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;
      if (a === b) continue;

      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }

      break;
    }

    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  }; //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //


  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');

    this.red._verify1(this);

    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');

    this.red._verify1(this);

    return this.red.isqr(this);
  }; // Square root over p


  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');

    this.red._verify1(this);

    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');

    this.red._verify1(this);

    return this.red.invm(this);
  }; // Return negative clone of `this` % `red modulo`


  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');

    this.red._verify1(this);

    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');

    this.red._verify1(this);

    return this.red.pow(this, num);
  }; // Prime numbers with efficient reduction


  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  }; // Pseudo-Mersenne prime

  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);
    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }

  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;
    var outLen = Math.min(input.length, 9);

    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }

    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    } // Shift by 9 limbs


    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }

    prev >>>= 22;
    input.words[i - 10] = prev;

    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

    var lo = 0;

    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    } // Fast length reduction


    if (num.words[num.length - 1] === 0) {
      num.length--;

      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }

    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }

  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }

  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }

  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;

    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;
      num.words[i] = lo;
      carry = hi;
    }

    if (carry !== 0) {
      num.words[num.length++] = carry;
    }

    return num;
  }; // Exported mostly for testing purposes, use plain name instead


  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];
    var prime;

    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }

    primes[name] = prime;
    return prime;
  }; //
  // Base reduction engine
  //


  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);

      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);

    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);

    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);

    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();
    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1); // Fast case

    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)


    var q = this.m.subn(1);
    var s = 0;

    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }

    assert(!q.isZero());
    var one = new BN(1).toRed(this);
    var nOne = one.redNeg(); // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.

    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;

    while (t.cmp(one) !== 0) {
      var tmp = t;

      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }

      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));
      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);

    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();
    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;

    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;

    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];

      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;

        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }

      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  }; //
  // Montgomery method engine
  //


  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);
    this.shift = this.m.bitLength();

    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);
    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }

  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/***/ }),

/***/ 8059:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var r;

module.exports = function rand(len) {
  if (!r) r = new Rand(null);
  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}

module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
}; // Emulate crypto API using randy


Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes) return this.rand.getBytes(n);
  var res = new Uint8Array(n);

  for (var i = 0; i < res.length; i++) {
    res[i] = this.rand.getByte();
  }

  return res;
};

if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    }; // Safari's WebWorkers do not have `crypto`

  } else if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(3864);

    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {}
}

/***/ }),

/***/ 338:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(9236);
exports.Cipher = __webpack_require__(7379);
exports.DES = __webpack_require__(3709);
exports.CBC = __webpack_require__(2472);
exports.EDE = __webpack_require__(70);

/***/ }),

/***/ 2472:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(8118);

var inherits = __webpack_require__(22);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');
  this.iv = new Array(8);

  for (var i = 0; i < this.iv.length; i++) {
    this.iv[i] = iv[i];
  }
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);

    this._cbcInit();
  }

  inherits(CBC, Base);
  var keys = Object.keys(proto);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;
  var iv = state.iv;

  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++) {
      iv[i] ^= inp[inOff + i];
    }

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = out[outOff + i];
    }
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      out[outOff + i] ^= iv[i];
    }

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = inp[inOff + i];
    }
  }
};

/***/ }),

/***/ 7379:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(8118);

function Cipher(options) {
  this.options = options;
  this.type = this.options.type;
  this.blockSize = 8;

  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
  this.padding = options.padding !== false;
}

module.exports = Cipher;

Cipher.prototype._init = function _init() {// Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0) return [];
  if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);

  for (var i = 0; i < min; i++) {
    this.buffer[this.bufferOff + i] = data[off + i];
  }

  this.bufferOff += min; // Shift next

  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);

  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;
  var count = (this.bufferOff + data.length) / this.blockSize | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);
    if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
  } // Write blocks


  var max = data.length - (data.length - inputOff) % this.blockSize;

  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);

    outputOff += this.blockSize;
  } // Queue rest


  for (; inputOff < data.length; inputOff++, this.bufferOff++) {
    this.buffer[this.bufferOff] = data[inputOff];
  }

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;
  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize); // TODO(indutny): optimize it, this is far from optimal

  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  } // Buffer rest of the input


  inputOff += this._buffer(data, inputOff);
  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer) first = this.update(buffer);
  var last;
  if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();
  if (first) return first.concat(last);else return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0) return false;

  while (off < buffer.length) {
    buffer[off++] = 0;
  }

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff)) return [];
  var out = new Array(this.blockSize);

  this._update(this.buffer, 0, out, 0);

  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);

  this._flushBuffer(out, 0);

  return this._unpad(out);
};

/***/ }),

/***/ 3709:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(8118);

var inherits = __webpack_require__(22);

var utils = __webpack_require__(9236);

var Cipher = __webpack_require__(7379);

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);
  var state = new DESState();
  this._desState = state;
  this.deriveKeys(state, options.key);
}

inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);
  assert.equal(key.length, this.blockSize, 'Invalid key length');
  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);
  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];

  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;
  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4); // Initial Permutation

  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];
  if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];
  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  if (this.padding === false) {
    return false;
  }

  var value = buffer.length - off;

  for (var i = off; i < buffer.length; i++) {
    buffer[i] = value;
  }

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  if (this.padding === false) {
    return buffer;
  }

  var pad = buffer[buffer.length - 1];

  for (var i = buffer.length - pad; i < buffer.length; i++) {
    assert.equal(buffer[i], pad);
  }

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart; // Apply f() x16 times

  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1]; // f(r, k)

    utils.expand(r, state.tmp, 0);
    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);
    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  } // Reverse Initial Permutation


  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart; // Apply f() x16 times

  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1]; // f(r, k)

    utils.expand(l, state.tmp, 0);
    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);
    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  } // Reverse Initial Permutation


  utils.rip(l, r, out, off);
};

/***/ }),

/***/ 70:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(8118);

var inherits = __webpack_require__(22);

var Cipher = __webpack_require__(7379);

var DES = __webpack_require__(3709);

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');
  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [DES.create({
      type: 'encrypt',
      key: k1
    }), DES.create({
      type: 'decrypt',
      key: k2
    }), DES.create({
      type: 'encrypt',
      key: k3
    })];
  } else {
    this.ciphers = [DES.create({
      type: 'decrypt',
      key: k3
    }), DES.create({
      type: 'encrypt',
      key: k2
    }), DES.create({
      type: 'decrypt',
      key: k1
    })];
  }
}

function EDE(options) {
  Cipher.call(this, options);
  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}

inherits(EDE, Cipher);
module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);

  state.ciphers[1]._update(out, outOff, out, outOff);

  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

/***/ }),

/***/ 9236:
/***/ (function(__unused_webpack_module, exports) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = value >>> 16 & 0xff;
  bytes[2 + off] = value >>> 8 & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
    }

    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0; // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28

  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >> j + i & 1;
    }
  }

  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= inR >> j + i & 1;
  } // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60


  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inR >> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inL >> j + i & 1;
    }
  }

  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= inL >> j + i & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
};

var pc2table = [// inL => outL
14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, // inR => outR
15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;
  var len = pc2table.length >>> 1;

  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> pc2table[i] & 0x1;
  }

  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= inR >>> pc2table[i] & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;
  outL = (r & 1) << 5 | r >>> 27;

  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }

  for (var i = 11; i >= 3; i -= 4) {
    outR |= r >>> i & 0x3f;
    outR <<= 6;
  }

  outR |= (r & 0x1f) << 1 | r >>> 31;
  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

exports.substitute = function substitute(inL, inR) {
  var out = 0;

  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = sTable[i * 0x40 + b];
    out <<= 4;
    out |= sb;
  }

  for (var i = 0; i < 4; i++) {
    var b = inR >>> 18 - i * 6 & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];
    out <<= 4;
    out |= sb;
  }

  return out >>> 0;
};

var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

exports.permute = function permute(num) {
  var out = 0;

  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= num >>> permuteTable[i] & 0x1;
  }

  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);

  while (str.length < size) {
    str = '0' + str;
  }

  var out = [];

  for (var i = 0; i < size; i += group) {
    out.push(str.slice(i, i + group));
  }

  return out.join(' ');
};

/***/ }),

/***/ 3766:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;
elliptic.utils = __webpack_require__(5949);
elliptic.rand = __webpack_require__(8059);
elliptic.curve = __webpack_require__(3955);
elliptic.curves = __webpack_require__(4309); // Protocols

elliptic.ec = __webpack_require__(8535);
elliptic.eddsa = __webpack_require__(9476);

/***/ }),

/***/ 3778:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(4230);

var utils = __webpack_require__(5949);

var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves

  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red); // Curve configuration, optional

  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick

  var adjustCount = this.n && this.p.div(this.n);

  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}

module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);

  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3; // Translate into more windowed form

  var repr = [];

  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;

    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }

    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);

  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }

    a = a.add(b);
  }

  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4; // Precompute window

  var nafPoints = p._getNAFPoints(w);

  w = nafPoints.wnd;
  var wnd = nafPoints.points; // Get NAF form

  var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index

  var acc = this.jpoint(null, null, null);

  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;
    var z = naf[i];
    assert(z !== 0);

    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }

  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3; // Fill all arrays

  var max = 0;

  for (var i = 0; i < len; i++) {
    var p = points[i];

    var nafPoints = p._getNAFPoints(defW);

    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  } // Comb small window NAFs


  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;

    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a],
    /* 1 */
    null,
    /* 3 */
    null,
    /* 5 */
    points[b]
    /* 7 */
    ]; // Try to avoid Projective points, if possible

    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3,
    /* -1 -1 */
    -1,
    /* -1 0 */
    -5,
    /* -1 1 */
    -7,
    /* 0 -1 */
    0,
    /* 0 0 */
    7,
    /* 0 1 */
    5,
    /* 1 -1 */
    1,
    /* 1 0 */
    3
    /* 1 1 */
    ];
    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);

    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;

  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;

      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }

      if (!zero) break;
      k++;
      i--;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  } // Zeroify references


  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }

  if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function
  /*other*/
eq() {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);
  var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }

  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);
  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;
  var doubles = this.precomputed.doubles;
  if (!doubles) return false;
  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;

  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }

    doubles.push(acc);
  }

  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();

  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }

  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;

  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }

  return r;
};

/***/ }),

/***/ 1991:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5949);

var BN = __webpack_require__(4230);

var inherits = __webpack_require__(22);

var Base = __webpack_require__(3778);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;
  Base.call(this, 'edwards', conf);
  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);
  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}

inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
}; // Just for compatibility with Short curve


EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
  if (x.fromRed().isOdd() !== odd) x = x.redNeg();
  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

  point.normalize();
  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');

  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one; // Use extended coordinates

    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}

inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S
  // A = X1^2
  var a = this.x.redSqr(); // B = Y1^2

  var b = this.y.redSqr(); // C = 2 * Z1^2

  var c = this.z.redSqr();
  c = c.redIAdd(c); // D = a * A

  var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

  var g = d.redAdd(b); // F = G - C

  var f = g.redSub(c); // H = D - B

  var h = d.redSub(b); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S
  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

  var c = this.x.redSqr(); // D = Y1^2

  var d = this.y.redSqr();
  var nx;
  var ny;
  var nz;

  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c); // F = E + D


    var f = e.redAdd(d);

    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr(); // J = F - 2 * H

      var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

      nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F * J

      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d); // H = (c * Z1)^2

    var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


    var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

    nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

    ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

    nz = e.redMul(j);
  }

  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this; // Double in extended coordinates

  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M
  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

  var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

  var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

  var e = b.redSub(a); // F = D - C

  var f = d.redSub(c); // G = D + C

  var g = d.redAdd(c); // H = B + A

  var h = b.redAdd(a); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S
  // A = Z1 * Z2
  var a = this.z.redMul(p.z); // B = A^2

  var b = a.redSqr(); // C = X1 * X2

  var c = this.x.redMul(p.x); // D = Y1 * Y2

  var d = this.y.redMul(p.y); // E = d * C * D

  var e = this.curve.d.redMul(c).redMul(d); // F = B - E

  var f = b.redSub(e); // G = B + E

  var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;

  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

    nz = this.curve._mulC(f).redMul(g);
  }

  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;
  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne) return this; // Normalize coordinates

  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
}; // Compatibility with BaseCurve


Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

/***/ }),

/***/ 3955:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var curve = exports;
curve.base = __webpack_require__(3778);
curve.short = __webpack_require__(993);
curve.mont = __webpack_require__(5650);
curve.edwards = __webpack_require__(1991);

/***/ }),

/***/ 5650:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(4230);

var inherits = __webpack_require__(22);

var Base = __webpack_require__(3778);

var utils = __webpack_require__(5949);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);
  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red); // Note: this implementation is according to the original paper
  // by P. Montgomery, NOT the one by D. J. Bernstein.

  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}

inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();
  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');

  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}

inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  var bytes = utils.toArray(bytes, enc); // TODO Curve448
  // Montgomery curve points must be represented in the compressed format
  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B

  if (bytes.length === 33 && bytes[0] === 0x40) bytes = bytes.slice(1, 33).reverse(); // point must be little-endian

  if (bytes.length !== 32) throw new Error('Unknown point compression format');
  return this.point(bytes, 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {// No-op
};

Point.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength(); // Note: the output should always be little-endian
  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B

  if (compact) {
    return [0x40].concat(this.getX().toArray('le', len));
  } else {
    return this.getX().toArray('be', len);
  }
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A
  // A = X1 + Z1
  var a = this.x.redAdd(this.z); // AA = A^2

  var aa = a.redSqr(); // B = X1 - Z1

  var b = this.x.redSub(this.z); // BB = B^2

  var bb = b.redSqr(); // C = AA - BB

  var c = aa.redSub(bb); // X3 = AA * BB

  var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A
  // A = X2 + Z2
  var a = this.x.redAdd(this.z); // B = X2 - Z2

  var b = this.x.redSub(this.z); // C = X3 + Z3

  var c = p.x.redAdd(p.z); // D = X3 - Z3

  var d = p.x.redSub(p.z); // DA = D * A

  var da = d.redMul(a); // CB = C * B

  var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

  var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q

  var b = this.curve.point(null, null); // (N / 2) * Q

  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

      a = a.dbl();
    }
  }

  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();
  return this.x.fromRed();
};

/***/ }),

/***/ 993:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5949);

var BN = __webpack_require__(4230);

var inherits = __webpack_require__(22);

var Base = __webpack_require__(3778);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);
  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}

inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

  var beta;
  var lambda;

  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p); // Choose the smallest beta


    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }

  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);

    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  } // Get basis vectors, used for balanced length-two representation


  var basis;

  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt

  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

  var a0;
  var b0; // First vector

  var a1;
  var b1; // Second vector

  var a2;
  var b2;
  var prevR;
  var i = 0;
  var r;
  var x;

  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }

    prevR = r;
    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }

  a2 = r.neg();
  b2 = x;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());

  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  } // Normalize signs


  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }

  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{
    a: a1,
    b: b1
  }, {
    a: a2,
    b: b2
  }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];
  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b); // Calculate answer

  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return {
    k1: k1,
    k2: k2
  };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;
  var x = point.x;
  var y = point.y;
  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;

  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);

    var p = points[i];

    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }

    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }

  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }

  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');

  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16); // Force redgomery representation when loading from JSON

    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }

    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}

inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;
  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

  if (pre) {
    var curve = this.curve;

    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };

    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }

  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this; // P + P = 2P

  if (this.eq(p)) return this.dbl(); // P + (-P) = O

  if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this; // 2P = O

  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
  var a = this.curve.a;
  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;
  var res = this.curve.point(this.x, this.y.redNeg());

  if (_precompute && this.precomputed) {
    var pre = this.precomputed;

    var negate = function negate(p) {
      return p.neg();
    };

    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }

  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');

  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }

  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}

inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p; // P + O = P

  if (p.isInfinity()) return this; // 12M + 4S + 7A

  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ(); // P + O = P

  if (p.isInfinity()) return this; // 8M + 3S + 7A

  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;

    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }

    return r;
  } // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A


  var a = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr(); // Reuse results

  var jyd = jy.redAdd(jy);

  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;
  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a; a = 0

    var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

    var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = B^2

    var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d); // E = 3 * A

    var e = a.redAdd(a).redIAdd(a); // F = E^2

    var f = e.redSqr(); // 8 * C

    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8); // X3 = F - 2 * D

    nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

    ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a

    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

    var t = m.redSqr().redISub(s).redISub(s); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S
    // delta = Z1^2
    var delta = this.z.redSqr(); // gamma = Y1^2

    var gamma = this.y.redSqr(); // beta = X1 * gamma

    var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a; // 4M + 6S + 10A

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...
  // XX = X1^2

  var xx = this.x.redSqr(); // YY = Y1^2

  var yy = this.y.redSqr(); // ZZ = Z1^2

  var zz = this.z.redSqr(); // YYYY = YY^2

  var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

  var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

  var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm); // EE = E^2

  var ee = e.redSqr(); // T = 16*YYYY

  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);
  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());
  if (this === p) return true; // x1 * z2^2 == x2 * z1^2

  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

/***/ }),

/***/ 4309:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(5870);

var curve = __webpack_require__(3955);

var utils = __webpack_require__(5949);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short') this.curve = new curve.short(options);else if (options.type === 'edwards') this.curve = new curve.edwards(options);else if (options.type === 'mont') this.curve = new curve.mont(options);else throw new Error('Unknown curve type.');
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;
  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, n*G != O');
}

curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
});
defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
});
defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
});
defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
});
defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
}); // https://tools.ietf.org/html/rfc7748#section-4.1

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  cofactor: '8',
  hash: hash.sha256,
  gRed: false,
  g: ['9']
});
defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  cofactor: '8',
  hash: hash.sha256,
  gRed: false,
  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
  '6666666666666666666666666666666666666666666666666666666666666658']
}); // https://tools.ietf.org/html/rfc5639#section-3.4

defineCurve('brainpoolP256r1', {
  type: 'short',
  prime: null,
  p: 'A9FB57DB A1EEA9BC 3E660A90 9D838D72 6E3BF623 D5262028 2013481D 1F6E5377',
  a: '7D5A0975 FC2C3057 EEF67530 417AFFE7 FB8055C1 26DC5C6C E94A4B44 F330B5D9',
  b: '26DC5C6C E94A4B44 F330B5D9 BBD77CBF 95841629 5CF7E1CE 6BCCDC18 FF8C07B6',
  n: 'A9FB57DB A1EEA9BC 3E660A90 9D838D71 8C397AA3 B561A6F7 901E0E82 974856A7',
  hash: hash.sha256,
  // or 384, or 512
  gRed: false,
  g: ['8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262', '547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997']
}); // https://tools.ietf.org/html/rfc5639#section-3.6

defineCurve('brainpoolP384r1', {
  type: 'short',
  prime: null,
  p: '8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B4 12B1DA19 7FB71123' + 'ACD3A729 901D1A71 87470013 3107EC53',
  a: '7BC382C6 3D8C150C 3C72080A CE05AFA0 C2BEA28E 4FB22787 139165EF BA91F90F' + '8AA5814A 503AD4EB 04A8C7DD 22CE2826',
  b: '04A8C7DD 22CE2826 8B39B554 16F0447C 2FB77DE1 07DCD2A6 2E880EA5 3EEB62D5' + '7CB43902 95DBC994 3AB78696 FA504C11',
  n: '8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B3 1F166E6C AC0425A7' + 'CF3AB6AF 6B7FC310 3B883202 E9046565',
  hash: hash.sha384,
  // or 512
  gRed: false,
  g: ['1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10' + 'E8E826E03436D646AAEF87B2E247D4AF1E', '8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129' + '280E4646217791811142820341263C5315']
}); // https://tools.ietf.org/html/rfc5639#section-3.7

defineCurve('brainpoolP512r1', {
  type: 'short',
  prime: null,
  p: 'AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 70330871' + '7D4D9B00 9BC66842 AECDA12A E6A380E6 2881FF2F 2D82C685 28AA6056 583A48F3',
  a: '7830A331 8B603B89 E2327145 AC234CC5 94CBDD8D 3DF91610 A83441CA EA9863BC' + '2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A7 2BF2C7B9 E7C1AC4D 77FC94CA',
  b: '3DF91610 A83441CA EA9863BC 2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A7' + '2BF2C7B9 E7C1AC4D 77FC94CA DC083E67 984050B7 5EBAE5DD 2809BD63 8016F723',
  n: 'AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 70330870' + '553E5C41 4CA92619 41866119 7FAC1047 1DB1D381 085DDADD B5879682 9CA90069',
  hash: hash.sha512,
  gRed: false,
  g: ['81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D009' + '8EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822', '7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F81' + '11B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892']
}); // https://en.bitcoin.it/wiki/Secp256k1

var pre;

try {
  pre = __webpack_require__(4766);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,
  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [{
    a: '3086d221a7d46bcde86c90e49284eb15',
    b: '-e4437ed6010e88286f547fa90abfe4c3'
  }, {
    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    b: '3086d221a7d46bcde86c90e49284eb15'
  }],
  gRed: false,
  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
});

/***/ }),

/***/ 8535:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var BN = __webpack_require__(4230);

var HmacDRBG = __webpack_require__(146);

var utils = __webpack_require__(5949);

var curves = __webpack_require__(4309);

var rand = __webpack_require__(8059);

var assert = utils.assert;

var KeyPair = __webpack_require__(609);

var Signature = __webpack_require__(5982);

function EC(options) {
  if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);
    options = curves[options];
  } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


  if (options instanceof curves.PresetCurve) options = {
    curve: options
  };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g; // Point on curve

  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1); // Hash function for DRBG

  this.hash = options.hash || options.curve.hash;
}

module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {}; // Instantiate Hmac_DRBG

  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  }); // Key generation for curve25519 is simpler

  if (this.curve.type === 'mont') {
    var priv = new BN(drbg.generate(32));
    return this.keyFromPrivate(priv);
  }

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));

  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (_typeof(enc) === 'object') {
    options = enc;
    enc = null;
  }

  if (!options) options = {};
  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy

  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

  var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  }); // Number of bytes to generate

  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;
    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex'); // Perform primitive values validation

  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.getX().umod(this.n).cmp(r) === 0;
  } // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K


  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`

  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);
  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s; // A set LSB signifies that the y-coordinate is odd

  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)

  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;

    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }

  throw new Error('Unable to find valid recovery factor');
};

/***/ }),

/***/ 609:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(4230);

var utils = __webpack_require__(5949);

var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}

module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;
  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
}; // TODO: should not validate for X25519


KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();
  if (pub.isInfinity()) return {
    result: false,
    reason: 'Invalid public key'
  };
  if (!pub.validate()) return {
    result: false,
    reason: 'Public key is not a point'
  };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
    result: false,
    reason: 'Public key * N != O'
  };
  return {
    result: true,
    reason: null
  };
};

KeyPair.prototype.getPublic = function getPublic(enc, compact) {
  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
  if (!enc) return this.pub;
  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16); // For Curve25519/Curve448 we have a specific procedure.
  // TODO Curve448

  if (this.ec.curve.type === 'mont') {
    var one = this.ec.curve.one;
    var mask = one.ushln(255 - 3).sub(one).ushln(3);
    this.priv = this.priv.or(one.ushln(255 - 1));
    this.priv = this.priv.and(mask);
  } else // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }

    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  this.pub = this.ec.curve.decodePoint(key, enc);
}; // ECDH


KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
}; // ECDSA


KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

/***/ }),

/***/ 5982:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(4230);

var utils = __webpack_require__(5949);

var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;
  if (this._importDER(options, enc)) return;
  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}

module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];

  if (!(initial & 0x80)) {
    return initial;
  }

  var octetLen = initial & 0xf;
  var val = 0;

  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;

  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }

  if (i === 0) {
    return buf;
  }

  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();

  if (data[p.place++] !== 0x30) {
    return false;
  }

  var len = getLength(data, p);

  if (len + p.place !== data.length) {
    return false;
  }

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var slen = getLength(data, p);

  if (data.length !== slen + p.place) {
    return false;
  }

  var s = data.slice(p.place, slen + p.place);

  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }

  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;
  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }

  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);

  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }

  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray(); // Pad values

  if (r[0] & 0x80) r = [0].concat(r); // Pad values

  if (s[0] & 0x80) s = [0].concat(s);
  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }

  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

/***/ }),

/***/ 9476:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(5870);

var curves = __webpack_require__(4309);

var utils = __webpack_require__(5949);

var HmacDRBG = __webpack_require__(146);

var elliptic = __webpack_require__(3766);

var assert = utils.assert;
var parseBytes = utils.parseBytes;

var KeyPair = __webpack_require__(6408);

var Signature = __webpack_require__(5741);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');
  if (!(this instanceof EDDSA)) return new EDDSA(curve);
  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);
  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/

EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({
    R: R,
    S: S,
    Rencoded: Rencoded
  });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/


EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();

  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }

  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {}; // Instantiate Hmac_DRBG

  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.curve.n.toArray()
  });
  return this.keyFromSecret(drbg.generate(this.hash.outSize >> 3));
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature) return sig;
  return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/


EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);
  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

/***/ }),

/***/ 6408:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5949);

var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/

function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  if (params.hasOwnProperty('secret')) this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else {
    this._pubBytes = parseBytes(params.pub);

    if (this._pubBytes && this._pubBytes.length === 33 && this._pubBytes[0] === 0x40) {
      this._pubBytes = this._pubBytes.slice(1, 33);
    }

    if (this._pubBytes && this._pubBytes.length !== 32) throw new Error('Unknown point compression format');
  }
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(eddsa, {
    pub: pub
  });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair) return secret;
  return new KeyPair(eddsa, {
    secret: secret
  });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1; // https://tools.ietf.org/html/rfc8032#section-5.1.5

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;
  return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc, compact) {
  return utils.encode((compact ? [0x40] : []).concat(this.pubBytes()), enc);
};

module.exports = KeyPair;

/***/ }),

/***/ 5741:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var BN = __webpack_require__(4230);

var utils = __webpack_require__(5949);

var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/

function Signature(eddsa, sig) {
  this.eddsa = eddsa;
  if (_typeof(sig) !== 'object') sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');
  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof BN) this._S = sig.S;
  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

/***/ }),

/***/ 4766:
/***/ (function(module) {

module.exports = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

/***/ }),

/***/ 5949:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var utils = exports;

var BN = __webpack_require__(4230);

var minAssert = __webpack_require__(8118);

var minUtils = __webpack_require__(3715);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode; // Represent num in a w-NAF form

function getNAF(num, w) {
  var naf = [];
  var ws = 1 << w + 1;
  var k = num.clone();

  while (k.cmpn(1) >= 0) {
    var z;

    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf.push(z); // Optimization, shift by word if possible

    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;

    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }

    k.iushrn(shift);
  }

  return naf;
}

utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

function getJSF(k1, k2) {
  var jsf = [[], []];
  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;

  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1;

    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }

    jsf[0].push(u1);
    var u2;

    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = k2.andln(7) + d2 & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }

    jsf[1].push(u2); // Second phase

    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}

utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;

  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
  };
}

utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}

utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}

utils.intFromLE = intFromLE;

/***/ }),

/***/ 5870:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var hash = exports;
hash.utils = __webpack_require__(6483);
hash.common = __webpack_require__(7259);
hash.sha = __webpack_require__(9481);
hash.ripemd = __webpack_require__(1782);
hash.hmac = __webpack_require__(8814); // Proxy hash functions to the main object

hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

/***/ }),

/***/ 7259:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var assert = __webpack_require__(8118);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';
  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}

exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length; // Enough data, try updating

  if (this.pending.length >= this._delta8) {
    msg = this.pending; // Process pending data in blocks

    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;
    msg = utils.join32(msg, 0, msg.length - r, this.endian);

    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);
  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;

  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length


  len <<= 3;

  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

/***/ }),

/***/ 8814:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var assert = __webpack_require__(8118);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}

module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize); // Add padding to key

  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }

  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }

  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

/***/ }),

/***/ 1782:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var common = __webpack_require__(7259);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();
  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}

utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;

  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }

  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

/***/ }),

/***/ 9481:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(2242);
exports.sha224 = __webpack_require__(7355);
exports.sha256 = __webpack_require__(2629);
exports.sha384 = __webpack_require__(9140);
exports.sha512 = __webpack_require__(6718);

/***/ }),

/***/ 2242:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var common = __webpack_require__(7259);

var shaCommon = __webpack_require__(5984);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();
  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ 7355:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var SHA256 = __webpack_require__(2629);

function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();
  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}

utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

/***/ }),

/***/ 2629:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var common = __webpack_require__(7259);

var shaCommon = __webpack_require__(5984);

var assert = __webpack_require__(8118);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function SHA256() {
  if (!(this instanceof SHA256)) return new SHA256();
  BlockHash.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}

utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];
  assert(this.k.length === W.length);

  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ 9140:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var SHA512 = __webpack_require__(6718);

function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();
  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}

utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

/***/ }),

/***/ 6718:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var common = __webpack_require__(7259);

var assert = __webpack_require__(8118);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

function SHA512() {
  if (!(this instanceof SHA512)) return new SHA512();
  BlockHash.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}

utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W; // 32 x 32bit words

  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2

    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7

    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15

    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16

    var c3_lo = W[i - 31];
    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;
  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];
  assert(this.k.length === W.length);

  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];
    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34

  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34

  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61

  var c2_hi = shr64_hi(xh, xl, 6);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61

  var c2_lo = shr64_lo(xh, xl, 6);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

/***/ }),

/***/ 5984:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(6483);

var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
}

exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}

exports.ch32 = ch32;

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}

exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}

exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}

exports.g1_256 = g1_256;

/***/ }),

/***/ 6483:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(8118);

var inherits = __webpack_require__(22);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }

  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }

  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];

  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;

      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);

        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = c >> 6 | 192;
          res[p++] = c & 63 | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = c >> 18 | 240;
          res[p++] = c >> 12 & 63 | 128;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        } else {
          res[p++] = c >> 12 | 224;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }

  return res;
}

exports.toArray = toArray;

function toHex(msg) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }

  return res;
}

exports.toHex = toHex;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}

exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }

  return res;
}

exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}

exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}

exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);

  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }

  return res;
}

exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);

  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];

    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }

  return res;
}

exports.split32 = split32;

function rotr32(w, b) {
  return w >>> b | w << 32 - b;
}

exports.rotr32 = rotr32;

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}

exports.rotl32 = rotl32;

function sum32(a, b) {
  return a + b >>> 0;
}

exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}

exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}

exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}

exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}

exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}

exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}

exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}

exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}

exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;
  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}

exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;
  return lo >>> 0;
}

exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}

exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}

exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

exports.shr64_lo = shr64_lo;

/***/ }),

/***/ 146:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(5870);

var utils = __webpack_require__(3715);

var assert = __webpack_require__(8118);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._init(entropy, nonce, pers);
}

module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);

  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);

  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);

  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;
  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));

  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  } // Optional additional data


  if (add) {
    add = utils.toArray(add, addEnc || 'hex');

    this._update(add);
  }

  var temp = [];

  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);

  this._update(add);

  this._reseed++;
  return utils.encode(res, enc);
};

/***/ }),

/***/ 22:
/***/ (function(module) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

/***/ }),

/***/ 8118:
/***/ (function(module) {

module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

/***/ }),

/***/ 3715:
/***/ (function(__unused_webpack_module, exports) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];

  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }

    return res;
  }

  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0) msg = '0' + msg;

    for (var i = 0; i < msg.length; i += 2) {
      res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi) res.push(hi, lo);else res.push(lo);
    }
  }

  return res;
}

utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}

utils.zero2 = zero2;

function toHex(msg) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }

  return res;
}

utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex') return toHex(arr);else return arr;
};

/***/ }),

/***/ 5774:
/***/ (function(__unused_webpack_module, exports) {

"use strict";
/*!
 * MIT License
 * 
 * Copyright (c) 2017-2022 Peculiar Ventures, LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ARRAY_BUFFER_NAME = "[object ArrayBuffer]";

var BufferSourceConverter = /*#__PURE__*/function () {
  function BufferSourceConverter() {
    _classCallCheck(this, BufferSourceConverter);
  }

  _createClass(BufferSourceConverter, null, [{
    key: "isArrayBuffer",
    value: function isArrayBuffer(data) {
      return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;
    }
  }, {
    key: "toArrayBuffer",
    value: function toArrayBuffer(data) {
      if (this.isArrayBuffer(data)) {
        return data;
      }

      if (data.byteLength === data.buffer.byteLength) {
        return data.buffer;
      }

      if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
        return data.buffer;
      }

      return this.toUint8Array(data.buffer).slice(data.byteOffset, data.byteOffset + data.byteLength).buffer;
    }
  }, {
    key: "toUint8Array",
    value: function toUint8Array(data) {
      return this.toView(data, Uint8Array);
    }
  }, {
    key: "toView",
    value: function toView(data, type) {
      if (data.constructor === type) {
        return data;
      }

      if (this.isArrayBuffer(data)) {
        return new type(data);
      }

      if (this.isArrayBufferView(data)) {
        return new type(data.buffer, data.byteOffset, data.byteLength);
      }

      throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
    }
  }, {
    key: "isBufferSource",
    value: function isBufferSource(data) {
      return this.isArrayBufferView(data) || this.isArrayBuffer(data);
    }
  }, {
    key: "isArrayBufferView",
    value: function isArrayBufferView(data) {
      return ArrayBuffer.isView(data) || data && this.isArrayBuffer(data.buffer);
    }
  }, {
    key: "isEqual",
    value: function isEqual(a, b) {
      var aView = BufferSourceConverter.toUint8Array(a);
      var bView = BufferSourceConverter.toUint8Array(b);

      if (aView.length !== bView.byteLength) {
        return false;
      }

      for (var i = 0; i < aView.length; i++) {
        if (aView[i] !== bView[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "concat",
    value: function concat() {
      var buffers;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {
        buffers = args[0];
      } else if (Array.isArray(args[0]) && args[1] instanceof Function) {
        buffers = args[0];
      } else {
        if (args[args.length - 1] instanceof Function) {
          buffers = args.slice(0, args.length - 1);
        } else {
          buffers = args;
        }
      }

      var size = 0;

      var _iterator = _createForOfIteratorHelper(buffers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var buffer = _step.value;
          size += buffer.byteLength;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var res = new Uint8Array(size);
      var offset = 0;

      var _iterator2 = _createForOfIteratorHelper(buffers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _buffer = _step2.value;
          var view = this.toUint8Array(_buffer);
          res.set(view, offset);
          offset += view.length;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (args[args.length - 1] instanceof Function) {
        return this.toView(res, args[args.length - 1]);
      }

      return res.buffer;
    }
  }]);

  return BufferSourceConverter;
}();

var STRING_TYPE = "string";
var HEX_REGEX = /^[0-9a-f]+$/i;
var BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
var BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;

var Utf8Converter = /*#__PURE__*/function () {
  function Utf8Converter() {
    _classCallCheck(this, Utf8Converter);
  }

  _createClass(Utf8Converter, null, [{
    key: "fromString",
    value: function fromString(text) {
      var s = unescape(encodeURIComponent(text));
      var uintArray = new Uint8Array(s.length);

      for (var i = 0; i < s.length; i++) {
        uintArray[i] = s.charCodeAt(i);
      }

      return uintArray.buffer;
    }
  }, {
    key: "toString",
    value: function toString(buffer) {
      var buf = BufferSourceConverter.toUint8Array(buffer);
      var encodedString = "";

      for (var i = 0; i < buf.length; i++) {
        encodedString += String.fromCharCode(buf[i]);
      }

      var decodedString = decodeURIComponent(escape(encodedString));
      return decodedString;
    }
  }]);

  return Utf8Converter;
}();

var Utf16Converter = /*#__PURE__*/function () {
  function Utf16Converter() {
    _classCallCheck(this, Utf16Converter);
  }

  _createClass(Utf16Converter, null, [{
    key: "toString",
    value: function toString(buffer) {
      var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);
      var dataView = new DataView(arrayBuffer);
      var res = "";

      for (var i = 0; i < arrayBuffer.byteLength; i += 2) {
        var code = dataView.getUint16(i, littleEndian);
        res += String.fromCharCode(code);
      }

      return res;
    }
  }, {
    key: "fromString",
    value: function fromString(text) {
      var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var res = new ArrayBuffer(text.length * 2);
      var dataView = new DataView(res);

      for (var i = 0; i < text.length; i++) {
        dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);
      }

      return res;
    }
  }]);

  return Utf16Converter;
}();

var Convert = /*#__PURE__*/function () {
  function Convert() {
    _classCallCheck(this, Convert);
  }

  _createClass(Convert, null, [{
    key: "isHex",
    value: function isHex(data) {
      return _typeof(data) === STRING_TYPE && HEX_REGEX.test(data);
    }
  }, {
    key: "isBase64",
    value: function isBase64(data) {
      return _typeof(data) === STRING_TYPE && BASE64_REGEX.test(data);
    }
  }, {
    key: "isBase64Url",
    value: function isBase64Url(data) {
      return _typeof(data) === STRING_TYPE && BASE64URL_REGEX.test(data);
    }
  }, {
    key: "ToString",
    value: function ToString(buffer) {
      var enc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var buf = BufferSourceConverter.toUint8Array(buffer);

      switch (enc.toLowerCase()) {
        case "utf8":
          return this.ToUtf8String(buf);

        case "binary":
          return this.ToBinary(buf);

        case "hex":
          return this.ToHex(buf);

        case "base64":
          return this.ToBase64(buf);

        case "base64url":
          return this.ToBase64Url(buf);

        case "utf16le":
          return Utf16Converter.toString(buf, true);

        case "utf16":
        case "utf16be":
          return Utf16Converter.toString(buf);

        default:
          throw new Error("Unknown type of encoding '".concat(enc, "'"));
      }
    }
  }, {
    key: "FromString",
    value: function FromString(str) {
      var enc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";

      if (!str) {
        return new ArrayBuffer(0);
      }

      switch (enc.toLowerCase()) {
        case "utf8":
          return this.FromUtf8String(str);

        case "binary":
          return this.FromBinary(str);

        case "hex":
          return this.FromHex(str);

        case "base64":
          return this.FromBase64(str);

        case "base64url":
          return this.FromBase64Url(str);

        case "utf16le":
          return Utf16Converter.fromString(str, true);

        case "utf16":
        case "utf16be":
          return Utf16Converter.fromString(str);

        default:
          throw new Error("Unknown type of encoding '".concat(enc, "'"));
      }
    }
  }, {
    key: "ToBase64",
    value: function ToBase64(buffer) {
      var buf = BufferSourceConverter.toUint8Array(buffer);

      if (typeof btoa !== "undefined") {
        var binary = this.ToString(buf, "binary");
        return btoa(binary);
      } else {
        return Buffer.from(buf).toString("base64");
      }
    }
  }, {
    key: "FromBase64",
    value: function FromBase64(base64) {
      var formatted = this.formatString(base64);

      if (!formatted) {
        return new ArrayBuffer(0);
      }

      if (!Convert.isBase64(formatted)) {
        throw new TypeError("Argument 'base64Text' is not Base64 encoded");
      }

      if (typeof atob !== "undefined") {
        return this.FromBinary(atob(formatted));
      } else {
        return new Uint8Array(Buffer.from(formatted, "base64")).buffer;
      }
    }
  }, {
    key: "FromBase64Url",
    value: function FromBase64Url(base64url) {
      var formatted = this.formatString(base64url);

      if (!formatted) {
        return new ArrayBuffer(0);
      }

      if (!Convert.isBase64Url(formatted)) {
        throw new TypeError("Argument 'base64url' is not Base64Url encoded");
      }

      return this.FromBase64(this.Base64Padding(formatted.replace(/\-/g, "+").replace(/\_/g, "/")));
    }
  }, {
    key: "ToBase64Url",
    value: function ToBase64Url(data) {
      return this.ToBase64(data).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
    }
  }, {
    key: "FromUtf8String",
    value: function FromUtf8String(text) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Convert.DEFAULT_UTF8_ENCODING;

      switch (encoding) {
        case "ascii":
          return this.FromBinary(text);

        case "utf8":
          return Utf8Converter.fromString(text);

        case "utf16":
        case "utf16be":
          return Utf16Converter.fromString(text);

        case "utf16le":
        case "usc2":
          return Utf16Converter.fromString(text, true);

        default:
          throw new Error("Unknown type of encoding '".concat(encoding, "'"));
      }
    }
  }, {
    key: "ToUtf8String",
    value: function ToUtf8String(buffer) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Convert.DEFAULT_UTF8_ENCODING;

      switch (encoding) {
        case "ascii":
          return this.ToBinary(buffer);

        case "utf8":
          return Utf8Converter.toString(buffer);

        case "utf16":
        case "utf16be":
          return Utf16Converter.toString(buffer);

        case "utf16le":
        case "usc2":
          return Utf16Converter.toString(buffer, true);

        default:
          throw new Error("Unknown type of encoding '".concat(encoding, "'"));
      }
    }
  }, {
    key: "FromBinary",
    value: function FromBinary(text) {
      var stringLength = text.length;
      var resultView = new Uint8Array(stringLength);

      for (var i = 0; i < stringLength; i++) {
        resultView[i] = text.charCodeAt(i);
      }

      return resultView.buffer;
    }
  }, {
    key: "ToBinary",
    value: function ToBinary(buffer) {
      var buf = BufferSourceConverter.toUint8Array(buffer);
      var res = "";

      for (var i = 0; i < buf.length; i++) {
        res += String.fromCharCode(buf[i]);
      }

      return res;
    }
  }, {
    key: "ToHex",
    value: function ToHex(buffer) {
      var buf = BufferSourceConverter.toUint8Array(buffer);
      var result = "";
      var len = buf.length;

      for (var i = 0; i < len; i++) {
        var byte = buf[i];

        if (byte < 16) {
          result += "0";
        }

        result += byte.toString(16);
      }

      return result;
    }
  }, {
    key: "FromHex",
    value: function FromHex(hexString) {
      var formatted = this.formatString(hexString);

      if (!formatted) {
        return new ArrayBuffer(0);
      }

      if (!Convert.isHex(formatted)) {
        throw new TypeError("Argument 'hexString' is not HEX encoded");
      }

      if (formatted.length % 2) {
        formatted = "0".concat(formatted);
      }

      var res = new Uint8Array(formatted.length / 2);

      for (var i = 0; i < formatted.length; i = i + 2) {
        var c = formatted.slice(i, i + 2);
        res[i / 2] = parseInt(c, 16);
      }

      return res.buffer;
    }
  }, {
    key: "ToUtf16String",
    value: function ToUtf16String(buffer) {
      var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return Utf16Converter.toString(buffer, littleEndian);
    }
  }, {
    key: "FromUtf16String",
    value: function FromUtf16String(text) {
      var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return Utf16Converter.fromString(text, littleEndian);
    }
  }, {
    key: "Base64Padding",
    value: function Base64Padding(base64) {
      var padCount = 4 - base64.length % 4;

      if (padCount < 4) {
        for (var i = 0; i < padCount; i++) {
          base64 += "=";
        }
      }

      return base64;
    }
  }, {
    key: "formatString",
    value: function formatString(data) {
      return (data === null || data === void 0 ? void 0 : data.replace(/[\n\r\t ]/g, "")) || "";
    }
  }]);

  return Convert;
}();

Convert.DEFAULT_UTF8_ENCODING = "utf8";

function assign(target) {
  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    sources[_key2 - 1] = arguments[_key2];
  }

  var res = arguments[0];

  for (var i = 1; i < arguments.length; i++) {
    var obj = arguments[i];

    for (var prop in obj) {
      res[prop] = obj[prop];
    }
  }

  return res;
}

function combine() {
  for (var _len3 = arguments.length, buf = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    buf[_key3] = arguments[_key3];
  }

  var totalByteLength = buf.map(function (item) {
    return item.byteLength;
  }).reduce(function (prev, cur) {
    return prev + cur;
  });
  var res = new Uint8Array(totalByteLength);
  var currentPos = 0;
  buf.map(function (item) {
    return new Uint8Array(item);
  }).forEach(function (arr) {
    var _iterator3 = _createForOfIteratorHelper(arr),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var item2 = _step3.value;
        res[currentPos++] = item2;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  });
  return res.buffer;
}

function isEqual(bytes1, bytes2) {
  if (!(bytes1 && bytes2)) {
    return false;
  }

  if (bytes1.byteLength !== bytes2.byteLength) {
    return false;
  }

  var b1 = new Uint8Array(bytes1);
  var b2 = new Uint8Array(bytes2);

  for (var i = 0; i < bytes1.byteLength; i++) {
    if (b1[i] !== b2[i]) {
      return false;
    }
  }

  return true;
}

exports.BufferSourceConverter = BufferSourceConverter;
exports.Convert = Convert;
exports.assign = assign;
exports.combine = combine;
exports.isEqual = isEqual;

/***/ }),

/***/ 5688:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AesCbcProvider": function() { return /* binding */ AesCbcProvider; },
/* harmony export */   "AesCmacProvider": function() { return /* binding */ AesCmacProvider; },
/* harmony export */   "AesCtrProvider": function() { return /* binding */ AesCtrProvider; },
/* harmony export */   "AesEcbProvider": function() { return /* binding */ AesEcbProvider; },
/* harmony export */   "AesGcmProvider": function() { return /* binding */ AesGcmProvider; },
/* harmony export */   "AesKwProvider": function() { return /* binding */ AesKwProvider; },
/* harmony export */   "AesProvider": function() { return /* binding */ AesProvider; },
/* harmony export */   "AlgorithmError": function() { return /* binding */ AlgorithmError; },
/* harmony export */   "BufferSourceConverter": function() { return /* reexport safe */ pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter; },
/* harmony export */   "Crypto": function() { return /* binding */ Crypto; },
/* harmony export */   "CryptoError": function() { return /* binding */ CryptoError; },
/* harmony export */   "CryptoKey": function() { return /* binding */ CryptoKey; },
/* harmony export */   "DesProvider": function() { return /* binding */ DesProvider; },
/* harmony export */   "EcCurves": function() { return /* binding */ EcCurves; },
/* harmony export */   "EcUtils": function() { return /* binding */ EcUtils; },
/* harmony export */   "EcdhEsProvider": function() { return /* binding */ EcdhEsProvider; },
/* harmony export */   "EcdhProvider": function() { return /* binding */ EcdhProvider; },
/* harmony export */   "EcdsaProvider": function() { return /* binding */ EcdsaProvider; },
/* harmony export */   "EdDsaProvider": function() { return /* binding */ EdDsaProvider; },
/* harmony export */   "EllipticProvider": function() { return /* binding */ EllipticProvider; },
/* harmony export */   "HkdfProvider": function() { return /* binding */ HkdfProvider; },
/* harmony export */   "HmacProvider": function() { return /* binding */ HmacProvider; },
/* harmony export */   "JwkUtils": function() { return /* binding */ JwkUtils; },
/* harmony export */   "OperationError": function() { return /* binding */ OperationError; },
/* harmony export */   "Pbkdf2Provider": function() { return /* binding */ Pbkdf2Provider; },
/* harmony export */   "PemConverter": function() { return /* binding */ PemConverter; },
/* harmony export */   "ProviderCrypto": function() { return /* binding */ ProviderCrypto; },
/* harmony export */   "ProviderStorage": function() { return /* binding */ ProviderStorage; },
/* harmony export */   "RequiredPropertyError": function() { return /* binding */ RequiredPropertyError; },
/* harmony export */   "RsaOaepProvider": function() { return /* binding */ RsaOaepProvider; },
/* harmony export */   "RsaProvider": function() { return /* binding */ RsaProvider; },
/* harmony export */   "RsaPssProvider": function() { return /* binding */ RsaPssProvider; },
/* harmony export */   "RsaSsaProvider": function() { return /* binding */ RsaSsaProvider; },
/* harmony export */   "Shake128Provider": function() { return /* binding */ Shake128Provider; },
/* harmony export */   "Shake256Provider": function() { return /* binding */ Shake256Provider; },
/* harmony export */   "ShakeProvider": function() { return /* binding */ ShakeProvider; },
/* harmony export */   "SubtleCrypto": function() { return /* binding */ SubtleCrypto; },
/* harmony export */   "UnsupportedOperationError": function() { return /* binding */ UnsupportedOperationError; },
/* harmony export */   "asn1": function() { return /* binding */ index$1; },
/* harmony export */   "isJWK": function() { return /* binding */ isJWK; },
/* harmony export */   "json": function() { return /* binding */ index; }
/* harmony export */ });
/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5774);
/* harmony import */ var _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6541);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9894);
/* harmony import */ var _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4458);
/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1331);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/*!
 Copyright (c) Peculiar Ventures, LLC
*/







var CryptoError = /*#__PURE__*/function (_Error) {
  _inherits(CryptoError, _Error);

  var _super = _createSuper(CryptoError);

  function CryptoError() {
    _classCallCheck(this, CryptoError);

    return _super.apply(this, arguments);
  }

  return _createClass(CryptoError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var AlgorithmError = /*#__PURE__*/function (_CryptoError) {
  _inherits(AlgorithmError, _CryptoError);

  var _super2 = _createSuper(AlgorithmError);

  function AlgorithmError() {
    _classCallCheck(this, AlgorithmError);

    return _super2.apply(this, arguments);
  }

  return _createClass(AlgorithmError);
}(CryptoError);

var UnsupportedOperationError = /*#__PURE__*/function (_CryptoError2) {
  _inherits(UnsupportedOperationError, _CryptoError2);

  var _super3 = _createSuper(UnsupportedOperationError);

  function UnsupportedOperationError(methodName) {
    _classCallCheck(this, UnsupportedOperationError);

    return _super3.call(this, "Unsupported operation: ".concat(methodName ? "".concat(methodName) : ""));
  }

  return _createClass(UnsupportedOperationError);
}(CryptoError);

var OperationError = /*#__PURE__*/function (_CryptoError3) {
  _inherits(OperationError, _CryptoError3);

  var _super4 = _createSuper(OperationError);

  function OperationError() {
    _classCallCheck(this, OperationError);

    return _super4.apply(this, arguments);
  }

  return _createClass(OperationError);
}(CryptoError);

var RequiredPropertyError = /*#__PURE__*/function (_CryptoError4) {
  _inherits(RequiredPropertyError, _CryptoError4);

  var _super5 = _createSuper(RequiredPropertyError);

  function RequiredPropertyError(propName) {
    _classCallCheck(this, RequiredPropertyError);

    return _super5.call(this, "".concat(propName, ": Missing required property"));
  }

  return _createClass(RequiredPropertyError);
}(CryptoError);

var PemConverter = /*#__PURE__*/function () {
  function PemConverter() {
    _classCallCheck(this, PemConverter);
  }

  _createClass(PemConverter, null, [{
    key: "toArrayBuffer",
    value: function toArrayBuffer(pem) {
      var base64 = pem.replace(/-{5}(BEGIN|END) .*-{5}/g, "").replace("\r", "").replace("\n", "");
      return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64(base64);
    }
  }, {
    key: "toUint8Array",
    value: function toUint8Array(pem) {
      var bytes = this.toArrayBuffer(pem);
      return new Uint8Array(bytes);
    }
  }, {
    key: "fromBufferSource",
    value: function fromBufferSource(buffer, tag) {
      var base64 = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64(buffer);
      var sliced;
      var offset = 0;
      var rows = [];

      while (true) {
        sliced = base64.slice(offset, offset = offset + 64);

        if (sliced.length) {
          rows.push(sliced);

          if (sliced.length < 64) {
            break;
          }
        } else {
          break;
        }
      }

      var upperCaseTag = tag.toUpperCase();
      return "-----BEGIN ".concat(upperCaseTag, "-----\n").concat(rows.join("\n"), "\n-----END ").concat(upperCaseTag, "-----");
    }
  }, {
    key: "isPEM",
    value: function isPEM(data) {
      return /-----BEGIN .+-----[A-Za-z0-9+\/\+\=\s\n]+-----END .+-----/i.test(data);
    }
  }, {
    key: "getTagName",
    value: function getTagName(pem) {
      if (!this.isPEM(pem)) {
        throw new Error("Bad parameter. Incoming data is not right PEM");
      }

      var res = /-----BEGIN (.+)-----/.exec(pem);

      if (!res) {
        throw new Error("Cannot get tag from PEM");
      }

      return res[1];
    }
  }, {
    key: "hasTagName",
    value: function hasTagName(pem, tagName) {
      var tag = this.getTagName(pem);
      return tagName.toLowerCase() === tag.toLowerCase();
    }
  }, {
    key: "isCertificate",
    value: function isCertificate(pem) {
      return this.hasTagName(pem, "certificate");
    }
  }, {
    key: "isCertificateRequest",
    value: function isCertificateRequest(pem) {
      return this.hasTagName(pem, "certificate request");
    }
  }, {
    key: "isCRL",
    value: function isCRL(pem) {
      return this.hasTagName(pem, "x509 crl");
    }
  }, {
    key: "isPublicKey",
    value: function isPublicKey(pem) {
      return this.hasTagName(pem, "public key");
    }
  }]);

  return PemConverter;
}();

function isJWK(data) {
  return _typeof(data) === "object" && "kty" in data;
}

var ProviderCrypto = /*#__PURE__*/function () {
  function ProviderCrypto() {
    _classCallCheck(this, ProviderCrypto);
  }

  _createClass(ProviderCrypto, [{
    key: "digest",
    value: function () {
      var _digest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _len,
            args,
            _key,
            _args = arguments;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = _args[_key];
                }

                this.checkDigest.apply(this, args);
                return _context.abrupt("return", this.onDigest.apply(this, args));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function digest() {
        return _digest.apply(this, arguments);
      }

      return digest;
    }()
  }, {
    key: "checkDigest",
    value: function checkDigest(algorithm, data) {
      this.checkAlgorithmName(algorithm);
    }
  }, {
    key: "onDigest",
    value: function () {
      var _onDigest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(algorithm, data) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new UnsupportedOperationError("digest");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function onDigest(_x, _x2) {
        return _onDigest.apply(this, arguments);
      }

      return onDigest;
    }()
  }, {
    key: "generateKey",
    value: function () {
      var _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _len2,
            args,
            _key2,
            _args3 = arguments;

        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                for (_len2 = _args3.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = _args3[_key2];
                }

                this.checkGenerateKey.apply(this, args);
                return _context3.abrupt("return", this.onGenerateKey.apply(this, args));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function generateKey() {
        return _generateKey.apply(this, arguments);
      }

      return generateKey;
    }()
  }, {
    key: "checkGenerateKey",
    value: function checkGenerateKey(algorithm, extractable, keyUsages) {
      this.checkAlgorithmName(algorithm);
      this.checkGenerateKeyParams(algorithm);

      if (!(keyUsages && keyUsages.length)) {
        throw new TypeError("Usages cannot be empty when creating a key.");
      }

      var allowedUsages;

      if (Array.isArray(this.usages)) {
        allowedUsages = this.usages;
      } else {
        allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);
      }

      this.checkKeyUsages(keyUsages, allowedUsages);
    }
  }, {
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {}
  }, {
    key: "onGenerateKey",
    value: function () {
      var _onGenerateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(algorithm, extractable, keyUsages) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw new UnsupportedOperationError("generateKey");

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function onGenerateKey(_x3, _x4, _x5) {
        return _onGenerateKey.apply(this, arguments);
      }

      return onGenerateKey;
    }()
  }, {
    key: "sign",
    value: function () {
      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var _len3,
            args,
            _key3,
            _args5 = arguments;

        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                for (_len3 = _args5.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = _args5[_key3];
                }

                this.checkSign.apply(this, args);
                return _context5.abrupt("return", this.onSign.apply(this, args));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sign() {
        return _sign.apply(this, arguments);
      }

      return sign;
    }()
  }, {
    key: "checkSign",
    value: function checkSign(algorithm, key, data) {
      this.checkAlgorithmName(algorithm);
      this.checkAlgorithmParams(algorithm);
      this.checkCryptoKey(key, "sign");
    }
  }, {
    key: "onSign",
    value: function () {
      var _onSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(algorithm, key, data) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                throw new UnsupportedOperationError("sign");

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function onSign(_x6, _x7, _x8) {
        return _onSign.apply(this, arguments);
      }

      return onSign;
    }()
  }, {
    key: "verify",
    value: function () {
      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var _len4,
            args,
            _key4,
            _args7 = arguments;

        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                for (_len4 = _args7.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                  args[_key4] = _args7[_key4];
                }

                this.checkVerify.apply(this, args);
                return _context7.abrupt("return", this.onVerify.apply(this, args));

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function verify() {
        return _verify.apply(this, arguments);
      }

      return verify;
    }()
  }, {
    key: "checkVerify",
    value: function checkVerify(algorithm, key, signature, data) {
      this.checkAlgorithmName(algorithm);
      this.checkAlgorithmParams(algorithm);
      this.checkCryptoKey(key, "verify");
    }
  }, {
    key: "onVerify",
    value: function () {
      var _onVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(algorithm, key, signature, data) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                throw new UnsupportedOperationError("verify");

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function onVerify(_x9, _x10, _x11, _x12) {
        return _onVerify.apply(this, arguments);
      }

      return onVerify;
    }()
  }, {
    key: "encrypt",
    value: function () {
      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var _len5,
            args,
            _key5,
            _args9 = arguments;

        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                for (_len5 = _args9.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                  args[_key5] = _args9[_key5];
                }

                this.checkEncrypt.apply(this, args);
                return _context9.abrupt("return", this.onEncrypt.apply(this, args));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function encrypt() {
        return _encrypt.apply(this, arguments);
      }

      return encrypt;
    }()
  }, {
    key: "checkEncrypt",
    value: function checkEncrypt(algorithm, key, data) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.checkAlgorithmName(algorithm);
      this.checkAlgorithmParams(algorithm);
      this.checkCryptoKey(key, options.keyUsage ? "encrypt" : void 0);
    }
  }, {
    key: "onEncrypt",
    value: function () {
      var _onEncrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(algorithm, key, data) {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                throw new UnsupportedOperationError("encrypt");

              case 1:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function onEncrypt(_x13, _x14, _x15) {
        return _onEncrypt.apply(this, arguments);
      }

      return onEncrypt;
    }()
  }, {
    key: "decrypt",
    value: function () {
      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var _len6,
            args,
            _key6,
            _args11 = arguments;

        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                for (_len6 = _args11.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                  args[_key6] = _args11[_key6];
                }

                this.checkDecrypt.apply(this, args);
                return _context11.abrupt("return", this.onDecrypt.apply(this, args));

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function decrypt() {
        return _decrypt.apply(this, arguments);
      }

      return decrypt;
    }()
  }, {
    key: "checkDecrypt",
    value: function checkDecrypt(algorithm, key, data) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.checkAlgorithmName(algorithm);
      this.checkAlgorithmParams(algorithm);
      this.checkCryptoKey(key, options.keyUsage ? "decrypt" : void 0);
    }
  }, {
    key: "onDecrypt",
    value: function () {
      var _onDecrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(algorithm, key, data) {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                throw new UnsupportedOperationError("decrypt");

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function onDecrypt(_x16, _x17, _x18) {
        return _onDecrypt.apply(this, arguments);
      }

      return onDecrypt;
    }()
  }, {
    key: "deriveBits",
    value: function () {
      var _deriveBits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        var _len7,
            args,
            _key7,
            _args13 = arguments;

        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                for (_len7 = _args13.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                  args[_key7] = _args13[_key7];
                }

                this.checkDeriveBits.apply(this, args);
                return _context13.abrupt("return", this.onDeriveBits.apply(this, args));

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function deriveBits() {
        return _deriveBits.apply(this, arguments);
      }

      return deriveBits;
    }()
  }, {
    key: "checkDeriveBits",
    value: function checkDeriveBits(algorithm, baseKey, length) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.checkAlgorithmName(algorithm);
      this.checkAlgorithmParams(algorithm);
      this.checkCryptoKey(baseKey, options.keyUsage ? "deriveBits" : void 0);

      if (length % 8 !== 0) {
        throw new OperationError("length: Is not multiple of 8");
      }
    }
  }, {
    key: "onDeriveBits",
    value: function () {
      var _onDeriveBits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(algorithm, baseKey, length) {
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                throw new UnsupportedOperationError("deriveBits");

              case 1:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function onDeriveBits(_x19, _x20, _x21) {
        return _onDeriveBits.apply(this, arguments);
      }

      return onDeriveBits;
    }()
  }, {
    key: "exportKey",
    value: function () {
      var _exportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        var _len8,
            args,
            _key8,
            _args15 = arguments;

        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                for (_len8 = _args15.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                  args[_key8] = _args15[_key8];
                }

                this.checkExportKey.apply(this, args);
                return _context15.abrupt("return", this.onExportKey.apply(this, args));

              case 3:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function exportKey() {
        return _exportKey.apply(this, arguments);
      }

      return exportKey;
    }()
  }, {
    key: "checkExportKey",
    value: function checkExportKey(format, key) {
      this.checkKeyFormat(format);
      this.checkCryptoKey(key);

      if (!key.extractable) {
        throw new CryptoError("key: Is not extractable");
      }
    }
  }, {
    key: "onExportKey",
    value: function () {
      var _onExportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(format, key) {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                throw new UnsupportedOperationError("exportKey");

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function onExportKey(_x22, _x23) {
        return _onExportKey.apply(this, arguments);
      }

      return onExportKey;
    }()
  }, {
    key: "importKey",
    value: function () {
      var _importKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
        var _len9,
            args,
            _key9,
            _args17 = arguments;

        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                for (_len9 = _args17.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                  args[_key9] = _args17[_key9];
                }

                this.checkImportKey.apply(this, args);
                return _context17.abrupt("return", this.onImportKey.apply(this, args));

              case 3:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function importKey() {
        return _importKey.apply(this, arguments);
      }

      return importKey;
    }()
  }, {
    key: "checkImportKey",
    value: function checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
      this.checkKeyFormat(format);
      this.checkKeyData(format, keyData);
      this.checkAlgorithmName(algorithm);
      this.checkImportParams(algorithm);

      if (Array.isArray(this.usages)) {
        this.checkKeyUsages(keyUsages, this.usages);
      }
    }
  }, {
    key: "onImportKey",
    value: function () {
      var _onImportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(format, keyData, algorithm, extractable, keyUsages) {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                throw new UnsupportedOperationError("importKey");

              case 1:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function onImportKey(_x24, _x25, _x26, _x27, _x28) {
        return _onImportKey.apply(this, arguments);
      }

      return onImportKey;
    }()
  }, {
    key: "checkAlgorithmName",
    value: function checkAlgorithmName(algorithm) {
      if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {
        throw new AlgorithmError("Unrecognized name");
      }
    }
  }, {
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {}
  }, {
    key: "checkDerivedKeyParams",
    value: function checkDerivedKeyParams(algorithm) {}
  }, {
    key: "checkKeyUsages",
    value: function checkKeyUsages(usages, allowed) {
      var _iterator = _createForOfIteratorHelper(usages),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var usage = _step.value;

          if (allowed.indexOf(usage) === -1) {
            throw new TypeError("Cannot create a key using the specified key usages");
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      this.checkAlgorithmName(key.algorithm);

      if (keyUsage && key.usages.indexOf(keyUsage) === -1) {
        throw new CryptoError("key does not match that of operation");
      }
    }
  }, {
    key: "checkRequiredProperty",
    value: function checkRequiredProperty(data, propName) {
      if (!(propName in data)) {
        throw new RequiredPropertyError(propName);
      }
    }
  }, {
    key: "checkHashAlgorithm",
    value: function checkHashAlgorithm(algorithm, hashAlgorithms) {
      var _iterator2 = _createForOfIteratorHelper(hashAlgorithms),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var item = _step2.value;

          if (item.toLowerCase() === algorithm.name.toLowerCase()) {
            return;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      throw new OperationError("hash: Must be one of ".concat(hashAlgorithms.join(", ")));
    }
  }, {
    key: "checkImportParams",
    value: function checkImportParams(algorithm) {}
  }, {
    key: "checkKeyFormat",
    value: function checkKeyFormat(format) {
      switch (format) {
        case "raw":
        case "pkcs8":
        case "spki":
        case "jwk":
          break;

        default:
          throw new TypeError("format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'");
      }
    }
  }, {
    key: "checkKeyData",
    value: function checkKeyData(format, keyData) {
      if (!keyData) {
        throw new TypeError("keyData: Cannot be empty on empty on key importing");
      }

      if (format === "jwk") {
        if (!isJWK(keyData)) {
          throw new TypeError("keyData: Is not JsonWebToken");
        }
      } else if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(keyData)) {
        throw new TypeError("keyData: Is not ArrayBufferView or ArrayBuffer");
      }
    }
  }, {
    key: "prepareData",
    value: function prepareData(data) {
      return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
    }
  }]);

  return ProviderCrypto;
}();

var AesProvider = /*#__PURE__*/function (_ProviderCrypto) {
  _inherits(AesProvider, _ProviderCrypto);

  var _super6 = _createSuper(AesProvider);

  function AesProvider() {
    _classCallCheck(this, AesProvider);

    return _super6.apply(this, arguments);
  }

  _createClass(AesProvider, [{
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "length");

      if (typeof algorithm.length !== "number") {
        throw new TypeError("length: Is not of type Number");
      }

      switch (algorithm.length) {
        case 128:
        case 192:
        case 256:
          break;

        default:
          throw new TypeError("length: Must be 128, 192, or 256");
      }
    }
  }, {
    key: "checkDerivedKeyParams",
    value: function checkDerivedKeyParams(algorithm) {
      this.checkGenerateKeyParams(algorithm);
    }
  }]);

  return AesProvider;
}(ProviderCrypto);

var AesCbcProvider = /*#__PURE__*/function (_AesProvider) {
  _inherits(AesCbcProvider, _AesProvider);

  var _super7 = _createSuper(AesCbcProvider);

  function AesCbcProvider() {
    var _this;

    _classCallCheck(this, AesCbcProvider);

    _this = _super7.apply(this, arguments);
    _this.name = "AES-CBC";
    _this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    return _this;
  }

  _createClass(AesCbcProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "iv");

      if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
        throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }

      if (algorithm.iv.byteLength !== 16) {
        throw new TypeError("iv: Must have length 16 bytes");
      }
    }
  }]);

  return AesCbcProvider;
}(AesProvider);

var AesCmacProvider = /*#__PURE__*/function (_AesProvider2) {
  _inherits(AesCmacProvider, _AesProvider2);

  var _super8 = _createSuper(AesCmacProvider);

  function AesCmacProvider() {
    var _this2;

    _classCallCheck(this, AesCmacProvider);

    _this2 = _super8.apply(this, arguments);
    _this2.name = "AES-CMAC";
    _this2.usages = ["sign", "verify"];
    return _this2;
  }

  _createClass(AesCmacProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "length");

      if (typeof algorithm.length !== "number") {
        throw new TypeError("length: Is not a Number");
      }

      if (algorithm.length < 1) {
        throw new OperationError("length: Must be more than 0");
      }
    }
  }]);

  return AesCmacProvider;
}(AesProvider);

var AesCtrProvider = /*#__PURE__*/function (_AesProvider3) {
  _inherits(AesCtrProvider, _AesProvider3);

  var _super9 = _createSuper(AesCtrProvider);

  function AesCtrProvider() {
    var _this3;

    _classCallCheck(this, AesCtrProvider);

    _this3 = _super9.apply(this, arguments);
    _this3.name = "AES-CTR";
    _this3.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    return _this3;
  }

  _createClass(AesCtrProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "counter");

      if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {
        throw new TypeError("counter: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }

      if (algorithm.counter.byteLength !== 16) {
        throw new TypeError("iv: Must have length 16 bytes");
      }

      this.checkRequiredProperty(algorithm, "length");

      if (typeof algorithm.length !== "number") {
        throw new TypeError("length: Is not a Number");
      }

      if (algorithm.length < 1) {
        throw new OperationError("length: Must be more than 0");
      }
    }
  }]);

  return AesCtrProvider;
}(AesProvider);

var AesEcbProvider = /*#__PURE__*/function (_AesProvider4) {
  _inherits(AesEcbProvider, _AesProvider4);

  var _super10 = _createSuper(AesEcbProvider);

  function AesEcbProvider() {
    var _this4;

    _classCallCheck(this, AesEcbProvider);

    _this4 = _super10.apply(this, arguments);
    _this4.name = "AES-ECB";
    _this4.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    return _this4;
  }

  return _createClass(AesEcbProvider);
}(AesProvider);

var AesGcmProvider = /*#__PURE__*/function (_AesProvider5) {
  _inherits(AesGcmProvider, _AesProvider5);

  var _super11 = _createSuper(AesGcmProvider);

  function AesGcmProvider() {
    var _this5;

    _classCallCheck(this, AesGcmProvider);

    _this5 = _super11.apply(this, arguments);
    _this5.name = "AES-GCM";
    _this5.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    return _this5;
  }

  _createClass(AesGcmProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "iv");

      if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
        throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }

      if (algorithm.iv.byteLength < 1) {
        throw new OperationError("iv: Must have length more than 0 and less than 2^64 - 1");
      }

      if (!("tagLength" in algorithm)) {
        algorithm.tagLength = 128;
      }

      switch (algorithm.tagLength) {
        case 32:
        case 64:
        case 96:
        case 104:
        case 112:
        case 120:
        case 128:
          break;

        default:
          throw new OperationError("tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128");
      }
    }
  }]);

  return AesGcmProvider;
}(AesProvider);

var AesKwProvider = /*#__PURE__*/function (_AesProvider6) {
  _inherits(AesKwProvider, _AesProvider6);

  var _super12 = _createSuper(AesKwProvider);

  function AesKwProvider() {
    var _this6;

    _classCallCheck(this, AesKwProvider);

    _this6 = _super12.apply(this, arguments);
    _this6.name = "AES-KW";
    _this6.usages = ["wrapKey", "unwrapKey"];
    return _this6;
  }

  return _createClass(AesKwProvider);
}(AesProvider);

var DesProvider = /*#__PURE__*/function (_ProviderCrypto2) {
  _inherits(DesProvider, _ProviderCrypto2);

  var _super13 = _createSuper(DesProvider);

  function DesProvider() {
    var _this7;

    _classCallCheck(this, DesProvider);

    _this7 = _super13.apply(this, arguments);
    _this7.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    return _this7;
  }

  _createClass(DesProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      if (this.ivSize) {
        this.checkRequiredProperty(algorithm, "iv");

        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
          throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }

        if (algorithm.iv.byteLength !== this.ivSize) {
          throw new TypeError("iv: Must have length ".concat(this.ivSize, " bytes"));
        }
      }
    }
  }, {
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "length");

      if (typeof algorithm.length !== "number") {
        throw new TypeError("length: Is not of type Number");
      }

      if (algorithm.length !== this.keySizeBits) {
        throw new OperationError("algorithm.length: Must be ".concat(this.keySizeBits));
      }
    }
  }, {
    key: "checkDerivedKeyParams",
    value: function checkDerivedKeyParams(algorithm) {
      this.checkGenerateKeyParams(algorithm);
    }
  }]);

  return DesProvider;
}(ProviderCrypto);

var RsaProvider = /*#__PURE__*/function (_ProviderCrypto3) {
  _inherits(RsaProvider, _ProviderCrypto3);

  var _super14 = _createSuper(RsaProvider);

  function RsaProvider() {
    var _this8;

    _classCallCheck(this, RsaProvider);

    _this8 = _super14.apply(this, arguments);
    _this8.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    return _this8;
  }

  _createClass(RsaProvider, [{
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
      this.checkRequiredProperty(algorithm, "publicExponent");

      if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {
        throw new TypeError("publicExponent: Missing or not a Uint8Array");
      }

      var publicExponent = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64(algorithm.publicExponent);

      if (!(publicExponent === "Aw==" || publicExponent === "AQAB")) {
        throw new TypeError("publicExponent: Must be [3] or [1,0,1]");
      }

      this.checkRequiredProperty(algorithm, "modulusLength");

      if (algorithm.modulusLength % 8 || algorithm.modulusLength < 256 || algorithm.modulusLength > 16384) {
        throw new TypeError("The modulus length must be a multiple of 8 bits and >= 256 and <= 16384");
      }
    }
  }, {
    key: "checkImportParams",
    value: function checkImportParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
  }]);

  return RsaProvider;
}(ProviderCrypto);

var RsaSsaProvider = /*#__PURE__*/function (_RsaProvider) {
  _inherits(RsaSsaProvider, _RsaProvider);

  var _super15 = _createSuper(RsaSsaProvider);

  function RsaSsaProvider() {
    var _this9;

    _classCallCheck(this, RsaSsaProvider);

    _this9 = _super15.apply(this, arguments);
    _this9.name = "RSASSA-PKCS1-v1_5";
    _this9.usages = {
      privateKey: ["sign"],
      publicKey: ["verify"]
    };
    return _this9;
  }

  return _createClass(RsaSsaProvider);
}(RsaProvider);

var RsaPssProvider = /*#__PURE__*/function (_RsaProvider2) {
  _inherits(RsaPssProvider, _RsaProvider2);

  var _super16 = _createSuper(RsaPssProvider);

  function RsaPssProvider() {
    var _this10;

    _classCallCheck(this, RsaPssProvider);

    _this10 = _super16.apply(this, arguments);
    _this10.name = "RSA-PSS";
    _this10.usages = {
      privateKey: ["sign"],
      publicKey: ["verify"]
    };
    return _this10;
  }

  _createClass(RsaPssProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "saltLength");

      if (typeof algorithm.saltLength !== "number") {
        throw new TypeError("saltLength: Is not a Number");
      }

      if (algorithm.saltLength < 0) {
        throw new RangeError("saltLength: Must be positive number");
      }
    }
  }]);

  return RsaPssProvider;
}(RsaProvider);

var RsaOaepProvider = /*#__PURE__*/function (_RsaProvider3) {
  _inherits(RsaOaepProvider, _RsaProvider3);

  var _super17 = _createSuper(RsaOaepProvider);

  function RsaOaepProvider() {
    var _this11;

    _classCallCheck(this, RsaOaepProvider);

    _this11 = _super17.apply(this, arguments);
    _this11.name = "RSA-OAEP";
    _this11.usages = {
      privateKey: ["decrypt", "unwrapKey"],
      publicKey: ["encrypt", "wrapKey"]
    };
    return _this11;
  }

  _createClass(RsaOaepProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      if (algorithm.label && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {
        throw new TypeError("label: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }
    }
  }]);

  return RsaOaepProvider;
}(RsaProvider);

var EllipticProvider = /*#__PURE__*/function (_ProviderCrypto4) {
  _inherits(EllipticProvider, _ProviderCrypto4);

  var _super18 = _createSuper(EllipticProvider);

  function EllipticProvider() {
    _classCallCheck(this, EllipticProvider);

    return _super18.apply(this, arguments);
  }

  _createClass(EllipticProvider, [{
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "namedCurve");
      this.checkNamedCurve(algorithm.namedCurve);
    }
  }, {
    key: "checkNamedCurve",
    value: function checkNamedCurve(namedCurve) {
      var _iterator3 = _createForOfIteratorHelper(this.namedCurves),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var item = _step3.value;

          if (item.toLowerCase() === namedCurve.toLowerCase()) {
            return;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      throw new OperationError("namedCurve: Must be one of ".concat(this.namedCurves.join(", ")));
    }
  }]);

  return EllipticProvider;
}(ProviderCrypto);

var EcdsaProvider = /*#__PURE__*/function (_EllipticProvider) {
  _inherits(EcdsaProvider, _EllipticProvider);

  var _super19 = _createSuper(EcdsaProvider);

  function EcdsaProvider() {
    var _this12;

    _classCallCheck(this, EcdsaProvider);

    _this12 = _super19.apply(this, arguments);
    _this12.name = "ECDSA";
    _this12.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    _this12.usages = {
      privateKey: ["sign"],
      publicKey: ["verify"]
    };
    _this12.namedCurves = ["P-256", "P-384", "P-521", "K-256"];
    return _this12;
  }

  _createClass(EcdsaProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
  }]);

  return EcdsaProvider;
}(EllipticProvider);

var KEY_TYPES = ["secret", "private", "public"];

var CryptoKey = /*#__PURE__*/function (_Symbol$toStringTag) {
  function CryptoKey() {
    _classCallCheck(this, CryptoKey);
  }

  _createClass(CryptoKey, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return "CryptoKey";
    }
  }], [{
    key: "create",
    value: function create(algorithm, type, extractable, usages) {
      var key = new this();
      key.algorithm = algorithm;
      key.type = type;
      key.extractable = extractable;
      key.usages = usages;
      return key;
    }
  }, {
    key: "isKeyType",
    value: function isKeyType(data) {
      return KEY_TYPES.indexOf(data) !== -1;
    }
  }]);

  return CryptoKey;
}(Symbol.toStringTag);

var EcdhProvider = /*#__PURE__*/function (_EllipticProvider2) {
  _inherits(EcdhProvider, _EllipticProvider2);

  var _super20 = _createSuper(EcdhProvider);

  function EcdhProvider() {
    var _this13;

    _classCallCheck(this, EcdhProvider);

    _this13 = _super20.apply(this, arguments);
    _this13.name = "ECDH";
    _this13.usages = {
      privateKey: ["deriveBits", "deriveKey"],
      publicKey: []
    };
    _this13.namedCurves = ["P-256", "P-384", "P-521", "K-256"];
    return _this13;
  }

  _createClass(EcdhProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "public");

      if (!(algorithm.public instanceof CryptoKey)) {
        throw new TypeError("public: Is not a CryptoKey");
      }

      if (algorithm.public.type !== "public") {
        throw new OperationError("public: Is not a public key");
      }

      if (algorithm.public.algorithm.name !== this.name) {
        throw new OperationError("public: Is not ".concat(this.name, " key"));
      }
    }
  }]);

  return EcdhProvider;
}(EllipticProvider);

var EcdhEsProvider = /*#__PURE__*/function (_EcdhProvider) {
  _inherits(EcdhEsProvider, _EcdhProvider);

  var _super21 = _createSuper(EcdhEsProvider);

  function EcdhEsProvider() {
    var _this14;

    _classCallCheck(this, EcdhEsProvider);

    _this14 = _super21.apply(this, arguments);
    _this14.name = "ECDH-ES";
    _this14.namedCurves = ["X25519", "X448"];
    return _this14;
  }

  return _createClass(EcdhEsProvider);
}(EcdhProvider);

var EdDsaProvider = /*#__PURE__*/function (_EllipticProvider3) {
  _inherits(EdDsaProvider, _EllipticProvider3);

  var _super22 = _createSuper(EdDsaProvider);

  function EdDsaProvider() {
    var _this15;

    _classCallCheck(this, EdDsaProvider);

    _this15 = _super22.apply(this, arguments);
    _this15.name = "EdDSA";
    _this15.usages = {
      privateKey: ["sign"],
      publicKey: ["verify"]
    };
    _this15.namedCurves = ["Ed25519", "Ed448"];
    return _this15;
  }

  return _createClass(EdDsaProvider);
}(EllipticProvider);

var ObjectIdentifier = /*#__PURE__*/_createClass(function ObjectIdentifier(value) {
  _classCallCheck(this, ObjectIdentifier);

  if (value) {
    this.value = value;
  }
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.ObjectIdentifier
})], ObjectIdentifier.prototype, "value", void 0);

ObjectIdentifier = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice
})], ObjectIdentifier);

var AlgorithmIdentifier = /*#__PURE__*/_createClass(function AlgorithmIdentifier(params) {
  _classCallCheck(this, AlgorithmIdentifier);

  Object.assign(this, params);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.ObjectIdentifier
})], AlgorithmIdentifier.prototype, "algorithm", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,
  optional: true
})], AlgorithmIdentifier.prototype, "parameters", void 0);

var PrivateKeyInfo = /*#__PURE__*/_createClass(function PrivateKeyInfo() {
  _classCallCheck(this, PrivateKeyInfo);

  this.version = 0;
  this.privateKeyAlgorithm = new AlgorithmIdentifier();
  this.privateKey = new ArrayBuffer(0);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer
})], PrivateKeyInfo.prototype, "version", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: AlgorithmIdentifier
})], PrivateKeyInfo.prototype, "privateKeyAlgorithm", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString
})], PrivateKeyInfo.prototype, "privateKey", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,
  optional: true
})], PrivateKeyInfo.prototype, "attributes", void 0);

var PublicKeyInfo = /*#__PURE__*/_createClass(function PublicKeyInfo() {
  _classCallCheck(this, PublicKeyInfo);

  this.publicKeyAlgorithm = new AlgorithmIdentifier();
  this.publicKey = new ArrayBuffer(0);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: AlgorithmIdentifier
})], PublicKeyInfo.prototype, "publicKeyAlgorithm", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString
})], PublicKeyInfo.prototype, "publicKey", void 0);

var JsonBase64UrlArrayBufferConverter = {
  fromJSON: function fromJSON(value) {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(value);
  },
  toJSON: function toJSON(value) {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(new Uint8Array(value));
  }
};
var AsnIntegerArrayBufferConverter = {
  fromASN: function fromASN(value) {
    var valueHex = value.valueBlock.valueHex;
    return !new Uint8Array(valueHex)[0] ? value.valueBlock.valueHex.slice(1) : value.valueBlock.valueHex;
  },
  toASN: function toASN(value) {
    var valueHex = new Uint8Array(value)[0] > 127 ? (0,pvtsutils__WEBPACK_IMPORTED_MODULE_0__.combine)(new Uint8Array([0]).buffer, value) : value;
    return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({
      valueHex: valueHex
    });
  }
};
var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,
  JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter
});

var RsaPrivateKey = /*#__PURE__*/_createClass(function RsaPrivateKey() {
  _classCallCheck(this, RsaPrivateKey);

  this.version = 0;
  this.modulus = new ArrayBuffer(0);
  this.publicExponent = new ArrayBuffer(0);
  this.privateExponent = new ArrayBuffer(0);
  this.prime1 = new ArrayBuffer(0);
  this.prime2 = new ArrayBuffer(0);
  this.exponent1 = new ArrayBuffer(0);
  this.exponent2 = new ArrayBuffer(0);
  this.coefficient = new ArrayBuffer(0);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnIntegerConverter
})], RsaPrivateKey.prototype, "version", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "n",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "modulus", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "e",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "publicExponent", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "d",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "privateExponent", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "p",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "prime1", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "q",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "prime2", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "dp",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "exponent1", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "dq",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "exponent2", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "qi",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPrivateKey.prototype, "coefficient", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,
  optional: true
})], RsaPrivateKey.prototype, "otherPrimeInfos", void 0);

var RsaPublicKey = /*#__PURE__*/_createClass(function RsaPublicKey() {
  _classCallCheck(this, RsaPublicKey);

  this.modulus = new ArrayBuffer(0);
  this.publicExponent = new ArrayBuffer(0);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "n",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPublicKey.prototype, "modulus", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerArrayBufferConverter
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  name: "e",
  converter: JsonBase64UrlArrayBufferConverter
})], RsaPublicKey.prototype, "publicExponent", void 0);

var EcPublicKey = /*#__PURE__*/function () {
  function EcPublicKey(value) {
    _classCallCheck(this, EcPublicKey);

    this.value = new ArrayBuffer(0);

    if (value) {
      this.value = value;
    }
  }

  _createClass(EcPublicKey, [{
    key: "toJSON",
    value: function toJSON() {
      var bytes = new Uint8Array(this.value);

      if (bytes[0] !== 0x04) {
        throw new CryptoError("Wrong ECPoint. Current version supports only Uncompressed (0x04) point");
      }

      bytes = new Uint8Array(this.value.slice(1));
      var size = bytes.length / 2;
      var offset = 0;
      var json = {
        x: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),
        y: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size))
      };
      return json;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!("x" in json)) {
        throw new Error("x: Missing required property");
      }

      if (!("y" in json)) {
        throw new Error("y: Missing required property");
      }

      var x = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.x);
      var y = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.y);
      var value = (0,pvtsutils__WEBPACK_IMPORTED_MODULE_0__.combine)(new Uint8Array([0x04]).buffer, x, y);
      this.value = new Uint8Array(value).buffer;
      return this;
    }
  }]);

  return EcPublicKey;
}();

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString
})], EcPublicKey.prototype, "value", void 0);

EcPublicKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice
})], EcPublicKey);

var EcPrivateKey = /*#__PURE__*/function () {
  function EcPrivateKey() {
    _classCallCheck(this, EcPrivateKey);

    this.version = 1;
    this.privateKey = new ArrayBuffer(0);
  }

  _createClass(EcPrivateKey, [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!("d" in json)) {
        throw new Error("d: Missing required property");
      }

      this.privateKey = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.d);

      if ("x" in json) {
        var publicKey = new EcPublicKey();
        publicKey.fromJSON(json);
        var asn = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnSerializer.toASN(publicKey);

        if ("valueHex" in asn.valueBlock) {
          this.publicKey = asn.valueBlock.valueHex;
        }
      }

      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var jwk = {};
      jwk.d = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.privateKey);

      if (this.publicKey) {
        Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());
      }

      return jwk;
    }
  }]);

  return EcPrivateKey;
}();

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnIntegerConverter
})], EcPrivateKey.prototype, "version", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString
})], EcPrivateKey.prototype, "privateKey", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  context: 0,
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,
  optional: true
})], EcPrivateKey.prototype, "parameters", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  context: 1,
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString,
  optional: true
})], EcPrivateKey.prototype, "publicKey", void 0);

var AsnIntegerWithoutPaddingConverter = {
  fromASN: function fromASN(value) {
    var bytes = new Uint8Array(value.valueBlock.valueHex);
    return bytes[0] === 0 ? bytes.buffer.slice(1) : bytes.buffer;
  },
  toASN: function toASN(value) {
    var bytes = new Uint8Array(value);

    if (bytes[0] > 127) {
      var newValue = new Uint8Array(bytes.length + 1);
      newValue.set(bytes, 1);
      return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({
        valueHex: newValue.buffer
      });
    }

    return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({
      valueHex: value
    });
  }
};
var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter
});

var EcUtils = /*#__PURE__*/function () {
  function EcUtils() {
    _classCallCheck(this, EcUtils);
  }

  _createClass(EcUtils, null, [{
    key: "decodePoint",
    value: function decodePoint(data, pointSize) {
      var view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);

      if (view.length === 0 || view[0] !== 4) {
        throw new Error("Only uncompressed point format supported");
      }

      var n = (view.length - 1) / 2;

      if (n !== Math.ceil(pointSize / 8)) {
        throw new Error("Point does not match field size");
      }

      var xb = view.slice(1, n + 1);
      var yb = view.slice(n + 1, n + 1 + n);
      return {
        x: xb,
        y: yb
      };
    }
  }, {
    key: "encodePoint",
    value: function encodePoint(point, pointSize) {
      var size = Math.ceil(pointSize / 8);

      if (point.x.byteLength !== size || point.y.byteLength !== size) {
        throw new Error("X,Y coordinates don't match point size criteria");
      }

      var x = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(point.x);
      var y = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(point.y);
      var res = new Uint8Array(size * 2 + 1);
      res[0] = 4;
      res.set(x, 1);
      res.set(y, size + 1);
      return res;
    }
  }, {
    key: "getSize",
    value: function getSize(pointSize) {
      return Math.ceil(pointSize / 8);
    }
  }, {
    key: "encodeSignature",
    value: function encodeSignature(signature, pointSize) {
      var size = this.getSize(pointSize);
      var r = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(signature.r);
      var s = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(signature.s);
      var res = new Uint8Array(size * 2);
      res.set(this.padStart(r, size));
      res.set(this.padStart(s, size), size);
      return res;
    }
  }, {
    key: "decodeSignature",
    value: function decodeSignature(data, pointSize) {
      var size = this.getSize(pointSize);
      var view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);

      if (view.length !== size * 2) {
        throw new Error("Incorrect size of the signature");
      }

      var r = view.slice(0, size);
      var s = view.slice(size);
      return {
        r: this.trimStart(r),
        s: this.trimStart(s)
      };
    }
  }, {
    key: "trimStart",
    value: function trimStart(data) {
      var i = 0;

      while (i < data.length - 1 && data[i] === 0) {
        i++;
      }

      if (i === 0) {
        return data;
      }

      return data.slice(i, data.length);
    }
  }, {
    key: "padStart",
    value: function padStart(data, size) {
      if (size === data.length) {
        return data;
      }

      var res = new Uint8Array(size);
      res.set(data, size - data.length);
      return res;
    }
  }]);

  return EcUtils;
}();

var EcDsaSignature = /*#__PURE__*/function () {
  function EcDsaSignature() {
    _classCallCheck(this, EcDsaSignature);

    this.r = new ArrayBuffer(0);
    this.s = new ArrayBuffer(0);
  }

  _createClass(EcDsaSignature, [{
    key: "toWebCryptoSignature",
    value: function toWebCryptoSignature(pointSize) {
      pointSize !== null && pointSize !== void 0 ? pointSize : pointSize = Math.max(this.r.byteLength, this.s.byteLength) * 8;
      var signature = EcUtils.encodeSignature(this, pointSize);
      return signature.buffer;
    }
  }], [{
    key: "fromWebCryptoSignature",
    value: function fromWebCryptoSignature(value) {
      var pointSize = value.byteLength / 2;
      var point = EcUtils.decodeSignature(value, pointSize * 8);
      var ecSignature = new EcDsaSignature();
      ecSignature.r = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(point.r);
      ecSignature.s = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(point.s);
      return ecSignature;
    }
  }]);

  return EcDsaSignature;
}();

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerWithoutPaddingConverter
})], EcDsaSignature.prototype, "r", void 0);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,
  converter: AsnIntegerWithoutPaddingConverter
})], EcDsaSignature.prototype, "s", void 0);

var OneAsymmetricKey = /*#__PURE__*/function (_PrivateKeyInfo) {
  _inherits(OneAsymmetricKey, _PrivateKeyInfo);

  var _super23 = _createSuper(OneAsymmetricKey);

  function OneAsymmetricKey() {
    _classCallCheck(this, OneAsymmetricKey);

    return _super23.apply(this, arguments);
  }

  return _createClass(OneAsymmetricKey);
}(PrivateKeyInfo);

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  context: 1,
  implicit: true,
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString,
  optional: true
})], OneAsymmetricKey.prototype, "publicKey", void 0);

var EdPrivateKey = /*#__PURE__*/function () {
  function EdPrivateKey() {
    _classCallCheck(this, EdPrivateKey);

    this.value = new ArrayBuffer(0);
  }

  _createClass(EdPrivateKey, [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json.d) {
        throw new Error("d: Missing required property");
      }

      this.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.d);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var jwk = {
        d: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.value)
      };
      return jwk;
    }
  }]);

  return EdPrivateKey;
}();

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString
})], EdPrivateKey.prototype, "value", void 0);

EdPrivateKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice
})], EdPrivateKey);

var EdPublicKey = /*#__PURE__*/function () {
  function EdPublicKey(value) {
    _classCallCheck(this, EdPublicKey);

    this.value = new ArrayBuffer(0);

    if (value) {
      this.value = value;
    }
  }

  _createClass(EdPublicKey, [{
    key: "toJSON",
    value: function toJSON() {
      var json = {
        x: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.value)
      };
      return json;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!("x" in json)) {
        throw new Error("x: Missing required property");
      }

      this.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.x);
      return this;
    }
  }]);

  return EdPublicKey;
}();

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString
})], EdPublicKey.prototype, "value", void 0);

EdPublicKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice
})], EdPublicKey);

var CurvePrivateKey = /*#__PURE__*/_createClass(function CurvePrivateKey() {
  _classCallCheck(this, CurvePrivateKey);
});

(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString
}), (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({
  type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonPropTypes.String,
  converter: JsonBase64UrlArrayBufferConverter
})], CurvePrivateKey.prototype, "d", void 0);

CurvePrivateKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({
  type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice
})], CurvePrivateKey);
var idSecp256r1 = "1.2.840.10045.3.1.7";
var idEllipticCurve = "1.3.132.0";
var idSecp384r1 = "".concat(idEllipticCurve, ".34");
var idSecp521r1 = "".concat(idEllipticCurve, ".35");
var idSecp256k1 = "".concat(idEllipticCurve, ".10");
var idVersionOne = "1.3.36.3.3.2.8.1.1";
var idBrainpoolP160r1 = "".concat(idVersionOne, ".1");
var idBrainpoolP160t1 = "".concat(idVersionOne, ".2");
var idBrainpoolP192r1 = "".concat(idVersionOne, ".3");
var idBrainpoolP192t1 = "".concat(idVersionOne, ".4");
var idBrainpoolP224r1 = "".concat(idVersionOne, ".5");
var idBrainpoolP224t1 = "".concat(idVersionOne, ".6");
var idBrainpoolP256r1 = "".concat(idVersionOne, ".7");
var idBrainpoolP256t1 = "".concat(idVersionOne, ".8");
var idBrainpoolP320r1 = "".concat(idVersionOne, ".9");
var idBrainpoolP320t1 = "".concat(idVersionOne, ".10");
var idBrainpoolP384r1 = "".concat(idVersionOne, ".11");
var idBrainpoolP384t1 = "".concat(idVersionOne, ".12");
var idBrainpoolP512r1 = "".concat(idVersionOne, ".13");
var idBrainpoolP512t1 = "".concat(idVersionOne, ".14");
var idX25519 = "1.3.101.110";
var idX448 = "1.3.101.111";
var idEd25519 = "1.3.101.112";
var idEd448 = "1.3.101.113";
var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AlgorithmIdentifier: AlgorithmIdentifier,

  get CurvePrivateKey() {
    return CurvePrivateKey;
  },

  EcDsaSignature: EcDsaSignature,
  EcPrivateKey: EcPrivateKey,

  get EcPublicKey() {
    return EcPublicKey;
  },

  get EdPrivateKey() {
    return EdPrivateKey;
  },

  get EdPublicKey() {
    return EdPublicKey;
  },

  get ObjectIdentifier() {
    return ObjectIdentifier;
  },

  OneAsymmetricKey: OneAsymmetricKey,
  PrivateKeyInfo: PrivateKeyInfo,
  PublicKeyInfo: PublicKeyInfo,
  RsaPrivateKey: RsaPrivateKey,
  RsaPublicKey: RsaPublicKey,
  converters: index$2,
  idBrainpoolP160r1: idBrainpoolP160r1,
  idBrainpoolP160t1: idBrainpoolP160t1,
  idBrainpoolP192r1: idBrainpoolP192r1,
  idBrainpoolP192t1: idBrainpoolP192t1,
  idBrainpoolP224r1: idBrainpoolP224r1,
  idBrainpoolP224t1: idBrainpoolP224t1,
  idBrainpoolP256r1: idBrainpoolP256r1,
  idBrainpoolP256t1: idBrainpoolP256t1,
  idBrainpoolP320r1: idBrainpoolP320r1,
  idBrainpoolP320t1: idBrainpoolP320t1,
  idBrainpoolP384r1: idBrainpoolP384r1,
  idBrainpoolP384t1: idBrainpoolP384t1,
  idBrainpoolP512r1: idBrainpoolP512r1,
  idBrainpoolP512t1: idBrainpoolP512t1,
  idEd25519: idEd25519,
  idEd448: idEd448,
  idEllipticCurve: idEllipticCurve,
  idSecp256k1: idSecp256k1,
  idSecp256r1: idSecp256r1,
  idSecp384r1: idSecp384r1,
  idSecp521r1: idSecp521r1,
  idVersionOne: idVersionOne,
  idX25519: idX25519,
  idX448: idX448
});

var EcCurves = /*#__PURE__*/function () {
  function EcCurves() {
    _classCallCheck(this, EcCurves);
  }

  _createClass(EcCurves, null, [{
    key: "register",
    value: function register(item) {
      var oid = new ObjectIdentifier();
      oid.value = item.id;
      var raw = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnConvert.serialize(oid);
      this.items.push(_objectSpread(_objectSpread({}, item), {}, {
        raw: raw
      }));
      this.names.push(item.name);
    }
  }, {
    key: "find",
    value: function find(nameOrId) {
      nameOrId = nameOrId.toUpperCase();

      var _iterator4 = _createForOfIteratorHelper(this.items),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var item = _step4.value;

          if (item.name.toUpperCase() === nameOrId || item.id.toUpperCase() === nameOrId) {
            return item;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return null;
    }
  }, {
    key: "get",
    value: function get(nameOrId) {
      var res = this.find(nameOrId);

      if (!res) {
        throw new Error("Unsupported EC named curve '".concat(nameOrId, "'"));
      }

      return res;
    }
  }]);

  return EcCurves;
}();

EcCurves.items = [];
EcCurves.names = [];
EcCurves.register({
  name: "P-256",
  id: idSecp256r1,
  size: 256
});
EcCurves.register({
  name: "P-384",
  id: idSecp384r1,
  size: 384
});
EcCurves.register({
  name: "P-521",
  id: idSecp521r1,
  size: 521
});
EcCurves.register({
  name: "K-256",
  id: idSecp256k1,
  size: 256
});
EcCurves.register({
  name: "brainpoolP160r1",
  id: idBrainpoolP160r1,
  size: 160
});
EcCurves.register({
  name: "brainpoolP160t1",
  id: idBrainpoolP160t1,
  size: 160
});
EcCurves.register({
  name: "brainpoolP192r1",
  id: idBrainpoolP192r1,
  size: 192
});
EcCurves.register({
  name: "brainpoolP192t1",
  id: idBrainpoolP192t1,
  size: 192
});
EcCurves.register({
  name: "brainpoolP224r1",
  id: idBrainpoolP224r1,
  size: 224
});
EcCurves.register({
  name: "brainpoolP224t1",
  id: idBrainpoolP224t1,
  size: 224
});
EcCurves.register({
  name: "brainpoolP256r1",
  id: idBrainpoolP256r1,
  size: 256
});
EcCurves.register({
  name: "brainpoolP256t1",
  id: idBrainpoolP256t1,
  size: 256
});
EcCurves.register({
  name: "brainpoolP320r1",
  id: idBrainpoolP320r1,
  size: 320
});
EcCurves.register({
  name: "brainpoolP320t1",
  id: idBrainpoolP320t1,
  size: 320
});
EcCurves.register({
  name: "brainpoolP384r1",
  id: idBrainpoolP384r1,
  size: 384
});
EcCurves.register({
  name: "brainpoolP384t1",
  id: idBrainpoolP384t1,
  size: 384
});
EcCurves.register({
  name: "brainpoolP512r1",
  id: idBrainpoolP512r1,
  size: 512
});
EcCurves.register({
  name: "brainpoolP512t1",
  id: idBrainpoolP512t1,
  size: 512
});

var HmacProvider = /*#__PURE__*/function (_ProviderCrypto5) {
  _inherits(HmacProvider, _ProviderCrypto5);

  var _super24 = _createSuper(HmacProvider);

  function HmacProvider() {
    var _this16;

    _classCallCheck(this, HmacProvider);

    _this16 = _super24.apply(this, arguments);
    _this16.name = "HMAC";
    _this16.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    _this16.usages = ["sign", "verify"];
    return _this16;
  }

  _createClass(HmacProvider, [{
    key: "getDefaultLength",
    value: function getDefaultLength(algName) {
      switch (algName.toUpperCase()) {
        case "SHA-1":
        case "SHA-256":
        case "SHA-384":
        case "SHA-512":
          return 512;

        default:
          throw new Error("Unknown algorithm name '".concat(algName, "'"));
      }
    }
  }, {
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);

      if ("length" in algorithm) {
        if (typeof algorithm.length !== "number") {
          throw new TypeError("length: Is not a Number");
        }

        if (algorithm.length < 1) {
          throw new RangeError("length: Number is out of range");
        }
      }
    }
  }, {
    key: "checkImportParams",
    value: function checkImportParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
  }]);

  return HmacProvider;
}(ProviderCrypto);

var Pbkdf2Provider = /*#__PURE__*/function (_ProviderCrypto6) {
  _inherits(Pbkdf2Provider, _ProviderCrypto6);

  var _super25 = _createSuper(Pbkdf2Provider);

  function Pbkdf2Provider() {
    var _this17;

    _classCallCheck(this, Pbkdf2Provider);

    _this17 = _super25.apply(this, arguments);
    _this17.name = "PBKDF2";
    _this17.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    _this17.usages = ["deriveBits", "deriveKey"];
    return _this17;
  }

  _createClass(Pbkdf2Provider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
      this.checkRequiredProperty(algorithm, "salt");

      if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {
        throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }

      this.checkRequiredProperty(algorithm, "iterations");

      if (typeof algorithm.iterations !== "number") {
        throw new TypeError("iterations: Is not a Number");
      }

      if (algorithm.iterations < 1) {
        throw new TypeError("iterations: Is less than 1");
      }
    }
  }, {
    key: "checkImportKey",
    value: function checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
      _get(_getPrototypeOf(Pbkdf2Provider.prototype), "checkImportKey", this).call(this, format, keyData, algorithm, extractable, keyUsages);

      if (extractable) {
        throw new SyntaxError("extractable: Must be 'false'");
      }
    }
  }]);

  return Pbkdf2Provider;
}(ProviderCrypto);

var HkdfProvider = /*#__PURE__*/function (_ProviderCrypto7) {
  _inherits(HkdfProvider, _ProviderCrypto7);

  var _super26 = _createSuper(HkdfProvider);

  function HkdfProvider() {
    var _this18;

    _classCallCheck(this, HkdfProvider);

    _this18 = _super26.apply(this, arguments);
    _this18.name = "HKDF";
    _this18.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    _this18.usages = ["deriveKey", "deriveBits"];
    return _this18;
  }

  _createClass(HkdfProvider, [{
    key: "checkAlgorithmParams",
    value: function checkAlgorithmParams(algorithm) {
      this.checkRequiredProperty(algorithm, "hash");
      this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
      this.checkRequiredProperty(algorithm, "salt");

      if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(algorithm.salt)) {
        throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }

      this.checkRequiredProperty(algorithm, "info");

      if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(algorithm.info)) {
        throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
      }
    }
  }, {
    key: "checkImportKey",
    value: function checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
      _get(_getPrototypeOf(HkdfProvider.prototype), "checkImportKey", this).call(this, format, keyData, algorithm, extractable, keyUsages);

      if (extractable) {
        throw new SyntaxError("extractable: Must be 'false'");
      }
    }
  }]);

  return HkdfProvider;
}(ProviderCrypto);

var ShakeProvider = /*#__PURE__*/function (_ProviderCrypto8) {
  _inherits(ShakeProvider, _ProviderCrypto8);

  var _super27 = _createSuper(ShakeProvider);

  function ShakeProvider() {
    var _this19;

    _classCallCheck(this, ShakeProvider);

    _this19 = _super27.apply(this, arguments);
    _this19.usages = [];
    _this19.defaultLength = 0;
    return _this19;
  }

  _createClass(ShakeProvider, [{
    key: "digest",
    value: function digest() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      args[0] = _objectSpread({
        length: this.defaultLength
      }, args[0]);
      return _get(_getPrototypeOf(ShakeProvider.prototype), "digest", this).apply(this, args);
    }
  }, {
    key: "checkDigest",
    value: function checkDigest(algorithm, data) {
      _get(_getPrototypeOf(ShakeProvider.prototype), "checkDigest", this).call(this, algorithm, data);

      var length = algorithm.length || 0;

      if (typeof length !== "number") {
        throw new TypeError("length: Is not a Number");
      }

      if (length < 0) {
        throw new TypeError("length: Is negative");
      }
    }
  }]);

  return ShakeProvider;
}(ProviderCrypto);

var Shake128Provider = /*#__PURE__*/function (_ShakeProvider) {
  _inherits(Shake128Provider, _ShakeProvider);

  var _super28 = _createSuper(Shake128Provider);

  function Shake128Provider() {
    var _this20;

    _classCallCheck(this, Shake128Provider);

    _this20 = _super28.apply(this, arguments);
    _this20.name = "shake128";
    _this20.defaultLength = 16;
    return _this20;
  }

  return _createClass(Shake128Provider);
}(ShakeProvider);

var Shake256Provider = /*#__PURE__*/function (_ShakeProvider2) {
  _inherits(Shake256Provider, _ShakeProvider2);

  var _super29 = _createSuper(Shake256Provider);

  function Shake256Provider() {
    var _this21;

    _classCallCheck(this, Shake256Provider);

    _this21 = _super29.apply(this, arguments);
    _this21.name = "shake256";
    _this21.defaultLength = 32;
    return _this21;
  }

  return _createClass(Shake256Provider);
}(ShakeProvider);

var Crypto = /*#__PURE__*/function (_Symbol$toStringTag2) {
  function Crypto() {
    _classCallCheck(this, Crypto);
  }

  _createClass(Crypto, [{
    key: _Symbol$toStringTag2,
    get: function get() {
      return "Crypto";
    }
  }, {
    key: "randomUUID",
    value: function randomUUID() {
      var b = this.getRandomValues(new Uint8Array(16));
      b[6] = b[6] & 0x0f | 0x40;
      b[8] = b[8] & 0x3f | 0x80;
      var uuid = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(b).toLowerCase();
      return "".concat(uuid.substring(0, 8), "-").concat(uuid.substring(8, 12), "-").concat(uuid.substring(12, 16), "-").concat(uuid.substring(16, 20), "-").concat(uuid.substring(20));
    }
  }]);

  return Crypto;
}(Symbol.toStringTag);

var ProviderStorage = /*#__PURE__*/function () {
  function ProviderStorage() {
    _classCallCheck(this, ProviderStorage);

    this.items = {};
  }

  _createClass(ProviderStorage, [{
    key: "get",
    value: function get(algorithmName) {
      return this.items[algorithmName.toLowerCase()] || null;
    }
  }, {
    key: "set",
    value: function set(provider) {
      this.items[provider.name.toLowerCase()] = provider;
    }
  }, {
    key: "removeAt",
    value: function removeAt(algorithmName) {
      var provider = this.get(algorithmName.toLowerCase());

      if (provider) {
        delete this.items[algorithmName];
      }

      return provider;
    }
  }, {
    key: "has",
    value: function has(name) {
      return !!this.get(name);
    }
  }, {
    key: "length",
    get: function get() {
      return Object.keys(this.items).length;
    }
  }, {
    key: "algorithms",
    get: function get() {
      var algorithms = [];

      for (var key in this.items) {
        var provider = this.items[key];
        algorithms.push(provider.name);
      }

      return algorithms.sort();
    }
  }]);

  return ProviderStorage;
}();

var SubtleCrypto = /*#__PURE__*/function (_Symbol$toStringTag3) {
  function SubtleCrypto() {
    _classCallCheck(this, SubtleCrypto);

    this.providers = new ProviderStorage();
  }

  _createClass(SubtleCrypto, [{
    key: _Symbol$toStringTag3,
    get: function get() {
      return "SubtleCrypto";
    }
  }, {
    key: "digest",
    value: function () {
      var _digest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
        var _len11,
            args,
            _key11,
            algorithm,
            data,
            params,
            preparedAlgorithm,
            preparedData,
            provider,
            result,
            _args19 = arguments;

        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                for (_len11 = _args19.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
                  args[_key11] = _args19[_key11];
                }

                this.checkRequiredArguments(args, 2, "digest");
                algorithm = args[0], data = args[1], params = args.slice(2);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
                provider = this.getProvider(preparedAlgorithm.name);
                _context19.next = 8;
                return provider.digest.apply(provider, [preparedAlgorithm, preparedData].concat(_toConsumableArray(params)));

              case 8:
                result = _context19.sent;
                return _context19.abrupt("return", result);

              case 10:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function digest() {
        return _digest2.apply(this, arguments);
      }

      return digest;
    }()
  }, {
    key: "generateKey",
    value: function () {
      var _generateKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
        var _len12,
            args,
            _key12,
            algorithm,
            extractable,
            keyUsages,
            params,
            preparedAlgorithm,
            provider,
            result,
            _args20 = arguments;

        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                for (_len12 = _args20.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                  args[_key12] = _args20[_key12];
                }

                this.checkRequiredArguments(args, 3, "generateKey");
                algorithm = args[0], extractable = args[1], keyUsages = args[2], params = args.slice(3);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                provider = this.getProvider(preparedAlgorithm.name);
                _context20.next = 7;
                return provider.generateKey.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), extractable, keyUsages].concat(_toConsumableArray(params)));

              case 7:
                result = _context20.sent;
                return _context20.abrupt("return", result);

              case 9:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function generateKey() {
        return _generateKey2.apply(this, arguments);
      }

      return generateKey;
    }()
  }, {
    key: "sign",
    value: function () {
      var _sign2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
        var _len13,
            args,
            _key13,
            algorithm,
            key,
            data,
            params,
            preparedAlgorithm,
            preparedData,
            provider,
            result,
            _args21 = arguments;

        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                for (_len13 = _args21.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
                  args[_key13] = _args21[_key13];
                }

                this.checkRequiredArguments(args, 3, "sign");
                algorithm = args[0], key = args[1], data = args[2], params = args.slice(3);
                this.checkCryptoKey(key);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
                provider = this.getProvider(preparedAlgorithm.name);
                _context21.next = 9;
                return provider.sign.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), key, preparedData].concat(_toConsumableArray(params)));

              case 9:
                result = _context21.sent;
                return _context21.abrupt("return", result);

              case 11:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function sign() {
        return _sign2.apply(this, arguments);
      }

      return sign;
    }()
  }, {
    key: "verify",
    value: function () {
      var _verify2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
        var _len14,
            args,
            _key14,
            algorithm,
            key,
            signature,
            data,
            params,
            preparedAlgorithm,
            preparedData,
            preparedSignature,
            provider,
            result,
            _args22 = arguments;

        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                for (_len14 = _args22.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
                  args[_key14] = _args22[_key14];
                }

                this.checkRequiredArguments(args, 4, "verify");
                algorithm = args[0], key = args[1], signature = args[2], data = args[3], params = args.slice(4);
                this.checkCryptoKey(key);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
                preparedSignature = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(signature);
                provider = this.getProvider(preparedAlgorithm.name);
                _context22.next = 10;
                return provider.verify.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), key, preparedSignature, preparedData].concat(_toConsumableArray(params)));

              case 10:
                result = _context22.sent;
                return _context22.abrupt("return", result);

              case 12:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function verify() {
        return _verify2.apply(this, arguments);
      }

      return verify;
    }()
  }, {
    key: "encrypt",
    value: function () {
      var _encrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var _len15,
            args,
            _key15,
            algorithm,
            key,
            data,
            params,
            preparedAlgorithm,
            preparedData,
            provider,
            result,
            _args23 = arguments;

        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                for (_len15 = _args23.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
                  args[_key15] = _args23[_key15];
                }

                this.checkRequiredArguments(args, 3, "encrypt");
                algorithm = args[0], key = args[1], data = args[2], params = args.slice(3);
                this.checkCryptoKey(key);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
                provider = this.getProvider(preparedAlgorithm.name);
                _context23.next = 9;
                return provider.encrypt.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), key, preparedData, {
                  keyUsage: true
                }].concat(_toConsumableArray(params)));

              case 9:
                result = _context23.sent;
                return _context23.abrupt("return", result);

              case 11:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function encrypt() {
        return _encrypt2.apply(this, arguments);
      }

      return encrypt;
    }()
  }, {
    key: "decrypt",
    value: function () {
      var _decrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        var _len16,
            args,
            _key16,
            algorithm,
            key,
            data,
            params,
            preparedAlgorithm,
            preparedData,
            provider,
            result,
            _args24 = arguments;

        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                for (_len16 = _args24.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
                  args[_key16] = _args24[_key16];
                }

                this.checkRequiredArguments(args, 3, "decrypt");
                algorithm = args[0], key = args[1], data = args[2], params = args.slice(3);
                this.checkCryptoKey(key);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);
                provider = this.getProvider(preparedAlgorithm.name);
                _context24.next = 9;
                return provider.decrypt.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), key, preparedData, {
                  keyUsage: true
                }].concat(_toConsumableArray(params)));

              case 9:
                result = _context24.sent;
                return _context24.abrupt("return", result);

              case 11:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function decrypt() {
        return _decrypt2.apply(this, arguments);
      }

      return decrypt;
    }()
  }, {
    key: "deriveBits",
    value: function () {
      var _deriveBits2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        var _len17,
            args,
            _key17,
            algorithm,
            baseKey,
            length,
            params,
            preparedAlgorithm,
            provider,
            result,
            _args25 = arguments;

        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                for (_len17 = _args25.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
                  args[_key17] = _args25[_key17];
                }

                this.checkRequiredArguments(args, 3, "deriveBits");
                algorithm = args[0], baseKey = args[1], length = args[2], params = args.slice(3);
                this.checkCryptoKey(baseKey);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                provider = this.getProvider(preparedAlgorithm.name);
                _context25.next = 8;
                return provider.deriveBits.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), baseKey, length, {
                  keyUsage: true
                }].concat(_toConsumableArray(params)));

              case 8:
                result = _context25.sent;
                return _context25.abrupt("return", result);

              case 10:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function deriveBits() {
        return _deriveBits2.apply(this, arguments);
      }

      return deriveBits;
    }()
  }, {
    key: "deriveKey",
    value: function () {
      var _deriveKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
        var _len18,
            args,
            _key18,
            algorithm,
            baseKey,
            derivedKeyType,
            extractable,
            keyUsages,
            params,
            preparedDerivedKeyType,
            importProvider,
            preparedAlgorithm,
            provider,
            derivedBits,
            _args26 = arguments;

        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                for (_len18 = _args26.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
                  args[_key18] = _args26[_key18];
                }

                this.checkRequiredArguments(args, 5, "deriveKey");
                algorithm = args[0], baseKey = args[1], derivedKeyType = args[2], extractable = args[3], keyUsages = args[4], params = args.slice(5);
                preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);
                importProvider = this.getProvider(preparedDerivedKeyType.name);
                importProvider.checkDerivedKeyParams(preparedDerivedKeyType);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                provider = this.getProvider(preparedAlgorithm.name);
                provider.checkCryptoKey(baseKey, "deriveKey");
                _context26.next = 11;
                return provider.deriveBits.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), baseKey, derivedKeyType.length || 512, {
                  keyUsage: false
                }].concat(_toConsumableArray(params)));

              case 11:
                derivedBits = _context26.sent;
                return _context26.abrupt("return", this.importKey.apply(this, ["raw", derivedBits, derivedKeyType, extractable, keyUsages].concat(_toConsumableArray(params))));

              case 13:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function deriveKey() {
        return _deriveKey.apply(this, arguments);
      }

      return deriveKey;
    }()
  }, {
    key: "exportKey",
    value: function () {
      var _exportKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        var _len19,
            args,
            _key19,
            format,
            key,
            params,
            provider,
            result,
            _args27 = arguments;

        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                for (_len19 = _args27.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
                  args[_key19] = _args27[_key19];
                }

                this.checkRequiredArguments(args, 2, "exportKey");
                format = args[0], key = args[1], params = args.slice(2);
                this.checkCryptoKey(key);
                provider = this.getProvider(key.algorithm.name);
                _context27.next = 7;
                return provider.exportKey.apply(provider, [format, key].concat(_toConsumableArray(params)));

              case 7:
                result = _context27.sent;
                return _context27.abrupt("return", result);

              case 9:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function exportKey() {
        return _exportKey2.apply(this, arguments);
      }

      return exportKey;
    }()
  }, {
    key: "importKey",
    value: function () {
      var _importKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
        var _len20,
            args,
            _key20,
            format,
            keyData,
            algorithm,
            extractable,
            keyUsages,
            params,
            preparedAlgorithm,
            provider,
            preparedData,
            _args28 = arguments;

        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                for (_len20 = _args28.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
                  args[_key20] = _args28[_key20];
                }

                this.checkRequiredArguments(args, 5, "importKey");
                format = args[0], keyData = args[1], algorithm = args[2], extractable = args[3], keyUsages = args[4], params = args.slice(5);
                preparedAlgorithm = this.prepareAlgorithm(algorithm);
                provider = this.getProvider(preparedAlgorithm.name);

                if (!(["pkcs8", "spki", "raw"].indexOf(format) !== -1)) {
                  _context28.next = 10;
                  break;
                }

                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(keyData);
                return _context28.abrupt("return", provider.importKey.apply(provider, [format, preparedData, _objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), extractable, keyUsages].concat(_toConsumableArray(params))));

              case 10:
                if (keyData.kty) {
                  _context28.next = 12;
                  break;
                }

                throw new TypeError("keyData: Is not JSON");

              case 12:
                return _context28.abrupt("return", provider.importKey.apply(provider, [format, keyData, _objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), extractable, keyUsages].concat(_toConsumableArray(params))));

              case 13:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function importKey() {
        return _importKey2.apply(this, arguments);
      }

      return importKey;
    }()
  }, {
    key: "wrapKey",
    value: function () {
      var _wrapKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(format, key, wrappingKey, wrapAlgorithm) {
        var _len21,
            args,
            _key21,
            keyData,
            json,
            preparedAlgorithm,
            preparedData,
            provider,
            _args29 = arguments;

        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                for (_len21 = _args29.length, args = new Array(_len21 > 4 ? _len21 - 4 : 0), _key21 = 4; _key21 < _len21; _key21++) {
                  args[_key21 - 4] = _args29[_key21];
                }

                _context29.next = 3;
                return this.exportKey.apply(this, [format, key].concat(args));

              case 3:
                keyData = _context29.sent;

                if (format === "jwk") {
                  json = JSON.stringify(keyData);
                  keyData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf8String(json);
                }

                preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(keyData);
                provider = this.getProvider(preparedAlgorithm.name);
                return _context29.abrupt("return", provider.encrypt.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), wrappingKey, preparedData, {
                  keyUsage: false
                }].concat(args)));

              case 9:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function wrapKey(_x29, _x30, _x31, _x32) {
        return _wrapKey.apply(this, arguments);
      }

      return wrapKey;
    }()
  }, {
    key: "unwrapKey",
    value: function () {
      var _unwrapKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        var preparedAlgorithm,
            preparedData,
            provider,
            _len22,
            args,
            _key22,
            keyData,
            error,
            _args30 = arguments;

        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);
                preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(wrappedKey);
                provider = this.getProvider(preparedAlgorithm.name);

                for (_len22 = _args30.length, args = new Array(_len22 > 7 ? _len22 - 7 : 0), _key22 = 7; _key22 < _len22; _key22++) {
                  args[_key22 - 7] = _args30[_key22];
                }

                _context30.next = 6;
                return provider.decrypt.apply(provider, [_objectSpread(_objectSpread({}, preparedAlgorithm), {}, {
                  name: provider.name
                }), unwrappingKey, preparedData, {
                  keyUsage: false
                }].concat(args));

              case 6:
                keyData = _context30.sent;

                if (!(format === "jwk")) {
                  _context30.next = 17;
                  break;
                }

                _context30.prev = 8;
                keyData = JSON.parse(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf8String(keyData));
                _context30.next = 17;
                break;

              case 12:
                _context30.prev = 12;
                _context30.t0 = _context30["catch"](8);
                error = new TypeError("wrappedKey: Is not a JSON");
                error.internal = _context30.t0;
                throw error;

              case 17:
                return _context30.abrupt("return", this.importKey.apply(this, [format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages].concat(args)));

              case 18:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this, [[8, 12]]);
      }));

      function unwrapKey(_x33, _x34, _x35, _x36, _x37, _x38, _x39) {
        return _unwrapKey.apply(this, arguments);
      }

      return unwrapKey;
    }()
  }, {
    key: "checkRequiredArguments",
    value: function checkRequiredArguments(args, size, methodName) {
      if (args.length < size) {
        throw new TypeError("Failed to execute '".concat(methodName, "' on 'SubtleCrypto': ").concat(size, " arguments required, but only ").concat(args.length, " present"));
      }
    }
  }, {
    key: "prepareAlgorithm",
    value: function prepareAlgorithm(algorithm) {
      if (typeof algorithm === "string") {
        return {
          name: algorithm
        };
      }

      if (SubtleCrypto.isHashedAlgorithm(algorithm)) {
        var preparedAlgorithm = _objectSpread({}, algorithm);

        preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);
        return preparedAlgorithm;
      }

      return _objectSpread({}, algorithm);
    }
  }, {
    key: "getProvider",
    value: function getProvider(name) {
      var provider = this.providers.get(name);

      if (!provider) {
        throw new AlgorithmError("Unrecognized name");
      }

      return provider;
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key) {
      if (!(key instanceof CryptoKey)) {
        throw new TypeError("Key is not of type 'CryptoKey'");
      }
    }
  }], [{
    key: "isHashedAlgorithm",
    value: function isHashedAlgorithm(data) {
      return data && _typeof(data) === "object" && "name" in data && "hash" in data ? true : false;
    }
  }]);

  return SubtleCrypto;
}(Symbol.toStringTag);

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  converters: index$3
});
var REQUIRED_FIELDS = ["crv", "e", "k", "kty", "n", "x", "y"];

var JwkUtils = /*#__PURE__*/function () {
  function JwkUtils() {
    _classCallCheck(this, JwkUtils);
  }

  _createClass(JwkUtils, null, [{
    key: "thumbprint",
    value: function () {
      var _thumbprint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(hash, jwk, crypto) {
        var data;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                data = this.format(jwk, true);
                return _context31.abrupt("return", crypto.subtle.digest(hash, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBinary(JSON.stringify(data))));

              case 2:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function thumbprint(_x40, _x41, _x42) {
        return _thumbprint.apply(this, arguments);
      }

      return thumbprint;
    }()
  }, {
    key: "format",
    value: function format(jwk) {
      var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var res = Object.entries(jwk);

      if (remove) {
        res = res.filter(function (o) {
          return REQUIRED_FIELDS.includes(o[0]);
        });
      }

      res = res.sort(function (_ref, _ref2) {
        var _ref3 = _slicedToArray(_ref, 1),
            keyA = _ref3[0];

        var _ref4 = _slicedToArray(_ref2, 1),
            keyB = _ref4[0];

        return keyA > keyB ? 1 : keyA < keyB ? -1 : 0;
      });
      return Object.fromEntries(res);
    }
  }]);

  return JwkUtils;
}();



/***/ }),

/***/ 4348:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2023, Peculiar Ventures, LLC.
 */


var _edOIDs;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var core = __webpack_require__(5688);

var tslib = __webpack_require__(9894);

var asn1Schema = __webpack_require__(6541);

var jsonSchema = __webpack_require__(4458);

var pvtsutils = __webpack_require__(5774);

var asmCrypto = __webpack_require__(4576);

var elliptic = __webpack_require__(3766);

var sha3 = __webpack_require__(2277);

var des = __webpack_require__(338);

function _interopNamespaceDefault(e) {
  var n = Object.create(null);

  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function get() {
            return e[k];
          }
        });
      }
    });
  }

  n.default = e;
  return Object.freeze(n);
}

var core__namespace = /*#__PURE__*/_interopNamespaceDefault(core);

var asmCrypto__namespace = /*#__PURE__*/_interopNamespaceDefault(asmCrypto);

var elliptic__namespace = /*#__PURE__*/_interopNamespaceDefault(elliptic);

var des__namespace = /*#__PURE__*/_interopNamespaceDefault(des);

var window = {};

if (typeof self !== "undefined") {
  window = self;
}

exports.nativeCrypto = window["msCrypto"] || window.crypto || {};
exports.nativeSubtle = null;

try {
  exports.nativeSubtle = (exports.nativeCrypto === null || exports.nativeCrypto === void 0 ? void 0 : exports.nativeCrypto.subtle) || (exports.nativeCrypto === null || exports.nativeCrypto === void 0 ? void 0 : exports.nativeCrypto["webkitSubtle"]) || null;
} catch (err) {
  console.warn("Cannot get subtle from crypto", err);
}

function setCrypto(crypto) {
  exports.nativeCrypto = crypto;
  exports.nativeSubtle = crypto.subtle;
}

var Debug = /*#__PURE__*/function () {
  function Debug() {
    _classCallCheck(this, Debug);
  }

  _createClass(Debug, null, [{
    key: "enabled",
    get: function get() {
      return typeof self !== "undefined" && self.PV_WEBCRYPTO_LINER_LOG;
    }
  }, {
    key: "log",
    value: function log() {
      if (this.enabled) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        console.log.apply(console, args);
      }
    }
  }, {
    key: "error",
    value: function error() {
      if (this.enabled) {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        console.error.apply(console, args);
      }
    }
  }, {
    key: "info",
    value: function info() {
      if (this.enabled) {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        console.info.apply(console, args);
      }
    }
  }, {
    key: "warn",
    value: function warn() {
      if (this.enabled) {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        console.warn.apply(console, args);
      }
    }
  }, {
    key: "trace",
    value: function trace() {
      if (this.enabled) {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        console.trace.apply(console, args);
      }
    }
  }]);

  return Debug;
}();

var Browser;

(function (Browser) {
  Browser["Unknown"] = "Unknown";
  Browser["IE"] = "Internet Explorer";
  Browser["Safari"] = "Safari";
  Browser["Edge"] = "Edge";
  Browser["Chrome"] = "Chrome";
  Browser["Firefox"] = "Firefox Mozilla";
  Browser["Mobile"] = "Mobile";
})(Browser || (Browser = {}));

function BrowserInfo() {
  var res = {
    name: Browser.Unknown,
    version: "0"
  };

  if (typeof self === "undefined") {
    return res;
  }

  var userAgent = self.navigator.userAgent;
  var reg;

  if (reg = /edge\/([\d\.]+)/i.exec(userAgent)) {
    res.name = Browser.Edge;
    res.version = reg[1];
  } else if (/msie/i.test(userAgent)) {
    res.name = Browser.IE;
    res.version = /msie ([\d\.]+)/i.exec(userAgent)[1];
  } else if (/Trident/i.test(userAgent)) {
    res.name = Browser.IE;
    res.version = /rv:([\d\.]+)/i.exec(userAgent)[1];
  } else if (/chrome/i.test(userAgent)) {
    res.name = Browser.Chrome;
    res.version = /chrome\/([\d\.]+)/i.exec(userAgent)[1];
  } else if (/firefox/i.test(userAgent)) {
    res.name = Browser.Firefox;
    res.version = /firefox\/([\d\.]+)/i.exec(userAgent)[1];
  } else if (/mobile/i.test(userAgent)) {
    res.name = Browser.Mobile;
    res.version = /mobile\/([\w]+)/i.exec(userAgent)[1];
  } else if (/safari/i.test(userAgent)) {
    res.name = Browser.Safari;
    res.version = /version\/([\d\.]+)/i.exec(userAgent)[1];
  }

  return res;
}

function concat() {
  for (var _len6 = arguments.length, buf = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    buf[_key6] = arguments[_key6];
  }

  var res = new Uint8Array(buf.map(function (item) {
    return item.length;
  }).reduce(function (prev, cur) {
    return prev + cur;
  }));
  var offset = 0;
  buf.forEach(function (item, index) {
    for (var i = 0; i < item.length; i++) {
      res[offset + i] = item[i];
    }

    offset += item.length;
  });
  return res;
}

var CryptoKey = /*#__PURE__*/function (_core__namespace$Cryp) {
  _inherits(CryptoKey, _core__namespace$Cryp);

  var _super = _createSuper(CryptoKey);

  function CryptoKey(algorithm, extractable, type, usages) {
    var _this;

    _classCallCheck(this, CryptoKey);

    _this = _super.call(this);
    _this.extractable = extractable;
    _this.type = type;
    _this.usages = usages;
    _this.algorithm = Object.assign({}, algorithm);
    return _this;
  }

  return _createClass(CryptoKey);
}(core__namespace.CryptoKey);

function isAlgorithm(algorithm, name) {
  return algorithm.name.toUpperCase() === name.toUpperCase();
}

var AesCryptoKey = /*#__PURE__*/function (_CryptoKey) {
  _inherits(AesCryptoKey, _CryptoKey);

  var _super2 = _createSuper(AesCryptoKey);

  function AesCryptoKey(algorithm, extractable, usages, raw) {
    var _this2;

    _classCallCheck(this, AesCryptoKey);

    _this2 = _super2.call(this, algorithm, extractable, "secret", usages);
    _this2.raw = raw;
    return _this2;
  }

  _createClass(AesCryptoKey, [{
    key: "toJSON",
    value: function toJSON() {
      var jwk = {
        kty: "oct",
        alg: this.getJwkAlgorithm(),
        k: pvtsutils.Convert.ToBase64Url(this.raw),
        ext: this.extractable,
        key_ops: this.usages
      };
      return jwk;
    }
  }, {
    key: "getJwkAlgorithm",
    value: function getJwkAlgorithm() {
      switch (this.algorithm.name.toUpperCase()) {
        case "AES-CBC":
          return "A".concat(this.algorithm.length, "CBC");

        case "AES-CTR":
          return "A".concat(this.algorithm.length, "CTR");

        case "AES-GCM":
          return "A".concat(this.algorithm.length, "GCM");

        case "AES-ECB":
          return "A".concat(this.algorithm.length, "ECB");

        default:
          throw new core__namespace.AlgorithmError("Unsupported algorithm name");
      }
    }
  }]);

  return AesCryptoKey;
}(CryptoKey);

var AesCrypto = /*#__PURE__*/function () {
  function AesCrypto() {
    _classCallCheck(this, AesCrypto);
  }

  _createClass(AesCrypto, null, [{
    key: "checkCryptoKey",
    value: function checkCryptoKey(key) {
      if (!(key instanceof AesCryptoKey)) {
        throw new TypeError("key: Is not AesCryptoKey");
      }
    }
  }, {
    key: "generateKey",
    value: function generateKey(algorithm, extractable, usages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var raw;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                raw = exports.nativeCrypto.getRandomValues(new Uint8Array(algorithm.length / 8));
                return _context.abrupt("return", new AesCryptoKey(algorithm, extractable, usages, raw));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    }
  }, {
    key: "encrypt",
    value: function encrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.cipher(algorithm, key, core__namespace.BufferSourceConverter.toUint8Array(data), true));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "decrypt",
    value: function decrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.cipher(algorithm, key, core__namespace.BufferSourceConverter.toUint8Array(data), false));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }
  }, {
    key: "exportKey",
    value: function exportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = format;
                _context4.next = _context4.t0 === "jwk" ? 3 : _context4.t0 === "raw" ? 4 : 5;
                break;

              case 3:
                return _context4.abrupt("return", key.toJSON());

              case 4:
                return _context4.abrupt("return", key.raw.buffer);

              case 5:
                throw new core__namespace.OperationError("format: Must be 'jwk' or 'raw'");

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var raw, key;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (core__namespace.isJWK(keyData)) {
                  raw = pvtsutils.Convert.FromBase64Url(keyData.k);
                } else {
                  raw = core__namespace.BufferSourceConverter.toArrayBuffer(keyData);
                }

                _context5.t0 = raw.byteLength << 3;
                _context5.next = _context5.t0 === 128 ? 4 : _context5.t0 === 192 ? 4 : _context5.t0 === 256 ? 4 : 5;
                break;

              case 4:
                return _context5.abrupt("break", 6);

              case 5:
                throw new core__namespace.OperationError("keyData: Is wrong key length");

              case 6:
                key = new AesCryptoKey({
                  name: algorithm.name,
                  length: raw.byteLength << 3
                }, extractable, keyUsages, new Uint8Array(raw));
                return _context5.abrupt("return", key);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
    }
  }, {
    key: "cipher",
    value: function cipher(algorithm, key, data, encrypt) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var action, result, iv, _iv, additionalData, tagLength;

        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                action = encrypt ? "encrypt" : "decrypt";

                if (!isAlgorithm(algorithm, AesCrypto.AesCBC)) {
                  _context6.next = 6;
                  break;
                }

                iv = core__namespace.BufferSourceConverter.toUint8Array(algorithm.iv);
                result = asmCrypto__namespace.AES_CBC[action](data, key.raw, undefined, iv);
                _context6.next = 18;
                break;

              case 6:
                if (!isAlgorithm(algorithm, AesCrypto.AesGCM)) {
                  _context6.next = 13;
                  break;
                }

                _iv = core__namespace.BufferSourceConverter.toUint8Array(algorithm.iv);

                if (algorithm.additionalData) {
                  additionalData = core__namespace.BufferSourceConverter.toUint8Array(algorithm.additionalData);
                }

                tagLength = (algorithm.tagLength || 128) / 8;
                result = asmCrypto__namespace.AES_GCM[action](data, key.raw, _iv, additionalData, tagLength);
                _context6.next = 18;
                break;

              case 13:
                if (!isAlgorithm(algorithm, AesCrypto.AesECB)) {
                  _context6.next = 17;
                  break;
                }

                result = asmCrypto__namespace.AES_ECB[action](data, key.raw, true);
                _context6.next = 18;
                break;

              case 17:
                throw new core__namespace.OperationError("algorithm: Is not recognized");

              case 18:
                return _context6.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 19:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
    }
  }]);

  return AesCrypto;
}();

AesCrypto.AesCBC = "AES-CBC";
AesCrypto.AesECB = "AES-ECB";
AesCrypto.AesGCM = "AES-GCM";

var AesCbcProvider = /*#__PURE__*/function (_core__namespace$AesC) {
  _inherits(AesCbcProvider, _core__namespace$AesC);

  var _super3 = _createSuper(AesCbcProvider);

  function AesCbcProvider() {
    _classCallCheck(this, AesCbcProvider);

    return _super3.apply(this, arguments);
  }

  _createClass(AesCbcProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", AesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", AesCrypto.encrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", AesCrypto.decrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                return _context10.abrupt("return", AesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", AesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(AesCbcProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      AesCrypto.checkCryptoKey(key);
    }
  }]);

  return AesCbcProvider;
}(core__namespace.AesCbcProvider);

var AesEcbProvider = /*#__PURE__*/function (_core__namespace$AesE) {
  _inherits(AesEcbProvider, _core__namespace$AesE);

  var _super4 = _createSuper(AesEcbProvider);

  function AesEcbProvider() {
    _classCallCheck(this, AesEcbProvider);

    return _super4.apply(this, arguments);
  }

  _createClass(AesEcbProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", AesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                return _context13.abrupt("return", AesCrypto.encrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                return _context14.abrupt("return", AesCrypto.decrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                return _context15.abrupt("return", AesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", AesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(AesEcbProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      AesCrypto.checkCryptoKey(key);
    }
  }]);

  return AesEcbProvider;
}(core__namespace.AesEcbProvider);

var AesGcmProvider = /*#__PURE__*/function (_core__namespace$AesG) {
  _inherits(AesGcmProvider, _core__namespace$AesG);

  var _super5 = _createSuper(AesGcmProvider);

  function AesGcmProvider() {
    _classCallCheck(this, AesGcmProvider);

    return _super5.apply(this, arguments);
  }

  _createClass(AesGcmProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt("return", AesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                return _context18.abrupt("return", AesCrypto.encrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                return _context19.abrupt("return", AesCrypto.decrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt("return", AesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                return _context21.abrupt("return", AesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(AesGcmProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      AesCrypto.checkCryptoKey(key);
    }
  }]);

  return AesGcmProvider;
}(core__namespace.AesGcmProvider);

var AesCtrProvider = /*#__PURE__*/function (_core__namespace$AesC2) {
  _inherits(AesCtrProvider, _core__namespace$AesC2);

  var _super6 = _createSuper(AesCtrProvider);

  function AesCtrProvider() {
    _classCallCheck(this, AesCtrProvider);

    return _super6.apply(this, arguments);
  }

  _createClass(AesCtrProvider, [{
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
        var result;
        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                result = new asmCrypto__namespace.AES_CTR(key.raw, core__namespace.BufferSourceConverter.toUint8Array(algorithm.counter)).encrypt(core__namespace.BufferSourceConverter.toUint8Array(data));
                return _context22.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 2:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var result;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                result = new asmCrypto__namespace.AES_CTR(key.raw, core__namespace.BufferSourceConverter.toUint8Array(algorithm.counter)).decrypt(core__namespace.BufferSourceConverter.toUint8Array(data));
                return _context23.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 2:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));
    }
  }, {
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                return _context24.abrupt("return", AesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                return _context25.abrupt("return", AesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                return _context26.abrupt("return", AesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(AesCtrProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      AesCrypto.checkCryptoKey(key);
    }
  }]);

  return AesCtrProvider;
}(core__namespace.AesCtrProvider);

var AesKwProvider = /*#__PURE__*/function (_core__namespace$AesK) {
  _inherits(AesKwProvider, _core__namespace$AesK);

  var _super7 = _createSuper(AesKwProvider);

  function AesKwProvider() {
    _classCallCheck(this, AesKwProvider);

    return _super7.apply(this, arguments);
  }

  _createClass(AesKwProvider, [{
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                throw new Error("Method not implemented.");

              case 1:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                throw new Error("Method not implemented.");

              case 1:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));
    }
  }, {
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                throw new Error("Method not implemented.");

              case 1:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                throw new Error("Method not implemented.");

              case 1:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                throw new Error("Method not implemented.");

              case 1:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(AesKwProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      AesCrypto.checkCryptoKey(key);
    }
  }]);

  return AesKwProvider;
}(core__namespace.AesKwProvider);

var RsaCryptoKey = /*#__PURE__*/function (_CryptoKey2) {
  _inherits(RsaCryptoKey, _CryptoKey2);

  var _super8 = _createSuper(RsaCryptoKey);

  function RsaCryptoKey(algorithm, extractable, type, usages, data) {
    var _this3;

    _classCallCheck(this, RsaCryptoKey);

    _this3 = _super8.call(this, algorithm, extractable, type, usages);
    _this3.data = data;
    return _this3;
  }

  return _createClass(RsaCryptoKey);
}(CryptoKey);

var RsaCrypto = /*#__PURE__*/function () {
  function RsaCrypto() {
    _classCallCheck(this, RsaCrypto);
  }

  _createClass(RsaCrypto, null, [{
    key: "checkCryptoKey",
    value: function checkCryptoKey(key) {
      if (!(key instanceof RsaCryptoKey)) {
        throw new TypeError("key: Is not RsaCryptoKey");
      }
    }
  }, {
    key: "generateKey",
    value: function generateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        var _this4 = this;

        var alg, keys, crypto, pkcs8, privateKey, spki, publicKey;
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                alg = {
                  name: "RSA-PSS",
                  hash: "SHA-256",
                  publicExponent: algorithm.publicExponent,
                  modulusLength: algorithm.modulusLength
                };
                _context32.next = 3;
                return exports.nativeSubtle.generateKey(alg, true, ["sign", "verify"]);

              case 3:
                keys = _context32.sent;
                crypto = new Crypto();
                _context32.next = 7;
                return crypto.subtle.exportKey("pkcs8", keys.privateKey);

              case 7:
                pkcs8 = _context32.sent;
                _context32.next = 10;
                return crypto.subtle.importKey("pkcs8", pkcs8, algorithm, extractable, keyUsages.filter(function (o) {
                  return _this4.privateUsages.includes(o);
                }));

              case 10:
                privateKey = _context32.sent;
                _context32.next = 13;
                return crypto.subtle.exportKey("spki", keys.publicKey);

              case 13:
                spki = _context32.sent;
                _context32.next = 16;
                return crypto.subtle.importKey("spki", spki, algorithm, true, keyUsages.filter(function (o) {
                  return _this4.publicUsages.includes(o);
                }));

              case 16:
                publicKey = _context32.sent;
                return _context32.abrupt("return", {
                  privateKey: privateKey,
                  publicKey: publicKey
                });

              case 18:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }));
    }
  }, {
    key: "exportKey",
    value: function exportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.t0 = format;
                _context33.next = _context33.t0 === "pkcs8" ? 3 : _context33.t0 === "spki" ? 4 : _context33.t0 === "jwk" ? 5 : 6;
                break;

              case 3:
                return _context33.abrupt("return", this.exportPkcs8Key(key));

              case 4:
                return _context33.abrupt("return", this.exportSpkiKey(key));

              case 5:
                return _context33.abrupt("return", this.exportJwkKey(key));

              case 6:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'pkcs8' or 'spki'");

              case 7:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
        var asmKey, key;
        return _regeneratorRuntime().wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.t0 = format;
                _context34.next = _context34.t0 === "pkcs8" ? 3 : _context34.t0 === "spki" ? 5 : _context34.t0 === "jwk" ? 7 : 9;
                break;

              case 3:
                asmKey = this.importPkcs8Key(keyData);
                return _context34.abrupt("break", 10);

              case 5:
                asmKey = this.importSpkiKey(keyData);
                return _context34.abrupt("break", 10);

              case 7:
                asmKey = this.importJwkKey(keyData);
                return _context34.abrupt("break", 10);

              case 9:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'pkcs8' or 'spki'");

              case 10:
                key = new RsaCryptoKey(Object.assign({
                  publicExponent: asmKey[1][1] === 1 ? asmKey[1].slice(1) : asmKey[1].slice(3),
                  modulusLength: asmKey[0].byteLength << 3
                }, algorithm), extractable, asmKey.length === 2 ? "public" : "private", keyUsages, asmKey);
                return _context34.abrupt("return", key);

              case 12:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));
    }
  }, {
    key: "randomNonZeroValues",
    value: function randomNonZeroValues(data) {
      data = exports.nativeCrypto.getRandomValues(data);
      return data.map(function (n) {
        while (!n) {
          n = exports.nativeCrypto.getRandomValues(new Uint8Array(1))[0];
        }

        return n;
      });
    }
  }, {
    key: "exportPkcs8Key",
    value: function exportPkcs8Key(key) {
      var keyInfo = new core__namespace.asn1.PrivateKeyInfo();
      keyInfo.privateKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";
      keyInfo.privateKeyAlgorithm.parameters = null;
      keyInfo.privateKey = asn1Schema.AsnConvert.serialize(this.exportAsmKey(key.data));
      return asn1Schema.AsnConvert.serialize(keyInfo);
    }
  }, {
    key: "importPkcs8Key",
    value: function importPkcs8Key(data) {
      var keyInfo = asn1Schema.AsnConvert.parse(data, core__namespace.asn1.PrivateKeyInfo);
      var privateKey = asn1Schema.AsnConvert.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);
      return this.importAsmKey(privateKey);
    }
  }, {
    key: "importSpkiKey",
    value: function importSpkiKey(data) {
      var keyInfo = asn1Schema.AsnConvert.parse(data, core__namespace.asn1.PublicKeyInfo);
      var publicKey = asn1Schema.AsnConvert.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);
      return this.importAsmKey(publicKey);
    }
  }, {
    key: "exportSpkiKey",
    value: function exportSpkiKey(key) {
      var publicKey = new core__namespace.asn1.RsaPublicKey();
      publicKey.modulus = key.data[0].buffer;
      publicKey.publicExponent = key.data[1][1] === 1 ? key.data[1].buffer.slice(1) : key.data[1].buffer.slice(3);
      var keyInfo = new core__namespace.asn1.PublicKeyInfo();
      keyInfo.publicKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";
      keyInfo.publicKeyAlgorithm.parameters = null;
      keyInfo.publicKey = asn1Schema.AsnConvert.serialize(publicKey);
      return asn1Schema.AsnConvert.serialize(keyInfo);
    }
  }, {
    key: "importJwkKey",
    value: function importJwkKey(data) {
      var key;

      if (data.d) {
        key = jsonSchema.JsonParser.fromJSON(data, {
          targetSchema: core__namespace.asn1.RsaPrivateKey
        });
      } else {
        key = jsonSchema.JsonParser.fromJSON(data, {
          targetSchema: core__namespace.asn1.RsaPublicKey
        });
      }

      return this.importAsmKey(key);
    }
  }, {
    key: "exportJwkKey",
    value: function exportJwkKey(key) {
      var asnKey = this.exportAsmKey(key.data);
      var jwk = jsonSchema.JsonSerializer.toJSON(asnKey);
      jwk.ext = true;
      jwk.key_ops = key.usages;
      jwk.kty = "RSA";
      jwk.alg = this.getJwkAlgorithm(key.algorithm);
      return jwk;
    }
  }, {
    key: "getJwkAlgorithm",
    value: function getJwkAlgorithm(algorithm) {
      switch (algorithm.name.toUpperCase()) {
        case "RSA-OAEP":
          var mdSize = /(\d+)$/.exec(algorithm.hash.name)[1];
          return "RSA-OAEP".concat(mdSize !== "1" ? "-".concat(mdSize) : "");

        case "RSASSA-PKCS1-V1_5":
          return "RS".concat(/(\d+)$/.exec(algorithm.hash.name)[1]);

        case "RSA-PSS":
          return "PS".concat(/(\d+)$/.exec(algorithm.hash.name)[1]);

        case "RSAES-PKCS1-V1_5":
          return "PS1";

        default:
          throw new core__namespace.OperationError("algorithm: Is not recognized");
      }
    }
  }, {
    key: "exportAsmKey",
    value: function exportAsmKey(asmKey) {
      var key;

      if (asmKey.length > 2) {
        var privateKey = new core__namespace.asn1.RsaPrivateKey();
        privateKey.privateExponent = asmKey[2].buffer;
        privateKey.prime1 = asmKey[3].buffer;
        privateKey.prime2 = asmKey[4].buffer;
        privateKey.exponent1 = asmKey[5].buffer;
        privateKey.exponent2 = asmKey[6].buffer;
        privateKey.coefficient = asmKey[7].buffer;
        key = privateKey;
      } else {
        key = new core__namespace.asn1.RsaPublicKey();
      }

      key.modulus = asmKey[0].buffer;
      key.publicExponent = asmKey[1][1] === 1 ? asmKey[1].buffer.slice(1) : asmKey[1].buffer.slice(3);
      return key;
    }
  }, {
    key: "importAsmKey",
    value: function importAsmKey(key) {
      var expPadding = new Uint8Array(4 - key.publicExponent.byteLength);
      var asmKey = [new Uint8Array(key.modulus), concat(expPadding, new Uint8Array(key.publicExponent))];

      if (key instanceof core__namespace.asn1.RsaPrivateKey) {
        asmKey.push(new Uint8Array(key.privateExponent));
        asmKey.push(new Uint8Array(key.prime1));
        asmKey.push(new Uint8Array(key.prime2));
        asmKey.push(new Uint8Array(key.exponent1));
        asmKey.push(new Uint8Array(key.exponent2));
        asmKey.push(new Uint8Array(key.coefficient));
      }

      return asmKey;
    }
  }]);

  return RsaCrypto;
}();

RsaCrypto.RsaSsa = "RSASSA-PKCS1-v1_5";
RsaCrypto.RsaPss = "RSA-PSS";
RsaCrypto.RsaOaep = "RSA-OAEP";
RsaCrypto.privateUsages = ["sign", "decrypt", "unwrapKey"];
RsaCrypto.publicUsages = ["verify", "encrypt", "wrapKey"];

var ShaCrypto = /*#__PURE__*/function () {
  function ShaCrypto() {
    _classCallCheck(this, ShaCrypto);
  }

  _createClass(ShaCrypto, null, [{
    key: "getDigest",
    value: function getDigest(name) {
      switch (name) {
        case "SHA-1":
          return new asmCrypto__namespace.Sha1();

        case "SHA-256":
          return new asmCrypto__namespace.Sha256();

        case "SHA-512":
          return new asmCrypto__namespace.Sha512();

        default:
          throw new core__namespace.AlgorithmError("keyAlgorithm.hash: Is not recognized");
      }
    }
  }, {
    key: "digest",
    value: function digest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
        var mech, result;
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                mech = this.getDigest(algorithm.name);
                result = mech.process(core__namespace.BufferSourceConverter.toUint8Array(data)).finish().result;
                return _context35.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 3:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));
    }
  }]);

  return ShaCrypto;
}();

var RsaOaepProvider = /*#__PURE__*/function (_core__namespace$RsaO) {
  _inherits(RsaOaepProvider, _core__namespace$RsaO);

  var _super9 = _createSuper(RsaOaepProvider);

  function RsaOaepProvider() {
    _classCallCheck(this, RsaOaepProvider);

    return _super9.apply(this, arguments);
  }

  _createClass(RsaOaepProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
        return _regeneratorRuntime().wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                return _context36.abrupt("return", RsaCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
        return _regeneratorRuntime().wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                return _context37.abrupt("return", RsaCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
        return _regeneratorRuntime().wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                return _context38.abrupt("return", RsaCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
        return _regeneratorRuntime().wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                return _context39.abrupt("return", this.cipher(algorithm, key, data));

              case 1:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
        return _regeneratorRuntime().wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                return _context40.abrupt("return", this.cipher(algorithm, key, data));

              case 1:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(RsaOaepProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      RsaCrypto.checkCryptoKey(key);
    }
  }, {
    key: "cipher",
    value: function cipher(algorithm, key, data) {
      var digest = ShaCrypto.getDigest(key.algorithm.hash.name);
      var label;

      if (algorithm.label) {
        label = core__namespace.BufferSourceConverter.toUint8Array(algorithm.label);
      }

      var cipher = new asmCrypto__namespace.RSA_OAEP(key.data, digest, label);
      var res;
      var u8Data = core__namespace.BufferSourceConverter.toUint8Array(data);

      if (key.type === "public") {
        res = cipher.encrypt(u8Data);
      } else {
        res = cipher.decrypt(u8Data);
      }

      return core__namespace.BufferSourceConverter.toArrayBuffer(res);
    }
  }]);

  return RsaOaepProvider;
}(core__namespace.RsaOaepProvider);

var RsaPssProvider = /*#__PURE__*/function (_core__namespace$RsaP) {
  _inherits(RsaPssProvider, _core__namespace$RsaP);

  var _super10 = _createSuper(RsaPssProvider);

  function RsaPssProvider() {
    _classCallCheck(this, RsaPssProvider);

    return _super10.apply(this, arguments);
  }

  _createClass(RsaPssProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
        return _regeneratorRuntime().wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                return _context41.abrupt("return", RsaCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
        return _regeneratorRuntime().wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                return _context42.abrupt("return", RsaCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                return _context43.abrupt("return", RsaCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      }));
    }
  }, {
    key: "onSign",
    value: function onSign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
        var rsa, result;
        return _regeneratorRuntime().wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                rsa = new asmCrypto__namespace.RSA_PSS(key.data, ShaCrypto.getDigest(key.algorithm.hash.name), algorithm.saltLength);
                result = rsa.sign(core__namespace.BufferSourceConverter.toUint8Array(data));
                return _context44.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 3:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44);
      }));
    }
  }, {
    key: "onVerify",
    value: function onVerify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var rsa;
        return _regeneratorRuntime().wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                rsa = new asmCrypto__namespace.RSA_PSS(key.data, ShaCrypto.getDigest(key.algorithm.hash.name), algorithm.saltLength);
                _context45.prev = 1;
                rsa.verify(core__namespace.BufferSourceConverter.toUint8Array(signature), core__namespace.BufferSourceConverter.toUint8Array(data));
                _context45.next = 8;
                break;

              case 5:
                _context45.prev = 5;
                _context45.t0 = _context45["catch"](1);
                return _context45.abrupt("return", false);

              case 8:
                return _context45.abrupt("return", true);

              case 9:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, null, [[1, 5]]);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(RsaPssProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      RsaCrypto.checkCryptoKey(key);
    }
  }]);

  return RsaPssProvider;
}(core__namespace.RsaPssProvider);

var RsaSsaProvider = /*#__PURE__*/function (_core__namespace$RsaS) {
  _inherits(RsaSsaProvider, _core__namespace$RsaS);

  var _super11 = _createSuper(RsaSsaProvider);

  function RsaSsaProvider() {
    _classCallCheck(this, RsaSsaProvider);

    return _super11.apply(this, arguments);
  }

  _createClass(RsaSsaProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
        return _regeneratorRuntime().wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                return _context46.abrupt("return", RsaCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
        return _regeneratorRuntime().wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                return _context47.abrupt("return", RsaCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
        return _regeneratorRuntime().wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                return _context48.abrupt("return", RsaCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48);
      }));
    }
  }, {
    key: "onSign",
    value: function onSign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
        var rsa, result;
        return _regeneratorRuntime().wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                rsa = new asmCrypto__namespace.RSA_PKCS1_v1_5(key.data, ShaCrypto.getDigest(key.algorithm.hash.name));
                result = rsa.sign(core__namespace.BufferSourceConverter.toUint8Array(data));
                return _context49.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 3:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49);
      }));
    }
  }, {
    key: "onVerify",
    value: function onVerify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
        var rsa;
        return _regeneratorRuntime().wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                rsa = new asmCrypto__namespace.RSA_PKCS1_v1_5(key.data, ShaCrypto.getDigest(key.algorithm.hash.name));
                _context50.prev = 1;
                rsa.verify(core__namespace.BufferSourceConverter.toUint8Array(signature), core__namespace.BufferSourceConverter.toUint8Array(data));
                _context50.next = 8;
                break;

              case 5:
                _context50.prev = 5;
                _context50.t0 = _context50["catch"](1);
                return _context50.abrupt("return", false);

              case 8:
                return _context50.abrupt("return", true);

              case 9:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, null, [[1, 5]]);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(RsaSsaProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      RsaCrypto.checkCryptoKey(key);
    }
  }]);

  return RsaSsaProvider;
}(core__namespace.RsaSsaProvider);

var RsaEsProvider = /*#__PURE__*/function (_core__namespace$Prov) {
  _inherits(RsaEsProvider, _core__namespace$Prov);

  var _super12 = _createSuper(RsaEsProvider);

  function RsaEsProvider() {
    var _this5;

    _classCallCheck(this, RsaEsProvider);

    _this5 = _super12.apply(this, arguments);
    _this5.name = "RSAES-PKCS1-v1_5";
    _this5.usages = {
      publicKey: ["encrypt", "wrapKey"],
      privateKey: ["decrypt", "unwrapKey"]
    };
    _this5.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    return _this5;
  }

  _createClass(RsaEsProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
        return _regeneratorRuntime().wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                return _context51.abrupt("return", RsaCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51);
      }));
    }
  }, {
    key: "checkGenerateKeyParams",
    value: function checkGenerateKeyParams(algorithm) {
      this.checkRequiredProperty(algorithm, "publicExponent");

      if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {
        throw new TypeError("publicExponent: Missing or not a Uint8Array");
      }

      var publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);

      if (!(publicExponent === "Aw==" || publicExponent === "AQAB")) {
        throw new TypeError("publicExponent: Must be [3] or [1,0,1]");
      }

      this.checkRequiredProperty(algorithm, "modulusLength");

      switch (algorithm.modulusLength) {
        case 1024:
        case 2048:
        case 4096:
          break;

        default:
          throw new TypeError("modulusLength: Must be 1024, 2048, or 4096");
      }
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
        var EM, k, offset;
        return _regeneratorRuntime().wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                EM = new asmCrypto__namespace.RSA(key.data).decrypt(new asmCrypto__namespace.BigNumber(core__namespace.BufferSourceConverter.toUint8Array(data))).result;
                k = key.algorithm.modulusLength >> 3;

                if (!(data.byteLength !== k)) {
                  _context52.next = 4;
                  break;
                }

                throw new core__namespace.CryptoError("Decryption error. Encrypted message size doesn't match to key length");

              case 4:
                offset = 0;

                if (!(EM[offset++] || EM[offset++] !== 2)) {
                  _context52.next = 7;
                  break;
                }

                throw new core__namespace.CryptoError("Decryption error");

              case 7:
                if (!(EM[offset++] === 0)) {
                  _context52.next = 9;
                  break;
                }

                return _context52.abrupt("break", 10);

              case 9:
                if (offset < EM.length) {
                  _context52.next = 7;
                  break;
                }

              case 10:
                if (!(offset < 11)) {
                  _context52.next = 12;
                  break;
                }

                throw new core__namespace.CryptoError("Decryption error. PS is less than 8 octets.");

              case 12:
                if (!(offset === EM.length)) {
                  _context52.next = 14;
                  break;
                }

                throw new core__namespace.CryptoError("Decryption error. There is no octet with hexadecimal value 0x00 to separate PS from M");

              case 14:
                return _context52.abrupt("return", EM.buffer.slice(offset));

              case 15:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
        var k, psLen, PS, EM, result;
        return _regeneratorRuntime().wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                k = key.algorithm.modulusLength >> 3;

                if (!(data.byteLength > k - 11)) {
                  _context53.next = 3;
                  break;
                }

                throw new core__namespace.CryptoError("Message too long");

              case 3:
                psLen = k - data.byteLength - 3;
                PS = RsaCrypto.randomNonZeroValues(new Uint8Array(psLen));
                EM = new Uint8Array(k);
                EM[0] = 0;
                EM[1] = 2;
                EM.set(PS, 2);
                EM[2 + psLen] = 0;
                EM.set(new Uint8Array(data), 3 + psLen);
                result = new asmCrypto__namespace.RSA(key.data).encrypt(new asmCrypto__namespace.BigNumber(EM)).result;
                return _context53.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 13:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
        return _regeneratorRuntime().wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                return _context54.abrupt("return", RsaCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
        var key;
        return _regeneratorRuntime().wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                _context55.next = 2;
                return RsaCrypto.importKey(format, keyData, Object.assign(Object.assign({}, algorithm), {
                  name: this.name
                }), extractable, keyUsages);

              case 2:
                key = _context55.sent;
                return _context55.abrupt("return", key);

              case 4:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(RsaEsProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      RsaCrypto.checkCryptoKey(key);
    }
  }, {
    key: "prepareSignData",
    value: function prepareSignData(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
        var crypto;
        return _regeneratorRuntime().wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                crypto = new Crypto();
                return _context56.abrupt("return", crypto.subtle.digest(algorithm.hash, data));

              case 2:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56);
      }));
    }
  }]);

  return RsaEsProvider;
}(core__namespace.ProviderCrypto);

var namedOIDs = {
  "1.2.840.10045.3.1.7": "P-256",
  "P-256": "1.2.840.10045.3.1.7",
  "1.3.132.0.34": "P-384",
  "P-384": "1.3.132.0.34",
  "1.3.132.0.35": "P-521",
  "P-521": "1.3.132.0.35",
  "1.3.132.0.10": "K-256",
  "K-256": "1.3.132.0.10",
  "1.3.36.3.3.2.8.1.1.7": "brainpoolP256r1",
  "brainpoolP256r1": "1.3.36.3.3.2.8.1.1.7",
  "1.3.36.3.3.2.8.1.1.11": "brainpoolP384r1",
  "brainpoolP384r1": "1.3.36.3.3.2.8.1.1.11",
  "1.3.36.3.3.2.8.1.1.13": "brainpoolP512r1",
  "brainpoolP512r1": "1.3.36.3.3.2.8.1.1.13"
};

function getOidByNamedCurve$1(namedCurve) {
  var oid = namedOIDs[namedCurve];

  if (!oid) {
    throw new core__namespace.OperationError("Cannot convert WebCrypto named curve '".concat(namedCurve, "' to OID"));
  }

  return oid;
}

var EcCryptoKey = /*#__PURE__*/function (_CryptoKey3) {
  _inherits(EcCryptoKey, _CryptoKey3);

  var _super13 = _createSuper(EcCryptoKey);

  function EcCryptoKey(algorithm, extractable, type, usages, data) {
    var _this6;

    _classCallCheck(this, EcCryptoKey);

    _this6 = _super13.call(this, algorithm, extractable, type, usages);
    _this6.data = data;
    return _this6;
  }

  return _createClass(EcCryptoKey);
}(CryptoKey);

var EcCrypto = /*#__PURE__*/function () {
  function EcCrypto() {
    _classCallCheck(this, EcCrypto);
  }

  _createClass(EcCrypto, null, [{
    key: "checkLib",
    value: function checkLib() {
      if (typeof elliptic__namespace === "undefined") {
        throw new core__namespace.OperationError("Cannot implement EC mechanism. Add 'https://peculiarventures.github.io/pv-webcrypto-tests/src/elliptic.js' script to your project");
      }
    }
  }, {
    key: "generateKey",
    value: function generateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
        var _this7 = this;

        var key, ecKey, prvKey, pubKey;
        return _regeneratorRuntime().wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                this.checkLib();
                key = this.initEcKey(algorithm.namedCurve);
                ecKey = key.genKeyPair();
                ecKey.getPublic();
                prvKey = new EcCryptoKey(Object.assign({}, algorithm), extractable, "private", keyUsages.filter(function (usage) {
                  return ~_this7.privateUsages.indexOf(usage);
                }), ecKey);
                pubKey = new EcCryptoKey(Object.assign({}, algorithm), true, "public", keyUsages.filter(function (usage) {
                  return ~_this7.publicUsages.indexOf(usage);
                }), ecKey);
                return _context57.abrupt("return", {
                  privateKey: prvKey,
                  publicKey: pubKey
                });

              case 7:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key) {
      if (!(key instanceof EcCryptoKey)) {
        throw new TypeError("key: Is not EcCryptoKey");
      }
    }
  }, {
    key: "concat",
    value: function concat() {
      for (var _len7 = arguments.length, buf = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        buf[_key7] = arguments[_key7];
      }

      var res = new Uint8Array(buf.map(function (item) {
        return item.length;
      }).reduce(function (prev, cur) {
        return prev + cur;
      }));
      var offset = 0;
      buf.forEach(function (item, index) {
        for (var i = 0; i < item.length; i++) {
          res[offset + i] = item[i];
        }

        offset += item.length;
      });
      return res;
    }
  }, {
    key: "exportKey",
    value: function exportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
        return _regeneratorRuntime().wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                this.checkLib();
                _context58.t0 = format;
                _context58.next = _context58.t0 === "pkcs8" ? 4 : _context58.t0 === "spki" ? 5 : _context58.t0 === "jwk" ? 6 : _context58.t0 === "raw" ? 7 : 8;
                break;

              case 4:
                return _context58.abrupt("return", this.exportPkcs8Key(key));

              case 5:
                return _context58.abrupt("return", this.exportSpkiKey(key));

              case 6:
                return _context58.abrupt("return", this.exportJwkKey(key));

              case 7:
                return _context58.abrupt("return", new Uint8Array(key.data.getPublic("der")).buffer);

              case 8:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'raw, 'pkcs8' or 'spki'");

              case 9:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
        var ecKey, key;
        return _regeneratorRuntime().wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                this.checkLib();
                _context59.t0 = format;
                _context59.next = _context59.t0 === "pkcs8" ? 4 : _context59.t0 === "spki" ? 6 : _context59.t0 === "raw" ? 8 : _context59.t0 === "jwk" ? 10 : 12;
                break;

              case 4:
                ecKey = this.importPkcs8Key(keyData, algorithm.namedCurve);
                return _context59.abrupt("break", 13);

              case 6:
                ecKey = this.importSpkiKey(keyData, algorithm.namedCurve);
                return _context59.abrupt("break", 13);

              case 8:
                ecKey = this.importEcKey(new core__namespace.asn1.EcPublicKey(keyData), algorithm.namedCurve);
                return _context59.abrupt("break", 13);

              case 10:
                ecKey = this.importJwkKey(keyData);
                return _context59.abrupt("break", 13);

              case 12:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'");

              case 13:
                key = new EcCryptoKey(Object.assign({}, algorithm), extractable, ecKey.priv ? "private" : "public", keyUsages, ecKey);
                return _context59.abrupt("return", key);

              case 15:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));
    }
  }, {
    key: "getNamedCurve",
    value: function getNamedCurve(wcNamedCurve) {
      var crv = wcNamedCurve.toUpperCase();
      var res = "";

      if (["P-256", "P-384", "P-521"].indexOf(crv) > -1) {
        res = crv.replace("-", "").toLowerCase();
      } else if (crv === "K-256") {
        res = "secp256k1";
      } else if (["brainpoolP256r1", "brainpoolP384r1", "brainpoolP512r1"].includes(wcNamedCurve)) {
        res = wcNamedCurve;
      } else {
        throw new core__namespace.OperationError("Unsupported named curve '".concat(wcNamedCurve, "'"));
      }

      return res;
    }
  }, {
    key: "initEcKey",
    value: function initEcKey(namedCurve) {
      return elliptic__namespace.ec(this.getNamedCurve(namedCurve));
    }
  }, {
    key: "exportPkcs8Key",
    value: function exportPkcs8Key(key) {
      var keyInfo = new core__namespace.asn1.PrivateKeyInfo();
      keyInfo.privateKeyAlgorithm.algorithm = this.ASN_ALGORITHM;
      keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnConvert.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(key.algorithm.namedCurve)));
      keyInfo.privateKey = asn1Schema.AsnConvert.serialize(this.exportEcKey(key));
      return asn1Schema.AsnConvert.serialize(keyInfo);
    }
  }, {
    key: "importPkcs8Key",
    value: function importPkcs8Key(data, namedCurve) {
      var keyInfo = asn1Schema.AsnConvert.parse(data, core__namespace.asn1.PrivateKeyInfo);
      var privateKey = asn1Schema.AsnConvert.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);
      return this.importEcKey(privateKey, namedCurve);
    }
  }, {
    key: "importSpkiKey",
    value: function importSpkiKey(data, namedCurve) {
      var keyInfo = asn1Schema.AsnConvert.parse(data, core__namespace.asn1.PublicKeyInfo);
      var publicKey = new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);
      return this.importEcKey(publicKey, namedCurve);
    }
  }, {
    key: "exportSpkiKey",
    value: function exportSpkiKey(key) {
      var publicKey = new core__namespace.asn1.EcPublicKey(new Uint8Array(key.data.getPublic("der")).buffer);
      var keyInfo = new core__namespace.asn1.PublicKeyInfo();
      keyInfo.publicKeyAlgorithm.algorithm = this.ASN_ALGORITHM;
      keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnConvert.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(key.algorithm.namedCurve)));
      keyInfo.publicKey = publicKey.value;
      return asn1Schema.AsnConvert.serialize(keyInfo);
    }
  }, {
    key: "importJwkKey",
    value: function importJwkKey(data) {
      var key;

      if (data.d) {
        key = jsonSchema.JsonParser.fromJSON(data, {
          targetSchema: core__namespace.asn1.EcPrivateKey
        });
      } else {
        key = jsonSchema.JsonParser.fromJSON(data, {
          targetSchema: core__namespace.asn1.EcPublicKey
        });
      }

      return this.importEcKey(key, data.crv);
    }
  }, {
    key: "exportJwkKey",
    value: function exportJwkKey(key) {
      var asnKey = this.exportEcKey(key);
      var jwk = jsonSchema.JsonSerializer.toJSON(asnKey);
      jwk.ext = true;
      jwk.key_ops = key.usages;
      jwk.crv = key.algorithm.namedCurve;
      jwk.kty = "EC";
      return jwk;
    }
  }, {
    key: "exportEcKey",
    value: function exportEcKey(ecKey) {
      if (ecKey.type === "private") {
        var privateKey = new core__namespace.asn1.EcPrivateKey();
        var point = new Uint8Array(ecKey.data.getPrivate("der").toArray());
        var pointPad = new Uint8Array(this.getPointSize(ecKey.algorithm.namedCurve) - point.length);
        privateKey.privateKey = concat(pointPad, point);
        privateKey.publicKey = new Uint8Array(ecKey.data.getPublic("der"));
        return privateKey;
      } else if (ecKey.data.pub) {
        return new core__namespace.asn1.EcPublicKey(new Uint8Array(ecKey.data.getPublic("der")).buffer);
      } else {
        throw new Error("Cannot get private or public key");
      }
    }
  }, {
    key: "importEcKey",
    value: function importEcKey(key, namedCurve) {
      var ecKey = this.initEcKey(namedCurve);

      if (key instanceof core__namespace.asn1.EcPublicKey) {
        return ecKey.keyFromPublic(new Uint8Array(key.value));
      }

      return ecKey.keyFromPrivate(new Uint8Array(key.privateKey));
    }
  }, {
    key: "getPointSize",
    value: function getPointSize(namedCurve) {
      switch (namedCurve) {
        case "P-256":
        case "K-256":
          return 32;

        case "P-384":
          return 48;

        case "P-521":
          return 66;
      }

      throw new Error("namedCurve: Is not recognized");
    }
  }]);

  return EcCrypto;
}();

EcCrypto.privateUsages = ["sign", "deriveKey", "deriveBits"];
EcCrypto.publicUsages = ["verify"];
EcCrypto.ASN_ALGORITHM = "1.2.840.10045.2.1";

var EcdhProvider = /*#__PURE__*/function (_core__namespace$Ecdh) {
  _inherits(EcdhProvider, _core__namespace$Ecdh);

  var _super14 = _createSuper(EcdhProvider);

  function EcdhProvider() {
    var _this8;

    _classCallCheck(this, EcdhProvider);

    _this8 = _super14.apply(this, arguments);
    _this8.namedCurves = ["P-256", "P-384", "P-521", "K-256", "brainpoolP256r1", "brainpoolP384r1", "brainpoolP512r1"];
    return _this8;
  }

  _createClass(EcdhProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
        return _regeneratorRuntime().wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                return _context60.abrupt("return", EcCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
        return _regeneratorRuntime().wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                return _context61.abrupt("return", EcCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
        return _regeneratorRuntime().wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                return _context62.abrupt("return", EcCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62);
      }));
    }
  }, {
    key: "onDeriveBits",
    value: function onDeriveBits(algorithm, baseKey, length) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
        var shared, array, len, buf;
        return _regeneratorRuntime().wrap(function _callee63$(_context63) {
          while (1) {
            switch (_context63.prev = _context63.next) {
              case 0:
                EcCrypto.checkLib();
                shared = baseKey.data.derive(algorithm.public.data.getPublic());
                array = new Uint8Array(shared.toArray());
                len = array.length;
                len = len > 32 ? len > 48 ? 66 : 48 : 32;

                if (array.length < len) {
                  array = EcCrypto.concat(new Uint8Array(len - array.length), array);
                }

                buf = array.slice(0, length / 8).buffer;
                return _context63.abrupt("return", buf);

              case 8:
              case "end":
                return _context63.stop();
            }
          }
        }, _callee63);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(EcdhProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      EcCrypto.checkCryptoKey(key);
    }
  }]);

  return EcdhProvider;
}(core__namespace.EcdhProvider);

function b2a(buffer) {
  var buf = new Uint8Array(buffer);
  var res = [];

  for (var i = 0; i < buf.length; i++) {
    res.push(buf[i]);
  }

  return res;
}

var EcdsaProvider = /*#__PURE__*/function (_core__namespace$Ecds) {
  _inherits(EcdsaProvider, _core__namespace$Ecds);

  var _super15 = _createSuper(EcdsaProvider);

  function EcdsaProvider() {
    var _this9;

    _classCallCheck(this, EcdsaProvider);

    _this9 = _super15.apply(this, arguments);
    _this9.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512", "SHA3-256", "SHA3-384", "SHA3-512"];
    _this9.namedCurves = ["P-256", "P-384", "P-521", "K-256", "brainpoolP256r1", "brainpoolP384r1", "brainpoolP512r1"];
    return _this9;
  }

  _createClass(EcdsaProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
        return _regeneratorRuntime().wrap(function _callee64$(_context64) {
          while (1) {
            switch (_context64.prev = _context64.next) {
              case 0:
                return _context64.abrupt("return", EcCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context64.stop();
            }
          }
        }, _callee64);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
        return _regeneratorRuntime().wrap(function _callee65$(_context65) {
          while (1) {
            switch (_context65.prev = _context65.next) {
              case 0:
                return _context65.abrupt("return", EcCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context65.stop();
            }
          }
        }, _callee65);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
        return _regeneratorRuntime().wrap(function _callee66$(_context66) {
          while (1) {
            switch (_context66.prev = _context66.next) {
              case 0:
                return _context66.abrupt("return", EcCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context66.stop();
            }
          }
        }, _callee66);
      }));
    }
  }, {
    key: "onSign",
    value: function onSign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
        var crypto, array, hash, signature, asnSignature;
        return _regeneratorRuntime().wrap(function _callee67$(_context67) {
          while (1) {
            switch (_context67.prev = _context67.next) {
              case 0:
                EcCrypto.checkLib();
                crypto = new Crypto();
                _context67.next = 4;
                return crypto.subtle.digest(algorithm.hash, data);

              case 4:
                hash = _context67.sent;
                array = b2a(hash);
                _context67.next = 8;
                return key.data.sign(array);

              case 8:
                signature = _context67.sent;
                asnSignature = new core__namespace.asn1.EcDsaSignature();
                asnSignature.r = new Uint8Array(signature.r.toArray()).buffer;
                asnSignature.s = new Uint8Array(signature.s.toArray()).buffer;
                return _context67.abrupt("return", asnSignature.toWebCryptoSignature());

              case 13:
              case "end":
                return _context67.stop();
            }
          }
        }, _callee67);
      }));
    }
  }, {
    key: "onVerify",
    value: function onVerify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
        var crypto, sig, hashedData, array;
        return _regeneratorRuntime().wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                EcCrypto.checkLib();
                crypto = new Crypto();
                sig = {
                  r: new Uint8Array(signature.slice(0, signature.byteLength / 2)),
                  s: new Uint8Array(signature.slice(signature.byteLength / 2))
                };
                _context68.next = 5;
                return crypto.subtle.digest(algorithm.hash, data);

              case 5:
                hashedData = _context68.sent;
                array = b2a(hashedData);
                return _context68.abrupt("return", key.data.verify(array, sig));

              case 8:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(EcdsaProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      EcCrypto.checkCryptoKey(key);
    }
  }]);

  return EcdsaProvider;
}(core__namespace.EcdsaProvider);

var edOIDs = (_edOIDs = {}, _defineProperty(_edOIDs, core__namespace.asn1.idEd448, "Ed448"), _defineProperty(_edOIDs, "ed448", core__namespace.asn1.idEd448), _defineProperty(_edOIDs, core__namespace.asn1.idX448, "X448"), _defineProperty(_edOIDs, "x448", core__namespace.asn1.idX448), _defineProperty(_edOIDs, core__namespace.asn1.idEd25519, "Ed25519"), _defineProperty(_edOIDs, "ed25519", core__namespace.asn1.idEd25519), _defineProperty(_edOIDs, core__namespace.asn1.idX25519, "X25519"), _defineProperty(_edOIDs, "x25519", core__namespace.asn1.idX25519), _edOIDs);

function getOidByNamedCurve(namedCurve) {
  var oid = edOIDs[namedCurve.toLowerCase()];

  if (!oid) {
    throw new core__namespace.OperationError("Cannot convert WebCrypto named curve '".concat(namedCurve, "' to OID"));
  }

  return oid;
}

var EdPrivateKey = /*#__PURE__*/function (_CryptoKey4) {
  _inherits(EdPrivateKey, _CryptoKey4);

  var _super16 = _createSuper(EdPrivateKey);

  function EdPrivateKey(algorithm, extractable, usages, data) {
    var _this10;

    _classCallCheck(this, EdPrivateKey);

    _this10 = _super16.call(this, algorithm, extractable, "private", usages);
    _this10.data = data;
    return _this10;
  }

  _createClass(EdPrivateKey, [{
    key: "toJSON",
    value: function toJSON() {
      var json = {
        kty: "OKP",
        crv: this.algorithm.namedCurve,
        key_ops: this.usages,
        ext: this.extractable
      };
      return Object.assign(json, {
        d: pvtsutils.Convert.ToBase64Url(pvtsutils.Convert.FromHex(/^ed/i.test(json.crv) ? this.data.getSecret("hex") : this.data.getPrivate("hex")))
      });
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json.d) {
        throw new core__namespace.OperationError("Cannot get private data from JWK. Property 'd' is required");
      }

      if (!json.crv) {
        throw new core__namespace.OperationError("Cannot get named curve from JWK. Property 'crv' is required");
      }

      var hexPrivateKey = pvtsutils.Convert.ToHex(pvtsutils.Convert.FromBase64Url(json.d));
      {
        var eddsa = new elliptic__namespace.eddsa("ed25519");
        this.data = eddsa.keyFromSecret(hexPrivateKey);
      }
      return this;
    }
  }]);

  return EdPrivateKey;
}(CryptoKey);

var EdPublicKey = /*#__PURE__*/function (_CryptoKey5) {
  _inherits(EdPublicKey, _CryptoKey5);

  var _super17 = _createSuper(EdPublicKey);

  function EdPublicKey(algorithm, extractable, usages, data) {
    var _this11;

    _classCallCheck(this, EdPublicKey);

    _this11 = _super17.call(this, algorithm, extractable, "public", usages);
    _this11.data = data;
    return _this11;
  }

  _createClass(EdPublicKey, [{
    key: "toJSON",
    value: function toJSON() {
      var json = {
        kty: "OKP",
        crv: this.algorithm.namedCurve,
        key_ops: this.usages,
        ext: this.extractable
      };
      return Object.assign(json, {
        x: pvtsutils.Convert.ToBase64Url(pvtsutils.Convert.FromHex(this.data.getPublic("hex")))
      });
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json.crv) {
        throw new core__namespace.OperationError("Cannot get named curve from JWK. Property 'crv' is required");
      }

      if (!json.x) {
        throw new core__namespace.OperationError("Cannot get property from JWK. Property 'x' is required");
      }

      var hexPublicKey = pvtsutils.Convert.ToHex(pvtsutils.Convert.FromBase64Url(json.x));

      if (/^ed/i.test(json.crv)) {
        var eddsa = new elliptic__namespace.eddsa(json.crv.toLowerCase());
        this.data = eddsa.keyFromPublic(hexPublicKey, "hex");
      } else {
        var ecdhEs = elliptic__namespace.ec(json.crv.replace(/^x/i, "curve"));
        this.data = ecdhEs.keyFromPublic(hexPublicKey, "hex");
      }

      return this;
    }
  }]);

  return EdPublicKey;
}(CryptoKey);

var EdCrypto = /*#__PURE__*/function () {
  function EdCrypto() {
    _classCallCheck(this, EdCrypto);
  }

  _createClass(EdCrypto, null, [{
    key: "checkLib",
    value: function checkLib() {
      if (typeof elliptic__namespace === "undefined") {
        throw new core__namespace.OperationError("Cannot implement EC mechanism. Add 'https://peculiarventures.github.io/pv-webcrypto-tests/src/elliptic.js' script to your project");
      }
    }
  }, {
    key: "concat",
    value: function concat() {
      for (var _len8 = arguments.length, buf = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        buf[_key8] = arguments[_key8];
      }

      var res = new Uint8Array(buf.map(function (item) {
        return item.length;
      }).reduce(function (prev, cur) {
        return prev + cur;
      }));
      var offset = 0;
      buf.forEach(function (item, index) {
        for (var i = 0; i < item.length; i++) {
          res[offset + i] = item[i];
        }

        offset += item.length;
      });
      return res;
    }
  }, {
    key: "generateKey",
    value: function generateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
        var _this12 = this;

        var curve, edKey, raw, eddsa, prvKey, pubKey;
        return _regeneratorRuntime().wrap(function _callee69$(_context69) {
          while (1) {
            switch (_context69.prev = _context69.next) {
              case 0:
                this.checkLib();
                curve = "ed25519";
                raw = exports.nativeCrypto.getRandomValues(new Uint8Array(32));
                eddsa = new elliptic__namespace.eddsa(curve);
                edKey = eddsa.keyFromSecret(raw);
                prvKey = new EdPrivateKey(algorithm, extractable, keyUsages.filter(function (usage) {
                  return _this12.privateKeyUsages.indexOf(usage) !== -1;
                }), edKey);
                pubKey = new EdPublicKey(algorithm, true, keyUsages.filter(function (usage) {
                  return _this12.publicKeyUsages.indexOf(usage) !== -1;
                }), edKey);
                return _context69.abrupt("return", {
                  privateKey: prvKey,
                  publicKey: pubKey
                });

              case 8:
              case "end":
                return _context69.stop();
            }
          }
        }, _callee69, this);
      }));
    }
  }, {
    key: "sign",
    value: function sign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
        var array, signature;
        return _regeneratorRuntime().wrap(function _callee70$(_context70) {
          while (1) {
            switch (_context70.prev = _context70.next) {
              case 0:
                this.checkLib();
                array = b2a(data);
                signature = key.data.sign(array).toHex();
                return _context70.abrupt("return", pvtsutils.Convert.FromHex(signature));

              case 4:
              case "end":
                return _context70.stop();
            }
          }
        }, _callee70, this);
      }));
    }
  }, {
    key: "verify",
    value: function verify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
        var array, ok;
        return _regeneratorRuntime().wrap(function _callee71$(_context71) {
          while (1) {
            switch (_context71.prev = _context71.next) {
              case 0:
                this.checkLib();
                array = b2a(data);
                ok = key.data.verify(array, pvtsutils.Convert.ToHex(signature));
                return _context71.abrupt("return", ok);

              case 4:
              case "end":
                return _context71.stop();
            }
          }
        }, _callee71, this);
      }));
    }
  }, {
    key: "deriveBits",
    value: function deriveBits(algorithm, baseKey, length) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
        var key, ecdh, privateKey, publicHex, publicKey, shared, array, len, buf;
        return _regeneratorRuntime().wrap(function _callee72$(_context72) {
          while (1) {
            switch (_context72.prev = _context72.next) {
              case 0:
                this.checkLib();
                key = new Uint8Array(pvtsutils.Convert.FromHex(baseKey.data.getSecret("hex")));
                ecdh = new elliptic__namespace.ec("curve25519");
                privateKey = ecdh.keyFromPrivate(pvtsutils.Convert.ToHex(key), "hex");
                publicHex = algorithm.public.data.getPublic("hex");
                new Uint8Array(pvtsutils.Convert.FromHex(publicHex));
                publicKey = algorithm.public.data.getPublic();
                shared = privateKey.derive(publicKey);
                array = new Uint8Array(shared.toArray());
                len = array.length;
                len = len > 32 ? len > 48 ? 66 : 48 : 32;

                if (array.length < len) {
                  array = EdCrypto.concat(new Uint8Array(len - array.length), array);
                }

                buf = array.slice(0, length / 8).buffer;
                return _context72.abrupt("return", buf);

              case 14:
              case "end":
                return _context72.stop();
            }
          }
        }, _callee72, this);
      }));
    }
  }, {
    key: "exportKey",
    value: function exportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
        var raw, keyInfo, _raw, _keyInfo;

        return _regeneratorRuntime().wrap(function _callee73$(_context73) {
          while (1) {
            switch (_context73.prev = _context73.next) {
              case 0:
                this.checkLib();
                _context73.t0 = format.toLowerCase();
                _context73.next = _context73.t0 === "jwk" ? 4 : _context73.t0 === "pkcs8" ? 5 : _context73.t0 === "spki" ? 10 : _context73.t0 === "raw" ? 15 : 16;
                break;

              case 4:
                return _context73.abrupt("return", jsonSchema.JsonSerializer.toJSON(key));

              case 5:
                raw = pvtsutils.Convert.FromHex(key.data.getSecret("hex"));
                keyInfo = new core__namespace.asn1.PrivateKeyInfo();
                keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(key.algorithm.namedCurve);
                keyInfo.privateKey = asn1Schema.AsnConvert.serialize(new asn1Schema.OctetString(raw));
                return _context73.abrupt("return", asn1Schema.AsnConvert.serialize(keyInfo));

              case 10:
                _raw = pvtsutils.Convert.FromHex(key.data.getPublic("hex"));
                _keyInfo = new core__namespace.asn1.PublicKeyInfo();
                _keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(key.algorithm.namedCurve);
                _keyInfo.publicKey = _raw;
                return _context73.abrupt("return", asn1Schema.AsnConvert.serialize(_keyInfo));

              case 15:
                return _context73.abrupt("return", pvtsutils.Convert.FromHex(key.data.getPublic("hex")));

              case 16:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'raw', pkcs8' or 'spki'");

              case 17:
              case "end":
                return _context73.stop();
            }
          }
        }, _callee73, this);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
        var jwk, asnKey, keyInfo, _keyInfo2, _asnKey;

        return _regeneratorRuntime().wrap(function _callee74$(_context74) {
          while (1) {
            switch (_context74.prev = _context74.next) {
              case 0:
                this.checkLib();
                _context74.t0 = format.toLowerCase();
                _context74.next = _context74.t0 === "jwk" ? 4 : _context74.t0 === "raw" ? 13 : _context74.t0 === "spki" ? 14 : _context74.t0 === "pkcs8" ? 16 : 19;
                break;

              case 4:
                jwk = keyData;

                if (!jwk.d) {
                  _context74.next = 10;
                  break;
                }

                asnKey = jsonSchema.JsonParser.fromJSON(keyData, {
                  targetSchema: core__namespace.asn1.CurvePrivateKey
                });
                return _context74.abrupt("return", this.importPrivateKey(asnKey, algorithm, extractable, keyUsages));

              case 10:
                if (jwk.x) {
                  _context74.next = 12;
                  break;
                }

                throw new TypeError("keyData: Cannot get required 'x' field");

              case 12:
                return _context74.abrupt("return", this.importPublicKey(pvtsutils.Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages));

              case 13:
                return _context74.abrupt("return", this.importPublicKey(keyData, algorithm, extractable, keyUsages));

              case 14:
                keyInfo = asn1Schema.AsnConvert.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);
                return _context74.abrupt("return", this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages));

              case 16:
                _keyInfo2 = asn1Schema.AsnConvert.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);
                _asnKey = asn1Schema.AsnConvert.parse(_keyInfo2.privateKey, core__namespace.asn1.CurvePrivateKey);
                return _context74.abrupt("return", this.importPrivateKey(_asnKey, algorithm, extractable, keyUsages));

              case 19:
                throw new core__namespace.OperationError("format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'");

              case 20:
              case "end":
                return _context74.stop();
            }
          }
        }, _callee74, this);
      }));
    }
  }, {
    key: "importPrivateKey",
    value: function importPrivateKey(asnKey, algorithm, extractable, keyUsages) {
      var key = new EdPrivateKey(Object.assign({}, algorithm), extractable, keyUsages, null);
      key.fromJSON({
        crv: algorithm.namedCurve,
        d: pvtsutils.Convert.ToBase64Url(asnKey.d)
      });
      return key;
    }
  }, {
    key: "importPublicKey",
    value: function importPublicKey(asnKey, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
        var key;
        return _regeneratorRuntime().wrap(function _callee75$(_context75) {
          while (1) {
            switch (_context75.prev = _context75.next) {
              case 0:
                key = new EdPublicKey(Object.assign({}, algorithm), extractable, keyUsages, null);
                key.fromJSON({
                  crv: algorithm.namedCurve,
                  x: pvtsutils.Convert.ToBase64Url(asnKey)
                });
                return _context75.abrupt("return", key);

              case 3:
              case "end":
                return _context75.stop();
            }
          }
        }, _callee75);
      }));
    }
  }]);

  return EdCrypto;
}();

EdCrypto.publicKeyUsages = ["verify"];
EdCrypto.privateKeyUsages = ["sign", "deriveKey", "deriveBits"];

var EdDsaProvider = /*#__PURE__*/function (_core__namespace$EdDs) {
  _inherits(EdDsaProvider, _core__namespace$EdDs);

  var _super18 = _createSuper(EdDsaProvider);

  function EdDsaProvider() {
    var _this13;

    _classCallCheck(this, EdDsaProvider);

    _this13 = _super18.apply(this, arguments);
    _this13.namedCurves = ["Ed25519"];
    return _this13;
  }

  _createClass(EdDsaProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
        var keys;
        return _regeneratorRuntime().wrap(function _callee76$(_context76) {
          while (1) {
            switch (_context76.prev = _context76.next) {
              case 0:
                _context76.next = 2;
                return EdCrypto.generateKey({
                  name: this.name,
                  namedCurve: algorithm.namedCurve.replace(/^ed/i, "Ed")
                }, extractable, keyUsages);

              case 2:
                keys = _context76.sent;
                return _context76.abrupt("return", keys);

              case 4:
              case "end":
                return _context76.stop();
            }
          }
        }, _callee76, this);
      }));
    }
  }, {
    key: "onSign",
    value: function onSign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
        return _regeneratorRuntime().wrap(function _callee77$(_context77) {
          while (1) {
            switch (_context77.prev = _context77.next) {
              case 0:
                return _context77.abrupt("return", EdCrypto.sign(algorithm, key, new Uint8Array(data)));

              case 1:
              case "end":
                return _context77.stop();
            }
          }
        }, _callee77);
      }));
    }
  }, {
    key: "onVerify",
    value: function onVerify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
        return _regeneratorRuntime().wrap(function _callee78$(_context78) {
          while (1) {
            switch (_context78.prev = _context78.next) {
              case 0:
                return _context78.abrupt("return", EdCrypto.verify(algorithm, key, new Uint8Array(signature), new Uint8Array(data)));

              case 1:
              case "end":
                return _context78.stop();
            }
          }
        }, _callee78);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
        return _regeneratorRuntime().wrap(function _callee79$(_context79) {
          while (1) {
            switch (_context79.prev = _context79.next) {
              case 0:
                return _context79.abrupt("return", EdCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context79.stop();
            }
          }
        }, _callee79);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
        var key;
        return _regeneratorRuntime().wrap(function _callee80$(_context80) {
          while (1) {
            switch (_context80.prev = _context80.next) {
              case 0:
                _context80.next = 2;
                return EdCrypto.importKey(format, keyData, Object.assign(Object.assign({}, algorithm), {
                  name: this.name
                }), extractable, keyUsages);

              case 2:
                key = _context80.sent;
                return _context80.abrupt("return", key);

              case 4:
              case "end":
                return _context80.stop();
            }
          }
        }, _callee80, this);
      }));
    }
  }]);

  return EdDsaProvider;
}(core__namespace.EdDsaProvider);

var EcdhEsProvider = /*#__PURE__*/function (_core__namespace$Ecdh2) {
  _inherits(EcdhEsProvider, _core__namespace$Ecdh2);

  var _super19 = _createSuper(EcdhEsProvider);

  function EcdhEsProvider() {
    var _this14;

    _classCallCheck(this, EcdhEsProvider);

    _this14 = _super19.apply(this, arguments);
    _this14.namedCurves = ["X25519"];
    return _this14;
  }

  _createClass(EcdhEsProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
        var keys;
        return _regeneratorRuntime().wrap(function _callee81$(_context81) {
          while (1) {
            switch (_context81.prev = _context81.next) {
              case 0:
                _context81.next = 2;
                return EdCrypto.generateKey({
                  name: this.name,
                  namedCurve: algorithm.namedCurve.replace(/^x/i, "X")
                }, extractable, keyUsages);

              case 2:
                keys = _context81.sent;
                return _context81.abrupt("return", keys);

              case 4:
              case "end":
                return _context81.stop();
            }
          }
        }, _callee81, this);
      }));
    }
  }, {
    key: "onDeriveBits",
    value: function onDeriveBits(algorithm, baseKey, length) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
        var bits;
        return _regeneratorRuntime().wrap(function _callee82$(_context82) {
          while (1) {
            switch (_context82.prev = _context82.next) {
              case 0:
                _context82.next = 2;
                return EdCrypto.deriveBits(Object.assign(Object.assign({}, algorithm), {
                  public: algorithm.public
                }), baseKey, length);

              case 2:
                bits = _context82.sent;
                return _context82.abrupt("return", bits);

              case 4:
              case "end":
                return _context82.stop();
            }
          }
        }, _callee82);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee83() {
        return _regeneratorRuntime().wrap(function _callee83$(_context83) {
          while (1) {
            switch (_context83.prev = _context83.next) {
              case 0:
                return _context83.abrupt("return", EdCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context83.stop();
            }
          }
        }, _callee83);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {
        var key;
        return _regeneratorRuntime().wrap(function _callee84$(_context84) {
          while (1) {
            switch (_context84.prev = _context84.next) {
              case 0:
                _context84.next = 2;
                return EdCrypto.importKey(format, keyData, Object.assign(Object.assign({}, algorithm), {
                  name: this.name
                }), extractable, keyUsages);

              case 2:
                key = _context84.sent;
                return _context84.abrupt("return", key);

              case 4:
              case "end":
                return _context84.stop();
            }
          }
        }, _callee84, this);
      }));
    }
  }]);

  return EcdhEsProvider;
}(core__namespace.EcdhEsProvider);

var Sha1Provider = /*#__PURE__*/function (_core__namespace$Prov2) {
  _inherits(Sha1Provider, _core__namespace$Prov2);

  var _super20 = _createSuper(Sha1Provider);

  function Sha1Provider() {
    var _this15;

    _classCallCheck(this, Sha1Provider);

    _this15 = _super20.apply(this, arguments);
    _this15.name = "SHA-1";
    _this15.usages = [];
    return _this15;
  }

  _createClass(Sha1Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {
        return _regeneratorRuntime().wrap(function _callee85$(_context85) {
          while (1) {
            switch (_context85.prev = _context85.next) {
              case 0:
                return _context85.abrupt("return", ShaCrypto.digest(algorithm, data));

              case 1:
              case "end":
                return _context85.stop();
            }
          }
        }, _callee85);
      }));
    }
  }]);

  return Sha1Provider;
}(core__namespace.ProviderCrypto);

var Sha256Provider = /*#__PURE__*/function (_Sha1Provider) {
  _inherits(Sha256Provider, _Sha1Provider);

  var _super21 = _createSuper(Sha256Provider);

  function Sha256Provider() {
    var _this16;

    _classCallCheck(this, Sha256Provider);

    _this16 = _super21.apply(this, arguments);
    _this16.name = "SHA-256";
    return _this16;
  }

  return _createClass(Sha256Provider);
}(Sha1Provider);

var Sha512Provider = /*#__PURE__*/function (_Sha1Provider2) {
  _inherits(Sha512Provider, _Sha1Provider2);

  var _super22 = _createSuper(Sha512Provider);

  function Sha512Provider() {
    var _this17;

    _classCallCheck(this, Sha512Provider);

    _this17 = _super22.apply(this, arguments);
    _this17.name = "SHA-512";
    return _this17;
  }

  return _createClass(Sha512Provider);
}(Sha1Provider);

var Sha3256Provider = /*#__PURE__*/function (_core__namespace$Prov3) {
  _inherits(Sha3256Provider, _core__namespace$Prov3);

  var _super23 = _createSuper(Sha3256Provider);

  function Sha3256Provider() {
    var _this18;

    _classCallCheck(this, Sha3256Provider);

    _this18 = _super23.apply(this, arguments);
    _this18.name = "SHA3-256";
    _this18.usages = [];
    return _this18;
  }

  _createClass(Sha3256Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {
        return _regeneratorRuntime().wrap(function _callee86$(_context86) {
          while (1) {
            switch (_context86.prev = _context86.next) {
              case 0:
                return _context86.abrupt("return", sha3.hash256(new Uint8Array(data)).buffer);

              case 1:
              case "end":
                return _context86.stop();
            }
          }
        }, _callee86);
      }));
    }
  }]);

  return Sha3256Provider;
}(core__namespace.ProviderCrypto);

var Sha3384Provider = /*#__PURE__*/function (_core__namespace$Prov4) {
  _inherits(Sha3384Provider, _core__namespace$Prov4);

  var _super24 = _createSuper(Sha3384Provider);

  function Sha3384Provider() {
    var _this19;

    _classCallCheck(this, Sha3384Provider);

    _this19 = _super24.apply(this, arguments);
    _this19.name = "SHA3-384";
    _this19.usages = [];
    return _this19;
  }

  _createClass(Sha3384Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee87() {
        return _regeneratorRuntime().wrap(function _callee87$(_context87) {
          while (1) {
            switch (_context87.prev = _context87.next) {
              case 0:
                return _context87.abrupt("return", sha3.hash384(new Uint8Array(data)).buffer);

              case 1:
              case "end":
                return _context87.stop();
            }
          }
        }, _callee87);
      }));
    }
  }]);

  return Sha3384Provider;
}(core__namespace.ProviderCrypto);

var Sha3512Provider = /*#__PURE__*/function (_core__namespace$Prov5) {
  _inherits(Sha3512Provider, _core__namespace$Prov5);

  var _super25 = _createSuper(Sha3512Provider);

  function Sha3512Provider() {
    var _this20;

    _classCallCheck(this, Sha3512Provider);

    _this20 = _super25.apply(this, arguments);
    _this20.name = "SHA3-512";
    _this20.usages = [];
    return _this20;
  }

  _createClass(Sha3512Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee88() {
        return _regeneratorRuntime().wrap(function _callee88$(_context88) {
          while (1) {
            switch (_context88.prev = _context88.next) {
              case 0:
                return _context88.abrupt("return", sha3.hash512(new Uint8Array(data)).buffer);

              case 1:
              case "end":
                return _context88.stop();
            }
          }
        }, _callee88);
      }));
    }
  }]);

  return Sha3512Provider;
}(core__namespace.ProviderCrypto);

var Shake128Provider = /*#__PURE__*/function (_core__namespace$Shak) {
  _inherits(Shake128Provider, _core__namespace$Shak);

  var _super26 = _createSuper(Shake128Provider);

  function Shake128Provider() {
    _classCallCheck(this, Shake128Provider);

    return _super26.apply(this, arguments);
  }

  _createClass(Shake128Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {
        var output;
        return _regeneratorRuntime().wrap(function _callee89$(_context89) {
          while (1) {
            switch (_context89.prev = _context89.next) {
              case 0:
                output = new Uint8Array(algorithm.length);
                new sha3.SHAKE128().update(new Uint8Array(data)).stream(output);
                return _context89.abrupt("return", output.buffer);

              case 3:
              case "end":
                return _context89.stop();
            }
          }
        }, _callee89);
      }));
    }
  }]);

  return Shake128Provider;
}(core__namespace.Shake128Provider);

var Shake256Provider = /*#__PURE__*/function (_core__namespace$Shak2) {
  _inherits(Shake256Provider, _core__namespace$Shak2);

  var _super27 = _createSuper(Shake256Provider);

  function Shake256Provider() {
    _classCallCheck(this, Shake256Provider);

    return _super27.apply(this, arguments);
  }

  _createClass(Shake256Provider, [{
    key: "onDigest",
    value: function onDigest(algorithm, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
        var output;
        return _regeneratorRuntime().wrap(function _callee90$(_context90) {
          while (1) {
            switch (_context90.prev = _context90.next) {
              case 0:
                output = new Uint8Array(algorithm.length);
                new sha3.SHAKE256().update(new Uint8Array(data)).stream(output);
                return _context90.abrupt("return", output.buffer);

              case 3:
              case "end":
                return _context90.stop();
            }
          }
        }, _callee90);
      }));
    }
  }]);

  return Shake256Provider;
}(core__namespace.Shake256Provider);

var PbkdfCryptoKey = /*#__PURE__*/function (_CryptoKey6) {
  _inherits(PbkdfCryptoKey, _CryptoKey6);

  var _super28 = _createSuper(PbkdfCryptoKey);

  function PbkdfCryptoKey(algorithm, extractable, usages, raw) {
    var _this21;

    _classCallCheck(this, PbkdfCryptoKey);

    _this21 = _super28.call(this, algorithm, extractable, "secret", usages);
    _this21.raw = raw;
    return _this21;
  }

  return _createClass(PbkdfCryptoKey);
}(CryptoKey);

var Pbkdf2Provider = /*#__PURE__*/function (_core__namespace$Pbkd) {
  _inherits(Pbkdf2Provider, _core__namespace$Pbkd);

  var _super29 = _createSuper(Pbkdf2Provider);

  function Pbkdf2Provider() {
    _classCallCheck(this, Pbkdf2Provider);

    return _super29.apply(this, arguments);
  }

  _createClass(Pbkdf2Provider, [{
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
        return _regeneratorRuntime().wrap(function _callee91$(_context91) {
          while (1) {
            switch (_context91.prev = _context91.next) {
              case 0:
                return _context91.abrupt("return", new PbkdfCryptoKey(algorithm, extractable, keyUsages, core__namespace.BufferSourceConverter.toUint8Array(keyData)));

              case 1:
              case "end":
                return _context91.stop();
            }
          }
        }, _callee91);
      }));
    }
  }, {
    key: "onDeriveBits",
    value: function onDeriveBits(algorithm, baseKey, length) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {
        var result, salt, password;
        return _regeneratorRuntime().wrap(function _callee92$(_context92) {
          while (1) {
            switch (_context92.prev = _context92.next) {
              case 0:
                salt = core__namespace.BufferSourceConverter.toUint8Array(algorithm.salt);
                password = baseKey.raw;
                _context92.t0 = algorithm.hash.name.toUpperCase();
                _context92.next = _context92.t0 === "SHA-1" ? 5 : _context92.t0 === "SHA-256" ? 7 : _context92.t0 === "SHA-512" ? 9 : 11;
                break;

              case 5:
                result = asmCrypto__namespace.Pbkdf2HmacSha1(password, salt, algorithm.iterations, length >> 3);
                return _context92.abrupt("break", 12);

              case 7:
                result = asmCrypto__namespace.Pbkdf2HmacSha256(password, salt, algorithm.iterations, length >> 3);
                return _context92.abrupt("break", 12);

              case 9:
                result = asmCrypto__namespace.Pbkdf2HmacSha512(password, salt, algorithm.iterations, length >> 3);
                return _context92.abrupt("break", 12);

              case 11:
                throw new core__namespace.OperationError("algorithm.hash: '".concat(algorithm.hash.name, "' hash algorithm is not supported"));

              case 12:
                return _context92.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 13:
              case "end":
                return _context92.stop();
            }
          }
        }, _callee92);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(Pbkdf2Provider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      if (!(key instanceof PbkdfCryptoKey)) {
        throw new TypeError("key: Is not PbkdfCryptoKey");
      }
    }
  }]);

  return Pbkdf2Provider;
}(core__namespace.Pbkdf2Provider);

var DesCryptoKey = /*#__PURE__*/function (_CryptoKey7) {
  _inherits(DesCryptoKey, _CryptoKey7);

  var _super30 = _createSuper(DesCryptoKey);

  function DesCryptoKey(algorithm, extractable, usages, raw) {
    var _this22;

    _classCallCheck(this, DesCryptoKey);

    _this22 = _super30.call(this, algorithm, extractable, "secret", usages);
    _this22.raw = raw;
    return _this22;
  }

  _createClass(DesCryptoKey, [{
    key: "toJSON",
    value: function toJSON() {
      var jwk = {
        kty: "oct",
        alg: this.getJwkAlgorithm(),
        k: pvtsutils.Convert.ToBase64Url(this.raw),
        ext: this.extractable,
        key_ops: this.usages
      };
      return jwk;
    }
  }, {
    key: "getJwkAlgorithm",
    value: function getJwkAlgorithm() {
      switch (this.algorithm.name.toUpperCase()) {
        case "DES-CBC":
          return "DES-CBC";

        case "DES-EDE3-CBC":
          return "3DES-CBC";

        default:
          throw new core__namespace.AlgorithmError("Unsupported algorithm name");
      }
    }
  }]);

  return DesCryptoKey;
}(CryptoKey);

var DesCrypto = /*#__PURE__*/function () {
  function DesCrypto() {
    _classCallCheck(this, DesCrypto);
  }

  _createClass(DesCrypto, null, [{
    key: "checkLib",
    value: function checkLib() {
      if (typeof des__namespace === "undefined") {
        throw new core__namespace.OperationError("Cannot implement DES mechanism. Add 'https://peculiarventures.github.io/pv-webcrypto-tests/src/des.js' script to your project");
      }
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key) {
      if (!(key instanceof DesCryptoKey)) {
        throw new TypeError("key: Is not DesCryptoKey");
      }
    }
  }, {
    key: "generateKey",
    value: function generateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
        var raw;
        return _regeneratorRuntime().wrap(function _callee93$(_context93) {
          while (1) {
            switch (_context93.prev = _context93.next) {
              case 0:
                this.checkLib();
                raw = exports.nativeCrypto.getRandomValues(new Uint8Array(algorithm.length / 8));
                return _context93.abrupt("return", new DesCryptoKey(algorithm, extractable, keyUsages, raw));

              case 3:
              case "end":
                return _context93.stop();
            }
          }
        }, _callee93, this);
      }));
    }
  }, {
    key: "exportKey",
    value: function exportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee94() {
        return _regeneratorRuntime().wrap(function _callee94$(_context94) {
          while (1) {
            switch (_context94.prev = _context94.next) {
              case 0:
                this.checkLib();
                _context94.t0 = format;
                _context94.next = _context94.t0 === "jwk" ? 4 : _context94.t0 === "raw" ? 5 : 6;
                break;

              case 4:
                return _context94.abrupt("return", key.toJSON());

              case 5:
                return _context94.abrupt("return", key.raw.buffer);

              case 6:
                throw new core__namespace.OperationError("format: Must be 'jwk' or 'raw'");

              case 7:
              case "end":
                return _context94.stop();
            }
          }
        }, _callee94, this);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
        var raw, key;
        return _regeneratorRuntime().wrap(function _callee95$(_context95) {
          while (1) {
            switch (_context95.prev = _context95.next) {
              case 0:
                this.checkLib();

                if (core__namespace.isJWK(keyData)) {
                  raw = pvtsutils.Convert.FromBase64Url(keyData.k);
                } else {
                  raw = core__namespace.BufferSourceConverter.toArrayBuffer(keyData);
                }

                if (!(algorithm.name === "DES-CBC" && raw.byteLength !== 8 || algorithm.name === "DES-EDE3-CBC" && raw.byteLength !== 24)) {
                  _context95.next = 4;
                  break;
                }

                throw new core__namespace.OperationError("keyData: Is wrong key length");

              case 4:
                key = new DesCryptoKey({
                  name: algorithm.name,
                  length: raw.byteLength << 3
                }, extractable, keyUsages, new Uint8Array(raw));
                return _context95.abrupt("return", key);

              case 6:
              case "end":
                return _context95.stop();
            }
          }
        }, _callee95, this);
      }));
    }
  }, {
    key: "encrypt",
    value: function encrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
        return _regeneratorRuntime().wrap(function _callee96$(_context96) {
          while (1) {
            switch (_context96.prev = _context96.next) {
              case 0:
                return _context96.abrupt("return", this.cipher(algorithm, key, data, true));

              case 1:
              case "end":
                return _context96.stop();
            }
          }
        }, _callee96, this);
      }));
    }
  }, {
    key: "decrypt",
    value: function decrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
        return _regeneratorRuntime().wrap(function _callee97$(_context97) {
          while (1) {
            switch (_context97.prev = _context97.next) {
              case 0:
                return _context97.abrupt("return", this.cipher(algorithm, key, data, false));

              case 1:
              case "end":
                return _context97.stop();
            }
          }
        }, _callee97, this);
      }));
    }
  }, {
    key: "cipher",
    value: function cipher(algorithm, key, data, encrypt) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
        var type, DesCipher, iv, enc;
        return _regeneratorRuntime().wrap(function _callee98$(_context98) {
          while (1) {
            switch (_context98.prev = _context98.next) {
              case 0:
                this.checkLib();
                type = encrypt ? "encrypt" : "decrypt";
                iv = core__namespace.BufferSourceConverter.toUint8Array(algorithm.iv);
                _context98.t0 = algorithm.name.toUpperCase();
                _context98.next = _context98.t0 === "DES-CBC" ? 6 : _context98.t0 === "DES-EDE3-CBC" ? 8 : 10;
                break;

              case 6:
                DesCipher = des__namespace.CBC.instantiate(des__namespace.DES).create({
                  key: key.raw,
                  type: type,
                  iv: iv
                });
                return _context98.abrupt("break", 11);

              case 8:
                DesCipher = des__namespace.CBC.instantiate(des__namespace.EDE).create({
                  key: key.raw,
                  type: type,
                  iv: iv
                });
                return _context98.abrupt("break", 11);

              case 10:
                throw new core__namespace.OperationError("algorithm: Is not recognized");

              case 11:
                enc = DesCipher.update(new Uint8Array(data)).concat(DesCipher.final());
                return _context98.abrupt("return", new Uint8Array(enc).buffer);

              case 13:
              case "end":
                return _context98.stop();
            }
          }
        }, _callee98, this);
      }));
    }
  }]);

  return DesCrypto;
}();

var DesCbcProvider = /*#__PURE__*/function (_core__namespace$DesP) {
  _inherits(DesCbcProvider, _core__namespace$DesP);

  var _super31 = _createSuper(DesCbcProvider);

  function DesCbcProvider() {
    var _this23;

    _classCallCheck(this, DesCbcProvider);

    _this23 = _super31.apply(this, arguments);
    _this23.keySizeBits = 64;
    _this23.ivSize = 8;
    _this23.name = "DES-CBC";
    return _this23;
  }

  _createClass(DesCbcProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {
        return _regeneratorRuntime().wrap(function _callee99$(_context99) {
          while (1) {
            switch (_context99.prev = _context99.next) {
              case 0:
                return _context99.abrupt("return", DesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context99.stop();
            }
          }
        }, _callee99);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
        return _regeneratorRuntime().wrap(function _callee100$(_context100) {
          while (1) {
            switch (_context100.prev = _context100.next) {
              case 0:
                return _context100.abrupt("return", DesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context100.stop();
            }
          }
        }, _callee100);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
        return _regeneratorRuntime().wrap(function _callee101$(_context101) {
          while (1) {
            switch (_context101.prev = _context101.next) {
              case 0:
                return _context101.abrupt("return", DesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context101.stop();
            }
          }
        }, _callee101);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee102() {
        return _regeneratorRuntime().wrap(function _callee102$(_context102) {
          while (1) {
            switch (_context102.prev = _context102.next) {
              case 0:
                return _context102.abrupt("return", DesCrypto.encrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context102.stop();
            }
          }
        }, _callee102);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee103() {
        return _regeneratorRuntime().wrap(function _callee103$(_context103) {
          while (1) {
            switch (_context103.prev = _context103.next) {
              case 0:
                return _context103.abrupt("return", DesCrypto.decrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context103.stop();
            }
          }
        }, _callee103);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(DesCbcProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      DesCrypto.checkCryptoKey(key);
    }
  }]);

  return DesCbcProvider;
}(core__namespace.DesProvider);

var DesEde3CbcProvider = /*#__PURE__*/function (_core__namespace$DesP2) {
  _inherits(DesEde3CbcProvider, _core__namespace$DesP2);

  var _super32 = _createSuper(DesEde3CbcProvider);

  function DesEde3CbcProvider() {
    var _this24;

    _classCallCheck(this, DesEde3CbcProvider);

    _this24 = _super32.apply(this, arguments);
    _this24.keySizeBits = 192;
    _this24.ivSize = 8;
    _this24.name = "DES-EDE3-CBC";
    return _this24;
  }

  _createClass(DesEde3CbcProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee104() {
        return _regeneratorRuntime().wrap(function _callee104$(_context104) {
          while (1) {
            switch (_context104.prev = _context104.next) {
              case 0:
                return _context104.abrupt("return", DesCrypto.generateKey(algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context104.stop();
            }
          }
        }, _callee104);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee105() {
        return _regeneratorRuntime().wrap(function _callee105$(_context105) {
          while (1) {
            switch (_context105.prev = _context105.next) {
              case 0:
                return _context105.abrupt("return", DesCrypto.exportKey(format, key));

              case 1:
              case "end":
                return _context105.stop();
            }
          }
        }, _callee105);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee106() {
        return _regeneratorRuntime().wrap(function _callee106$(_context106) {
          while (1) {
            switch (_context106.prev = _context106.next) {
              case 0:
                return _context106.abrupt("return", DesCrypto.importKey(format, keyData, algorithm, extractable, keyUsages));

              case 1:
              case "end":
                return _context106.stop();
            }
          }
        }, _callee106);
      }));
    }
  }, {
    key: "onEncrypt",
    value: function onEncrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee107() {
        return _regeneratorRuntime().wrap(function _callee107$(_context107) {
          while (1) {
            switch (_context107.prev = _context107.next) {
              case 0:
                return _context107.abrupt("return", DesCrypto.encrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context107.stop();
            }
          }
        }, _callee107);
      }));
    }
  }, {
    key: "onDecrypt",
    value: function onDecrypt(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee108() {
        return _regeneratorRuntime().wrap(function _callee108$(_context108) {
          while (1) {
            switch (_context108.prev = _context108.next) {
              case 0:
                return _context108.abrupt("return", DesCrypto.decrypt(algorithm, key, data));

              case 1:
              case "end":
                return _context108.stop();
            }
          }
        }, _callee108);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(DesEde3CbcProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      DesCrypto.checkCryptoKey(key);
    }
  }]);

  return DesEde3CbcProvider;
}(core__namespace.DesProvider);

var JsonBase64UrlConverter = {
  fromJSON: function fromJSON(value) {
    return Buffer.from(pvtsutils.Convert.FromBase64Url(value));
  },
  toJSON: function toJSON(value) {
    return pvtsutils.Convert.ToBase64Url(value);
  }
};

var HmacCryptoKey = /*#__PURE__*/function (_CryptoKey8) {
  _inherits(HmacCryptoKey, _CryptoKey8);

  var _super33 = _createSuper(HmacCryptoKey);

  function HmacCryptoKey() {
    var _this25;

    var algorithm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      name: "HMAC"
    };
    var extractable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var usages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Uint8Array(0);

    _classCallCheck(this, HmacCryptoKey);

    _this25 = _super33.call(this, algorithm, extractable, "secret", usages);
    _this25.kty = "oct";
    _this25.data = data;
    return _this25;
  }

  _createClass(HmacCryptoKey, [{
    key: "alg",
    get: function get() {
      var hash = this.algorithm.hash.name.toUpperCase();
      return "HS".concat(hash.replace("SHA-", ""));
    },
    set: function set(value) {}
  }]);

  return HmacCryptoKey;
}(CryptoKey);

tslib.__decorate([jsonSchema.JsonProp({
  name: "ext",
  type: jsonSchema.JsonPropTypes.Boolean,
  optional: true
})], HmacCryptoKey.prototype, "extractable", void 0);

tslib.__decorate([jsonSchema.JsonProp({
  name: "key_ops",
  type: jsonSchema.JsonPropTypes.String,
  repeated: true,
  optional: true
})], HmacCryptoKey.prototype, "usages", void 0);

tslib.__decorate([jsonSchema.JsonProp({
  name: "k",
  converter: JsonBase64UrlConverter
})], HmacCryptoKey.prototype, "data", void 0);

tslib.__decorate([jsonSchema.JsonProp({
  type: jsonSchema.JsonPropTypes.String
})], HmacCryptoKey.prototype, "kty", void 0);

tslib.__decorate([jsonSchema.JsonProp({
  type: jsonSchema.JsonPropTypes.String
})], HmacCryptoKey.prototype, "alg", null);

var HmacProvider = /*#__PURE__*/function (_core__namespace$Hmac) {
  _inherits(HmacProvider, _core__namespace$Hmac);

  var _super34 = _createSuper(HmacProvider);

  function HmacProvider() {
    _classCallCheck(this, HmacProvider);

    return _super34.apply(this, arguments);
  }

  _createClass(HmacProvider, [{
    key: "onGenerateKey",
    value: function onGenerateKey(algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee109() {
        var length, raw, key;
        return _regeneratorRuntime().wrap(function _callee109$(_context109) {
          while (1) {
            switch (_context109.prev = _context109.next) {
              case 0:
                length = algorithm.length || this.getDefaultLength(algorithm.hash.name);
                raw = exports.nativeCrypto.getRandomValues(new Uint8Array(length >> 3));
                key = new HmacCryptoKey(algorithm, extractable, keyUsages, raw);
                return _context109.abrupt("return", key);

              case 4:
              case "end":
                return _context109.stop();
            }
          }
        }, _callee109, this);
      }));
    }
  }, {
    key: "onSign",
    value: function onSign(algorithm, key, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee110() {
        var fn, result;
        return _regeneratorRuntime().wrap(function _callee110$(_context110) {
          while (1) {
            switch (_context110.prev = _context110.next) {
              case 0:
                _context110.t0 = key.algorithm.hash.name.toUpperCase();
                _context110.next = _context110.t0 === "SHA-1" ? 3 : _context110.t0 === "SHA-256" ? 5 : _context110.t0 === "SHA-512" ? 7 : 9;
                break;

              case 3:
                fn = asmCrypto__namespace.HmacSha1;
                return _context110.abrupt("break", 10);

              case 5:
                fn = asmCrypto__namespace.HmacSha256;
                return _context110.abrupt("break", 10);

              case 7:
                fn = asmCrypto__namespace.HmacSha512;
                return _context110.abrupt("break", 10);

              case 9:
                throw new core__namespace.OperationError("key.algorithm.hash: Is not recognized");

              case 10:
                result = new fn(key.data).process(core__namespace.BufferSourceConverter.toUint8Array(data)).finish().result;
                return _context110.abrupt("return", core__namespace.BufferSourceConverter.toArrayBuffer(result));

              case 12:
              case "end":
                return _context110.stop();
            }
          }
        }, _callee110);
      }));
    }
  }, {
    key: "onVerify",
    value: function onVerify(algorithm, key, signature, data) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee111() {
        var signature2;
        return _regeneratorRuntime().wrap(function _callee111$(_context111) {
          while (1) {
            switch (_context111.prev = _context111.next) {
              case 0:
                _context111.next = 2;
                return this.onSign(algorithm, key, data);

              case 2:
                signature2 = _context111.sent;
                return _context111.abrupt("return", pvtsutils.Convert.ToHex(signature2) === pvtsutils.Convert.ToHex(signature));

              case 4:
              case "end":
                return _context111.stop();
            }
          }
        }, _callee111, this);
      }));
    }
  }, {
    key: "onImportKey",
    value: function onImportKey(format, keyData, algorithm, extractable, keyUsages) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee112() {
        var key;
        return _regeneratorRuntime().wrap(function _callee112$(_context112) {
          while (1) {
            switch (_context112.prev = _context112.next) {
              case 0:
                _context112.t0 = format.toLowerCase();
                _context112.next = _context112.t0 === "jwk" ? 3 : _context112.t0 === "raw" ? 5 : 9;
                break;

              case 3:
                key = jsonSchema.JsonParser.fromJSON(keyData, {
                  targetSchema: HmacCryptoKey
                });
                return _context112.abrupt("break", 10);

              case 5:
                if (core__namespace.BufferSourceConverter.isBufferSource(keyData)) {
                  _context112.next = 7;
                  break;
                }

                throw new TypeError("keyData: Is not ArrayBuffer or ArrayBufferView");

              case 7:
                key = new HmacCryptoKey(algorithm, extractable, keyUsages, core__namespace.BufferSourceConverter.toUint8Array(keyData));
                return _context112.abrupt("break", 10);

              case 9:
                throw new core__namespace.OperationError("format: Must be 'jwk' or 'raw'");

              case 10:
                key.algorithm = {
                  hash: {
                    name: algorithm.hash.name
                  },
                  name: this.name,
                  length: key.data.length << 3
                };
                key.extractable = extractable;
                key.usages = keyUsages;
                return _context112.abrupt("return", key);

              case 14:
              case "end":
                return _context112.stop();
            }
          }
        }, _callee112, this);
      }));
    }
  }, {
    key: "onExportKey",
    value: function onExportKey(format, key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee113() {
        var jwk;
        return _regeneratorRuntime().wrap(function _callee113$(_context113) {
          while (1) {
            switch (_context113.prev = _context113.next) {
              case 0:
                _context113.t0 = format.toLowerCase();
                _context113.next = _context113.t0 === "jwk" ? 3 : _context113.t0 === "raw" ? 5 : 6;
                break;

              case 3:
                jwk = jsonSchema.JsonSerializer.toJSON(key);
                return _context113.abrupt("return", jwk);

              case 5:
                return _context113.abrupt("return", new Uint8Array(key.data).buffer);

              case 6:
                throw new core__namespace.OperationError("format: Must be 'jwk' or 'raw'");

              case 7:
              case "end":
                return _context113.stop();
            }
          }
        }, _callee113);
      }));
    }
  }, {
    key: "checkCryptoKey",
    value: function checkCryptoKey(key, keyUsage) {
      _get(_getPrototypeOf(HmacProvider.prototype), "checkCryptoKey", this).call(this, key, keyUsage);

      if (!(key instanceof HmacCryptoKey)) {
        throw new TypeError("key: Is not HMAC CryptoKey");
      }
    }
  }]);

  return HmacProvider;
}(core__namespace.HmacProvider);

var _WrappedNativeCryptoKey_nativeKey;

var WrappedNativeCryptoKey = /*#__PURE__*/function (_CryptoKey9) {
  _inherits(WrappedNativeCryptoKey, _CryptoKey9);

  var _super35 = _createSuper(WrappedNativeCryptoKey);

  function WrappedNativeCryptoKey(algorithm, extractable, type, usages, nativeKey) {
    var _this26;

    _classCallCheck(this, WrappedNativeCryptoKey);

    _this26 = _super35.call(this, algorithm, extractable, type, usages);

    _WrappedNativeCryptoKey_nativeKey.set(_assertThisInitialized(_this26), void 0);

    tslib.__classPrivateFieldSet(_assertThisInitialized(_this26), _WrappedNativeCryptoKey_nativeKey, nativeKey, "f");

    return _this26;
  }

  _createClass(WrappedNativeCryptoKey, [{
    key: "getNative",
    value: function getNative() {
      return tslib.__classPrivateFieldGet(this, _WrappedNativeCryptoKey_nativeKey, "f");
    }
  }]);

  return WrappedNativeCryptoKey;
}(CryptoKey);

_WrappedNativeCryptoKey_nativeKey = new WeakMap();

var SubtleCrypto = /*#__PURE__*/function (_core__namespace$Subt) {
  _inherits(SubtleCrypto, _core__namespace$Subt);

  var _super36 = _createSuper(SubtleCrypto);

  function SubtleCrypto() {
    var _this27;

    _classCallCheck(this, SubtleCrypto);

    _this27 = _super36.call(this);
    _this27.browserInfo = BrowserInfo();

    _this27.providers.set(new AesCbcProvider());

    _this27.providers.set(new AesCtrProvider());

    _this27.providers.set(new AesEcbProvider());

    _this27.providers.set(new AesGcmProvider());

    _this27.providers.set(new AesKwProvider());

    _this27.providers.set(new DesCbcProvider());

    _this27.providers.set(new DesEde3CbcProvider());

    _this27.providers.set(new RsaSsaProvider());

    _this27.providers.set(new RsaPssProvider());

    _this27.providers.set(new RsaOaepProvider());

    _this27.providers.set(new RsaEsProvider());

    _this27.providers.set(new EcdsaProvider());

    _this27.providers.set(new EcdhProvider());

    _this27.providers.set(new Sha1Provider());

    _this27.providers.set(new Sha256Provider());

    _this27.providers.set(new Sha512Provider());

    _this27.providers.set(new Pbkdf2Provider());

    _this27.providers.set(new HmacProvider());

    _this27.providers.set(new EdDsaProvider());

    _this27.providers.set(new EcdhEsProvider());

    _this27.providers.set(new Sha3256Provider());

    _this27.providers.set(new Sha3384Provider());

    _this27.providers.set(new Sha3512Provider());

    _this27.providers.set(new Shake128Provider());

    _this27.providers.set(new Shake256Provider());

    return _this27;
  }

  _createClass(SubtleCrypto, [{
    key: "digest",
    value: function digest() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee114() {
        return _regeneratorRuntime().wrap(function _callee114$(_context114) {
          while (1) {
            switch (_context114.prev = _context114.next) {
              case 0:
                return _context114.abrupt("return", this.wrapNative.apply(this, ["digest"].concat(args)));

              case 1:
              case "end":
                return _context114.stop();
            }
          }
        }, _callee114, this);
      }));
    }
  }, {
    key: "importKey",
    value: function importKey() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee115() {
        return _regeneratorRuntime().wrap(function _callee115$(_context115) {
          while (1) {
            switch (_context115.prev = _context115.next) {
              case 0:
                this.fixFirefoxEcImportPkcs8(args);
                return _context115.abrupt("return", this.wrapNative.apply(this, ["importKey"].concat(args)));

              case 2:
              case "end":
                return _context115.stop();
            }
          }
        }, _callee115, this);
      }));
    }
  }, {
    key: "exportKey",
    value: function exportKey() {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee116() {
        return _regeneratorRuntime().wrap(function _callee116$(_context116) {
          while (1) {
            switch (_context116.prev = _context116.next) {
              case 0:
                _context116.next = 2;
                return this.fixFirefoxEcExportPkcs8(args);

              case 2:
                _context116.t0 = _context116.sent;

                if (_context116.t0) {
                  _context116.next = 7;
                  break;
                }

                _context116.next = 6;
                return this.wrapNative.apply(this, ["exportKey"].concat(args));

              case 6:
                _context116.t0 = _context116.sent;

              case 7:
                return _context116.abrupt("return", _context116.t0);

              case 8:
              case "end":
                return _context116.stop();
            }
          }
        }, _callee116, this);
      }));
    }
  }, {
    key: "generateKey",
    value: function generateKey() {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee117() {
        return _regeneratorRuntime().wrap(function _callee117$(_context117) {
          while (1) {
            switch (_context117.prev = _context117.next) {
              case 0:
                return _context117.abrupt("return", this.wrapNative.apply(this, ["generateKey"].concat(args)));

              case 1:
              case "end":
                return _context117.stop();
            }
          }
        }, _callee117, this);
      }));
    }
  }, {
    key: "sign",
    value: function sign() {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee118() {
        return _regeneratorRuntime().wrap(function _callee118$(_context118) {
          while (1) {
            switch (_context118.prev = _context118.next) {
              case 0:
                return _context118.abrupt("return", this.wrapNative.apply(this, ["sign"].concat(args)));

              case 1:
              case "end":
                return _context118.stop();
            }
          }
        }, _callee118, this);
      }));
    }
  }, {
    key: "verify",
    value: function verify() {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee119() {
        return _regeneratorRuntime().wrap(function _callee119$(_context119) {
          while (1) {
            switch (_context119.prev = _context119.next) {
              case 0:
                return _context119.abrupt("return", this.wrapNative.apply(this, ["verify"].concat(args)));

              case 1:
              case "end":
                return _context119.stop();
            }
          }
        }, _callee119, this);
      }));
    }
  }, {
    key: "encrypt",
    value: function encrypt() {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee120() {
        return _regeneratorRuntime().wrap(function _callee120$(_context120) {
          while (1) {
            switch (_context120.prev = _context120.next) {
              case 0:
                return _context120.abrupt("return", this.wrapNative.apply(this, ["encrypt"].concat(args)));

              case 1:
              case "end":
                return _context120.stop();
            }
          }
        }, _callee120, this);
      }));
    }
  }, {
    key: "decrypt",
    value: function decrypt() {
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee121() {
        return _regeneratorRuntime().wrap(function _callee121$(_context121) {
          while (1) {
            switch (_context121.prev = _context121.next) {
              case 0:
                return _context121.abrupt("return", this.wrapNative.apply(this, ["decrypt"].concat(args)));

              case 1:
              case "end":
                return _context121.stop();
            }
          }
        }, _callee121, this);
      }));
    }
  }, {
    key: "wrapKey",
    value: function wrapKey() {
      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee122() {
        return _regeneratorRuntime().wrap(function _callee122$(_context122) {
          while (1) {
            switch (_context122.prev = _context122.next) {
              case 0:
                return _context122.abrupt("return", this.wrapNative.apply(this, ["wrapKey"].concat(args)));

              case 1:
              case "end":
                return _context122.stop();
            }
          }
        }, _callee122, this);
      }));
    }
  }, {
    key: "unwrapKey",
    value: function unwrapKey() {
      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee123() {
        return _regeneratorRuntime().wrap(function _callee123$(_context123) {
          while (1) {
            switch (_context123.prev = _context123.next) {
              case 0:
                return _context123.abrupt("return", this.wrapNative.apply(this, ["unwrapKey"].concat(args)));

              case 1:
              case "end":
                return _context123.stop();
            }
          }
        }, _callee123, this);
      }));
    }
  }, {
    key: "deriveBits",
    value: function deriveBits() {
      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
        args[_key19] = arguments[_key19];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee124() {
        return _regeneratorRuntime().wrap(function _callee124$(_context124) {
          while (1) {
            switch (_context124.prev = _context124.next) {
              case 0:
                return _context124.abrupt("return", this.wrapNative.apply(this, ["deriveBits"].concat(args)));

              case 1:
              case "end":
                return _context124.stop();
            }
          }
        }, _callee124, this);
      }));
    }
  }, {
    key: "deriveKey",
    value: function deriveKey() {
      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
        args[_key20] = arguments[_key20];
      }

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee125() {
        return _regeneratorRuntime().wrap(function _callee125$(_context125) {
          while (1) {
            switch (_context125.prev = _context125.next) {
              case 0:
                return _context125.abrupt("return", this.wrapNative.apply(this, ["deriveKey"].concat(args)));

              case 1:
              case "end":
                return _context125.stop();
            }
          }
        }, _callee125, this);
      }));
    }
  }, {
    key: "wrapNative",
    value: function wrapNative(method) {
      var _this28 = this;

      for (var _len21 = arguments.length, args = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {
        args[_key21 - 1] = arguments[_key21];
      }

      var _superIndex = function _superIndex(name) {
        return _get(_getPrototypeOf(SubtleCrypto.prototype), name, _this28);
      };

      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee126() {
        var nativeArgs, res, data, keyData, _res, _data, _keyData, _res2, _data2, _res3, _iterator, _step, arg, i, _arg, fn;

        return _regeneratorRuntime().wrap(function _callee126$(_context126) {
          while (1) {
            switch (_context126.prev = _context126.next) {
              case 0:
                if (~["generateKey", "unwrapKey", "deriveKey", "importKey"].indexOf(method)) {
                  this.fixAlgorithmName(args);
                }

                _context126.prev = 1;

                if (!(method !== "digest" || !args.some(function (a) {
                  return a instanceof CryptoKey;
                }))) {
                  _context126.next = 9;
                  break;
                }

                nativeArgs = this.fixNativeArguments(method, args);
                Debug.info("Call native '".concat(method, "' method"), nativeArgs);
                _context126.next = 7;
                return exports.nativeSubtle[method].apply(exports.nativeSubtle, nativeArgs);

              case 7:
                res = _context126.sent;
                return _context126.abrupt("return", this.fixNativeResult(method, args, res));

              case 9:
                _context126.next = 14;
                break;

              case 11:
                _context126.prev = 11;
                _context126.t0 = _context126["catch"](1);
                Debug.warn("Error on native '".concat(method, "' calling. ").concat(_context126.t0.message), _context126.t0);

              case 14:
                if (!(method === "wrapKey")) {
                  _context126.next = 30;
                  break;
                }

                _context126.prev = 15;
                Debug.info("Trying to wrap key by using native functions", args);
                _context126.next = 19;
                return this.exportKey(args[0], args[1]);

              case 19:
                data = _context126.sent;
                keyData = args[0] === "jwk" ? pvtsutils.Convert.FromUtf8String(JSON.stringify(data)) : data;
                _context126.next = 23;
                return this.encrypt(args[3], args[2], keyData);

              case 23:
                _res = _context126.sent;
                return _context126.abrupt("return", _res);

              case 27:
                _context126.prev = 27;
                _context126.t1 = _context126["catch"](15);
                Debug.warn("Cannot wrap key by native functions. ".concat(_context126.t1.message), _context126.t1);

              case 30:
                if (!(method === "unwrapKey")) {
                  _context126.next = 46;
                  break;
                }

                _context126.prev = 31;
                Debug.info("Trying to unwrap key by using native functions", args);
                _context126.next = 35;
                return this.decrypt(args[3], args[2], args[1]);

              case 35:
                _data = _context126.sent;
                _keyData = args[0] === "jwk" ? JSON.parse(pvtsutils.Convert.ToUtf8String(_data)) : _data;
                _context126.next = 39;
                return this.importKey(args[0], _keyData, args[4], args[5], args[6]);

              case 39:
                _res2 = _context126.sent;
                return _context126.abrupt("return", _res2);

              case 43:
                _context126.prev = 43;
                _context126.t2 = _context126["catch"](31);
                Debug.warn("Cannot unwrap key by native functions. ".concat(_context126.t2.message), _context126.t2);

              case 46:
                if (!(method === "deriveKey")) {
                  _context126.next = 61;
                  break;
                }

                _context126.prev = 47;
                Debug.info("Trying to derive key by using native functions", args);
                _context126.next = 51;
                return this.deriveBits(args[0], args[1], args[2].length);

              case 51:
                _data2 = _context126.sent;
                _context126.next = 54;
                return this.importKey("raw", _data2, args[2], args[3], args[4]);

              case 54:
                _res3 = _context126.sent;
                return _context126.abrupt("return", _res3);

              case 58:
                _context126.prev = 58;
                _context126.t3 = _context126["catch"](47);
                Debug.warn("Cannot derive key by native functions. ".concat(_context126.t3.message), _context126.t3);

              case 61:
                if (!(method === "deriveBits" || method === "deriveKey")) {
                  _context126.next = 81;
                  break;
                }

                _iterator = _createForOfIteratorHelper(args);
                _context126.prev = 63;

                _iterator.s();

              case 65:
                if ((_step = _iterator.n()).done) {
                  _context126.next = 73;
                  break;
                }

                arg = _step.value;

                if (!(_typeof(arg) === "object" && arg.public && SubtleCrypto.isAnotherKey(arg.public))) {
                  _context126.next = 71;
                  break;
                }

                _context126.next = 70;
                return this.castKey(arg.public);

              case 70:
                arg.public = _context126.sent;

              case 71:
                _context126.next = 65;
                break;

              case 73:
                _context126.next = 78;
                break;

              case 75:
                _context126.prev = 75;
                _context126.t4 = _context126["catch"](63);

                _iterator.e(_context126.t4);

              case 78:
                _context126.prev = 78;

                _iterator.f();

                return _context126.finish(78);

              case 81:
                i = 0;

              case 82:
                if (!(i < args.length)) {
                  _context126.next = 91;
                  break;
                }

                _arg = args[i];

                if (!SubtleCrypto.isAnotherKey(_arg)) {
                  _context126.next = 88;
                  break;
                }

                _context126.next = 87;
                return this.castKey(_arg);

              case 87:
                args[i] = _context126.sent;

              case 88:
                i++;
                _context126.next = 82;
                break;

              case 91:
                fn = _superIndex(method);

                if (!(typeof fn === "function")) {
                  _context126.next = 94;
                  break;
                }

                return _context126.abrupt("return", fn.apply(this, args));

              case 94:
                throw new Error("Incorrect type of 'method'. Must be 'function'.");

              case 95:
              case "end":
                return _context126.stop();
            }
          }
        }, _callee126, this, [[1, 11], [15, 27], [31, 43], [47, 58], [63, 75, 78, 81]]);
      }));
    }
  }, {
    key: "fixNativeArguments",
    value: function fixNativeArguments(method, args) {
      var _a, _b, _c, _d, _e, _f, _g, _h;

      var res = _toConsumableArray(args);

      if (method === "importKey") {
        if (this.browserInfo.name === Browser.IE && ((_b = (_a = res[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a)) === "jwk" && !pvtsutils.BufferSourceConverter.isBufferSource(res[1])) {
          res[1] = pvtsutils.Convert.FromUtf8String(JSON.stringify(res[1]));
        }
      }

      if (this.browserInfo.name === Browser.IE && args[1] instanceof WrappedNativeCryptoKey) {
        switch (method) {
          case "sign":
          case "verify":
          case "encrypt":
          case "decrypt":
            res[0] = Object.assign(Object.assign({}, this.prepareAlgorithm(res[0])), {
              hash: (_e = (_d = (_c = res[1]) === null || _c === void 0 ? void 0 : _c.algorithm) === null || _d === void 0 ? void 0 : _d.hash) === null || _e === void 0 ? void 0 : _e.name
            });
            break;

          case "wrapKey":
          case "unwrapKey":
            res[4] = Object.assign(Object.assign({}, this.prepareAlgorithm(res[4])), {
              hash: (_h = (_g = (_f = res[3]) === null || _f === void 0 ? void 0 : _f.algorithm) === null || _g === void 0 ? void 0 : _g.hash) === null || _h === void 0 ? void 0 : _h.name
            });
            break;
        }
      }

      for (var i = 0; i < res.length; i++) {
        var arg = res[i];

        if (arg instanceof WrappedNativeCryptoKey) {
          res[i] = arg.getNative();
        }
      }

      return res;
    }
  }, {
    key: "fixNativeResult",
    value: function fixNativeResult(method, args, res) {
      var _a, _b;

      if (this.browserInfo.name === Browser.IE) {
        if (method === "exportKey") {
          if (((_b = (_a = args[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a)) === "jwk" && res instanceof ArrayBuffer) {
            return JSON.parse(pvtsutils.Convert.ToUtf8String(res));
          }
        }

        if ("privateKey" in res) {
          var privateKeyUsages = ["sign", "decrypt", "unwrapKey", "deriveKey", "deriveBits"];
          var publicKeyUsages = ["verify", "encrypt", "wrapKey"];
          return {
            privateKey: this.wrapNativeKey(res.privateKey, args[0], args[1], args[2].filter(function (o) {
              return privateKeyUsages.includes(o);
            })),
            publicKey: this.wrapNativeKey(res.publicKey, args[0], args[1], args[2].filter(function (o) {
              return publicKeyUsages.includes(o);
            }))
          };
        } else if ("extractable" in res) {
          var algorithm;
          var usages;

          switch (method) {
            case "importKey":
              algorithm = args[2];
              usages = args[4];
              break;

            case "unwrapKey":
              algorithm = args[4];
              usages = args[6];
              break;

            case "generateKey":
              algorithm = args[0];
              usages = args[2];
              break;

            default:
              throw new core__namespace.OperationError("Cannot wrap native key. Unsupported method in use");
          }

          return this.wrapNativeKey(res, algorithm, res.extractable, usages);
        }
      }

      return res;
    }
  }, {
    key: "wrapNativeKey",
    value: function wrapNativeKey(key, algorithm, extractable, keyUsages) {
      if (this.browserInfo.name === Browser.IE) {
        var algs = ["RSASSA-PKCS1-v1_5", "RSA-PSS", "RSA-OAEP", "AES-CBC", "AES-CTR", "AES-KW", "HMAC"];
        var index = algs.map(function (o) {
          return o.toLowerCase();
        }).indexOf(key.algorithm.name.toLowerCase());

        if (index !== -1) {
          var alg = this.prepareAlgorithm(algorithm);
          var newAlg = Object.assign(Object.assign({}, key.algorithm), {
            name: algs[index]
          });

          if (core__namespace.SubtleCrypto.isHashedAlgorithm(alg)) {
            newAlg.hash = {
              name: alg.hash.name.toUpperCase()
            };
          }

          Debug.info("Wrapping ".concat(algs[index], " crypto key to WrappedNativeCryptoKey"));
          return new WrappedNativeCryptoKey(newAlg, extractable, key.type, keyUsages, key);
        }
      }

      return key;
    }
  }, {
    key: "castKey",
    value: function castKey(key) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee127() {
        var provider, jwk;
        return _regeneratorRuntime().wrap(function _callee127$(_context127) {
          while (1) {
            switch (_context127.prev = _context127.next) {
              case 0:
                Debug.info("Cast native CryptoKey to linter key.", key);

                if (key.extractable) {
                  _context127.next = 3;
                  break;
                }

                throw new Error("Cannot cast unextractable crypto key");

              case 3:
                provider = this.getProvider(key.algorithm.name);
                _context127.next = 6;
                return this.exportKey("jwk", key);

              case 6:
                jwk = _context127.sent;
                return _context127.abrupt("return", provider.importKey("jwk", jwk, key.algorithm, true, key.usages));

              case 8:
              case "end":
                return _context127.stop();
            }
          }
        }, _callee127, this);
      }));
    }
  }, {
    key: "fixAlgorithmName",
    value: function fixAlgorithmName(args) {
      if (this.browserInfo.name === Browser.Edge) {
        for (var i = 0; i < args.length; i++) {
          var arg = args[0];

          if (typeof arg === "string") {
            var _iterator2 = _createForOfIteratorHelper(this.providers.algorithms),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var algorithm = _step2.value;

                if (algorithm.toLowerCase() === arg.toLowerCase()) {
                  args[i] = algorithm;
                  break;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          } else if (_typeof(arg) === "object" && typeof arg.name === "string") {
            var _iterator3 = _createForOfIteratorHelper(this.providers.algorithms),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _algorithm = _step3.value;

                if (_algorithm.toLowerCase() === arg.name.toLowerCase()) {
                  arg.name = _algorithm;
                }

                if (typeof arg.hash === "string" && _algorithm.toLowerCase() === arg.hash.toLowerCase() || _typeof(arg.hash) === "object" && typeof arg.hash.name === "string" && _algorithm.toLowerCase() === arg.hash.name.toLowerCase()) {
                  arg.hash = {
                    name: _algorithm
                  };
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }
      }
    }
  }, {
    key: "fixFirefoxEcImportPkcs8",
    value: function fixFirefoxEcImportPkcs8(args) {
      var preparedAlgorithm = this.prepareAlgorithm(args[2]);
      var algName = preparedAlgorithm.name.toUpperCase();

      if (this.browserInfo.name === Browser.Firefox && args[0] === "pkcs8" && ~["ECDSA", "ECDH"].indexOf(algName) && ~["P-256", "P-384", "P-521"].indexOf(preparedAlgorithm.namedCurve)) {
        if (!core__namespace.BufferSourceConverter.isBufferSource(args[1])) {
          throw new TypeError("data: Is not ArrayBuffer or ArrayBufferView");
        }

        var preparedData = core__namespace.BufferSourceConverter.toArrayBuffer(args[1]);
        var keyInfo = asn1Schema.AsnConvert.parse(preparedData, core__namespace.asn1.PrivateKeyInfo);
        var privateKey = asn1Schema.AsnConvert.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);
        var jwk = jsonSchema.JsonSerializer.toJSON(privateKey);
        jwk.ext = true;
        jwk.key_ops = args[4];
        jwk.crv = preparedAlgorithm.namedCurve;
        jwk.kty = "EC";
        args[0] = "jwk";
        args[1] = jwk;
      }
    }
  }, {
    key: "fixFirefoxEcExportPkcs8",
    value: function fixFirefoxEcExportPkcs8(args) {
      return tslib.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee128() {
        var jwk, ecKey, keyInfo;
        return _regeneratorRuntime().wrap(function _callee128$(_context128) {
          while (1) {
            switch (_context128.prev = _context128.next) {
              case 0:
                _context128.prev = 0;

                if (!(this.browserInfo.name === Browser.Firefox && args[0] === "pkcs8" && ~["ECDSA", "ECDH"].indexOf(args[1].algorithm.name) && ~["P-256", "P-384", "P-521"].indexOf(args[1].algorithm.namedCurve))) {
                  _context128.next = 11;
                  break;
                }

                _context128.next = 4;
                return this.exportKey("jwk", args[1]);

              case 4:
                jwk = _context128.sent;
                ecKey = jsonSchema.JsonParser.fromJSON(jwk, {
                  targetSchema: core__namespace.asn1.EcPrivateKey
                });
                keyInfo = new core__namespace.asn1.PrivateKeyInfo();
                keyInfo.privateKeyAlgorithm.algorithm = EcCrypto.ASN_ALGORITHM;
                keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnConvert.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(args[1].algorithm.namedCurve)));
                keyInfo.privateKey = asn1Schema.AsnConvert.serialize(ecKey);
                return _context128.abrupt("return", asn1Schema.AsnConvert.serialize(keyInfo));

              case 11:
                _context128.next = 17;
                break;

              case 13:
                _context128.prev = 13;
                _context128.t0 = _context128["catch"](0);
                Debug.error(_context128.t0);
                return _context128.abrupt("return", null);

              case 17:
              case "end":
                return _context128.stop();
            }
          }
        }, _callee128, this, [[0, 13]]);
      }));
    }
  }], [{
    key: "isAnotherKey",
    value: function isAnotherKey(key) {
      if (_typeof(key) === "object" && typeof key.type === "string" && typeof key.extractable === "boolean" && _typeof(key.algorithm) === "object") {
        return !(key instanceof CryptoKey);
      }

      return false;
    }
  }]);

  return SubtleCrypto;
}(core__namespace.SubtleCrypto);

SubtleCrypto.methods = ["digest", "importKey", "exportKey", "sign", "verify", "generateKey", "encrypt", "decrypt", "deriveBits", "deriveKey", "wrapKey", "unwrapKey"];

var Crypto = /*#__PURE__*/function (_core__namespace$Cryp2) {
  _inherits(Crypto, _core__namespace$Cryp2);

  var _super37 = _createSuper(Crypto);

  function Crypto() {
    var _this29;

    _classCallCheck(this, Crypto);

    _this29 = _super37.apply(this, arguments);
    _this29.subtle = new SubtleCrypto();
    return _this29;
  }

  _createClass(Crypto, [{
    key: "nativeCrypto",
    get: function get() {
      return exports.nativeCrypto;
    }
  }, {
    key: "getRandomValues",
    value: function getRandomValues(array) {
      return exports.nativeCrypto.getRandomValues(array);
    }
  }]);

  return Crypto;
}(core__namespace.Crypto);

function WrapFunction(subtle, name) {
  var fn = subtle[name];

  subtle[name] = function () {
    var args = arguments;
    return new Promise(function (resolve, reject) {
      var op = fn.apply(subtle, args);

      op.oncomplete = function (e) {
        resolve(e.target.result);
      };

      op.onerror = function (e) {
        reject("Error on running '".concat(name, "' function"));
      };
    });
  };
}

if (typeof self !== "undefined" && self["msCrypto"]) {
  WrapFunction(exports.nativeSubtle, "generateKey");
  WrapFunction(exports.nativeSubtle, "digest");
  WrapFunction(exports.nativeSubtle, "sign");
  WrapFunction(exports.nativeSubtle, "verify");
  WrapFunction(exports.nativeSubtle, "encrypt");
  WrapFunction(exports.nativeSubtle, "decrypt");
  WrapFunction(exports.nativeSubtle, "importKey");
  WrapFunction(exports.nativeSubtle, "exportKey");
  WrapFunction(exports.nativeSubtle, "wrapKey");
  WrapFunction(exports.nativeSubtle, "unwrapKey");
  WrapFunction(exports.nativeSubtle, "deriveKey");
  WrapFunction(exports.nativeSubtle, "deriveBits");
}

if (!Math.imul) {
  Math.imul = function imul(a, b) {
    var ah = a >>> 16 & 0xffff;
    var al = a & 0xffff;
    var bh = b >>> 16 & 0xffff;
    var bl = b & 0xffff;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}

if (exports.nativeCrypto) {
  Object.freeze(exports.nativeCrypto.getRandomValues);
}

var crypto = new Crypto();
exports.Crypto = Crypto;
exports.CryptoKey = CryptoKey;
exports.crypto = crypto;
exports.setCrypto = setCrypto;

/***/ }),

/***/ 9744:
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ 5262:
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ 3864:
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ 9894:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__addDisposableResource": function() { return /* binding */ __addDisposableResource; },
/* harmony export */   "__assign": function() { return /* binding */ __assign; },
/* harmony export */   "__asyncDelegator": function() { return /* binding */ __asyncDelegator; },
/* harmony export */   "__asyncGenerator": function() { return /* binding */ __asyncGenerator; },
/* harmony export */   "__asyncValues": function() { return /* binding */ __asyncValues; },
/* harmony export */   "__await": function() { return /* binding */ __await; },
/* harmony export */   "__awaiter": function() { return /* binding */ __awaiter; },
/* harmony export */   "__classPrivateFieldGet": function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   "__classPrivateFieldIn": function() { return /* binding */ __classPrivateFieldIn; },
/* harmony export */   "__classPrivateFieldSet": function() { return /* binding */ __classPrivateFieldSet; },
/* harmony export */   "__createBinding": function() { return /* binding */ __createBinding; },
/* harmony export */   "__decorate": function() { return /* binding */ __decorate; },
/* harmony export */   "__disposeResources": function() { return /* binding */ __disposeResources; },
/* harmony export */   "__esDecorate": function() { return /* binding */ __esDecorate; },
/* harmony export */   "__exportStar": function() { return /* binding */ __exportStar; },
/* harmony export */   "__extends": function() { return /* binding */ __extends; },
/* harmony export */   "__generator": function() { return /* binding */ __generator; },
/* harmony export */   "__importDefault": function() { return /* binding */ __importDefault; },
/* harmony export */   "__importStar": function() { return /* binding */ __importStar; },
/* harmony export */   "__makeTemplateObject": function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   "__metadata": function() { return /* binding */ __metadata; },
/* harmony export */   "__param": function() { return /* binding */ __param; },
/* harmony export */   "__propKey": function() { return /* binding */ __propKey; },
/* harmony export */   "__read": function() { return /* binding */ __read; },
/* harmony export */   "__rest": function() { return /* binding */ __rest; },
/* harmony export */   "__runInitializers": function() { return /* binding */ __runInitializers; },
/* harmony export */   "__setFunctionName": function() { return /* binding */ __setFunctionName; },
/* harmony export */   "__spread": function() { return /* binding */ __spread; },
/* harmony export */   "__spreadArray": function() { return /* binding */ __spreadArray; },
/* harmony export */   "__spreadArrays": function() { return /* binding */ __spreadArrays; },
/* harmony export */   "__values": function() { return /* binding */ __values; },
/* harmony export */   "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
var fallback = __webpack_require__(2604);

fallback.shim(self);
}();
/******/ })()
;
//# sourceMappingURL=bundle.js.map